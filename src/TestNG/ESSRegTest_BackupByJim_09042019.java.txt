package TestNG;

import Lib.*;
import PageObject.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;
import java.sql.SQLException;
import java.util.concurrent.TimeUnit;

import static Lib.SystemLibrary.*;

public class ESSRegTest {

    private static String testSerialNo ="xxxxx";

    @Test(priority = 0)
    public void test0_ScenarioPrepare() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start SystemTest_ScenarioPreparation");

        SystemLibrary.logMessage("Terminate Any existing ChromeDriver.exe and Chrome.exe.");
        SystemLibrary.executeDOSCommand("Taskkill /IM chrome.exe /F");
        SystemLibrary.executeDOSCommand("Taskkill /IM chromedriver.exe /F");

        logMessage("Delete all mail.");
        JavaMailLib.deleteAllMail();

        //////////////////////////// Delete and Restore DB  //////////////////////////
        SystemLibrary.logMessage("Start Deleting Payroll and Common DB.");
        myAssert.assertEquals(DBManage.deleteMultiDB(101, 102), true, "Failed Deleting Payroll and commond db.");

        //Step P1: Restore Payroll DB
        SystemLibrary.logMessage("Step P1: Start restoring Payroll and Common DB.");
        myAssert.assertEquals(DBManage.restoreMultiDB(101, 102), true, "Failed Restoring Payroll and Common db.");
        SystemLibrary.logMessage("End of restoring payroll DB.");
        //////

        DBManage.sqlExecutor_Main(201, 201);
        DBManage.sqlExecutor_Main(202, 202);

        //Step P2: Update employee email address
        SystemLibrary.logMessage("Step p2: Start update email address and change email type as work email.");
        GeneralBasic.updateEmployeeEmailInSageMicropayDB(testSerialNo);
        SystemLibrary.logMessage("Step p2: End of updating email address.");

        //Step P3: Remove data from staging table
        SystemLibrary.logMessage("Step P3: Remove date from staging table.");
        DBManage.sqlExecutor_Main(111, 111);
        DBManage.sqlExecutor_Main(112, 112);


        //Step P4: Check nothing in eHR Implement

        //Step P5: Setup Super User's email
        SystemLibrary.logMessage("Step P5: Setup Admin user contact details.");
        WebDriver driver = GeneralBasic.launchESS(3);  //Launch ESS
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver); //Log on ESS as Super User

        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(11, 11, testSerialNo, driver), true, "Faied in Step P5: Setup Admin user contact details.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of SystemTest_ScenarioPreparation.");
        myAssert.assertAll();
    }

    @Test(priority = 1)
    public void test1_ValidateDashboardAndAuditReport() throws InterruptedException, IOException, Exception {
        //Step 1
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 1: Login as Super user, validate dashboard and audit report.");
        SystemLibrary.logMessage("Step 1: Log in as Super User");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver); //Log on ESS as Super User

        SystemLibrary.logMessage("Step 1.2: Validate Dashboard.");
        GeneralBasic.displayDashboard(driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(31, 31, driver), true, "Failed validate dashboard in step 2.");

        SystemLibrary.logMessage(("Step 1.4: Access 4 Audit Report. "));
        GeneralBasic.displayDashboard(driver);

        logMessage("Step 1.4.1: Download Profile Change Audit report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(11, 11, driver), true, "Failed in Step Step 1.4.1: Download Profile Change Audit report.");

        logMessage("Step 1.4.2: Download Leave Applictions Audit report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(12, 12, driver), true, "Failed in Step 1.4.2: Download Leave Applictions Audit report.");

        logMessage("Step 1.4.3: Download Maintenance Audit report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(13, 13, driver), true, "Failed in Step 1.4.3: Download Maintenance Audit report.");

        logMessage("Step 1.4.4: Download Activation report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(14, 14, driver), true, "Failed inStep 1.4.4: Download Activation report.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test1");
        myAssert.assertAll();
    }

    @Test(priority = 2)
    public void test2_CheckMenu() throws InterruptedException, IOException, Exception {
        //Step 2.3
        SystemLibrary.logMessage("*** Start Test 2: Check Super user menu options.");
        SystemLibrary.logMessage("*** Step 3: Check menu options.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver); //Log on ESS as Super User

        myAssert.assertEquals(GeneralBasic.displayTeamsPage(driver), 1, "Fail in Step 3: Display Teams page in Step 3.");
        myAssert.assertEquals(GeneralBasic.displayLeavesForApprovalViaNavigationBar("Admin", driver), true, "Failed in Step 3: Display Leave For Approval page.");

        //Step 2.4
        SystemLibrary.logMessage("Step 4: Check settings menus and pages.");
        GeneralBasic.displaySettings_RolesPermissions(driver);
        GeneralBasic.displaySettings_Workflows(driver);
        GeneralBasic.displaySettings_RedirectedApprovers(driver);
        GeneralBasic.displaySettings_Leave(driver);
        myAssert.assertEquals(GeneralBasic.displaySettings_Integration(driver), true, "Failed display Integration Page in Step 4.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 2.");
        myAssert.assertAll();
    }

    @Test(priority = 3)
    public void test3_WebAPIKeyAndSync() throws InterruptedException, IOException, Exception {
        //Step 2.3
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 3: Configure Web API Keys and Sync.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver); //Log on ESS as Super User

        //Step 2.5
        //Step 2.6
        SystemLibrary.logMessage("Step 6: Add new Web API Key.");
        myAssert.assertEquals(GeneralBasicHigh.addNewWebAPIConfiguration_Main(101, 101, driver), true, "Failed in Step 6: add New Web API Key in Step 6.");

        //Step 2.8 - 2.9
        SystemLibrary.logMessage("Step 7 - Step 8: Remove and Add Web API Key again.");
        GeneralBasicHigh.removeIntegrationAPIKey_Main(101, 101, driver);
        GeneralBasicHigh.addNewWebAPIConfiguration_Main(101, 101, driver);

        //Step 2.10 - 2.11
        SystemLibrary.logMessage("Step 10: Edit API configuration and Sync All Data.");
        GeneralBasicHigh.editWebAPIConfiguration_Main(102, 102, driver);
        myAssert.assertEquals(GeneralBasicHigh.syncAllData_Main(102, 102, driver), true, "Failed in step 10: Sync All Data in Step 10.");

        SystemLibrary.logMessage("Restart browser...");
        //Restart browser
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(3);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver); //Log on ESS as Super User

        //Step 2.14 - 2.16
        SystemLibrary.logMessage(("Step 14 - Step 16: - Re-Edit API configuration and Re-Sync All Data."));
        GeneralBasicHigh.editWebAPIConfiguration_Main(103, 103, driver);
        myAssert.assertEquals(GeneralBasicHigh.syncAllData_Main(103, 103, driver), true, "Failed Sync All Data in Step 16.");

        //Step 2.17
        SystemLibrary.logMessage("Step 17: Click view more button in API Log screen.");
        int origianlLogCount = PageObj_Integration.getTotalLogCount(driver);
        PageObj_Integration.button_ViewMore(driver).click();
        SystemLibrary.logMessage("View More button is clicked.");
        Thread.sleep(10000);
        int currentLogCount = PageObj_Integration.getTotalLogCount(driver);

        int newLogCount = currentLogCount - origianlLogCount;
        SystemLibrary.logMessage(newLogCount + " lines of logs are shown.");
        myAssert.assertEquals(newLogCount, 20, "The logs is not shown as expected in Step 17.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 3: Initial Sync Test.");
        myAssert.assertAll();
    }

    @Test(priority = 4)
    public void test4_CheckTeamsInitialStatus() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 4: Team");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        //Step 3.17 - 3.18
        SystemLibrary.logMessage("Step 17 - Step 19 : Select Team.");
        GeneralBasic.displayTeamsPage(driver);
        myAssert.assertEquals(PageObj_Teams.getTotalNumberOfUnsignedMemberViaTeamTable(driver), 51, "Failed validate Unassinged Team in Step 19. Expected 51.");
        PageObj_Teams.displayTeamMembers("Unassigned", driver);

        //Step 3.20
        SystemLibrary.logMessage("Step 20: check unassigned members and validate termination status");
        SystemLibrary.clickViewmoreButtonInTable(driver);
        myAssert.assertNotEquals(GeneralBasic.searchItemFromTable("Cassie HENNING;TERMINATED", PageObj_Teams.xpath_Table_Teams_Unassigned_Member, driver), 0, "Failed finding Cassie HENNING in step 20.");
        myAssert.assertNotEquals(GeneralBasic.searchItemFromTable("Samuel DAVIS;TERMINATED", PageObj_Teams.xpath_Table_Teams_Unassigned_Member, driver), 0, "Failed finding Samuel DAVIS in step 20.");
        myAssert.assertNotEquals(GeneralBasic.searchItemFromTable("Young LONG", PageObj_Teams.xpath_Table_Teams_Unassigned_Member, driver), 0, "Failed finding Young LONG in Step 20.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 4: Team.");
        myAssert.assertAll();
    }

    @Test(priority = 5)
    public void test5_ValidateRoleTable() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 5: Roles and Permission.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 21: Validate roles table");
        GeneralBasic.displaySettings_RolesPermissions(driver);

        myAssert.assertEquals(GeneralBasicHigh.getContentFromRolesTable_Main(11, 13, driver), true, "Failed Validate Role Table in Step 21.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 5: Roles and Permission.");
        myAssert.assertAll();

    }

    @Test(priority = 6)
    public void test6_RolesPermission() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 6: Configue Admin Permission.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 22: Validate Permission.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(12, 12, driver), true, "failed validate Permission in Step 22.");


        SystemLibrary.logMessage("Step 23-24: Change perssion.");
        GeneralBasicHigh.configPermissionStatus_Main(21, 22, driver);
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(23, 23, driver), true, "Failed validate permission screenshot in step 23.");

        SystemLibrary.logMessage("Restart the brower.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(3);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);


        //Step 25 Checking Setting menu
        SystemLibrary.logMessage("Step 25: Checking Setting menu");
        myAssert.assertEquals(GeneralBasic.displaySettings_RolesPermissions(driver), true, "Fail display Role and Permission page in Reg Test Step 25");
        myAssert.assertEquals(GeneralBasic.displaySettings_Integration(driver), false, "Fail display Role and Permission page in Reg Test Step 25");
        myAssert.assertEquals(GeneralBasic.displaySettings_Workflows(driver), false, "Fail display Role and Permission page in Reg Test Step 25");
        myAssert.assertEquals(GeneralBasic.displaySettings_RedirectedApprovers(driver), false, "Fail display Role and Permission page in Reg Test Step 25");
        myAssert.assertEquals(GeneralBasic.displaySettings_Leave(driver), false, "Fail display Role and Permission page in Reg Test Step 25");

        //Step 26 Check team page
        SystemLibrary.logMessage("Step 26: Check Team Page");
        myAssert.assertEquals(GeneralBasic.addTeam("Unassigned", driver), false, "Failed test on step 26");


        //Step 27 Restore Settings
        SystemLibrary.logMessage("Step 27: Restore Settings");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(31, 31, driver), true, "Failed in Step 27_1: Restore Setttngs.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(32, 32, driver), true, "Failed in Step 27_2: Restore Setttngs.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(33, 33, driver), true, "Failed in Step 27_3: Restore Setttngs.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(34, 34, driver), true, "Failed in Step 27_4: Restore Setttngs.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(35, 35, driver), true, "Failed in Step 27_5: Restore Setttngs.");

        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanelScreenshot_Main(35, 35, driver), true, "Failed in Step 27_6: Validate Role Permissions Screenshot after restoring.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(36, 36, driver), true, "Failed in Step 27_6: Validate Role Permissions after restoring.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 6: Configure Role Permission.");
        myAssert.assertAll();
    }


    @Test(priority = 7)
    public void test7_CreateTeam() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 7: Create Team.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        //Step 29
        SystemLibrary.logMessage("Step 29-31:"); //Some steps has been tested in Test 4

        //Step 32
        myAssert.assertEquals(GeneralBasic.addTeam("Unassigned", driver), false, "Failed in test Step 32. Team shold not be added as expected .");

        //Step 33: Add Team Anything
        SystemLibrary.logMessage("Step 33: Add Team Anything.");
        GeneralBasic.addTeam("Team Anything", driver);
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(11, 11, driver), true, "Failed in test Step 33");

        //Step 34: Team Anything  listed
        SystemLibrary.logMessage("Step 34: Validate Team Anything listed.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamTable_Main(21, 21, driver), true, "Failed in test Step 34");

        //Step 35: Directory ellipsis validate listed values
        SystemLibrary.logMessage("Step 35: Validate Directory ellipsis menu.");
        myAssert.assertEquals(GeneralBasic.validateEllipsisMenuInTeamDirectory("Leave history report;Leave balances report", driver), true, "Failed in test Step 35");

        //Step 36: Unassigned ellipsis validate listed values.
        SystemLibrary.logMessage("Step 36: Validate Unassigned ellipsis menu.");
        myAssert.assertEquals(GeneralBasic.validateEllipsisMenuInTeamUnassigned("Leave history report;Leave balances report", driver), true, "Failed in test Step 36");

        //Step 36: Team Anything ellipsis validate listed values.
        SystemLibrary.logMessage("Step 36: Validate Team Anything ellipsis menu.");
        myAssert.assertEquals(GeneralBasic.validateEllipsisMenuInTeamPage("Team Anything", "Leave history report;Leave balances report", driver), true, "Failed in test Step 36");

        //Step 37: Teams / Team Anything ellipsis validate listed values.
        SystemLibrary.logMessage("Step 37: Validate Teams / Team Anything ellipsis menu.");
        myAssert.assertEquals(GeneralBasic.validateEllipsisMenuInTeamsTeamTable("Team Anything", "Add a member;Leave history report;Leave balances report;Rename team;Delete team", driver), true, "Failed in test Step 36");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 7: Add Team and Validate Team menus.");
        myAssert.assertAll();

    }


    @Test(priority = 8)
    public void test8_EditTeamsAndMembers() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 8: Teams and Members.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        //Step 38: Rename Team
        SystemLibrary.logMessage("Step 38: Rename Team.");
        myAssert.assertEquals(GeneralBasicHigh.renameTeam_Main(31, 31, driver), true, "Failed in test Step 38, rename team.");

        //Step 39 and 40 : Add Member to the Team
        SystemLibrary.logMessage("Step 39 and 41 : add Member to Team.");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(41, 41, driver), true, "Failed in test Step 39 - 41, add Team Member.");

        //Step 41: Validate Teams Team member Table.
        SystemLibrary.logMessage("Step 41: Validate Teams member Table.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(41, 41, driver), true, "Failed in test Step 41");
        SystemLibrary.logWarning("Email address is changed with serial no as expected.");

        //Step 42: Validate Member Ellipsis menu
        SystemLibrary.logMessage("Step 42: Validate Member Ellipsis menu.");
        GeneralBasic.displayTeamsPage(driver);
        PageObj_Teams.getEllipsis_Teams_21("Team A", "Peter KONG", driver).click();
        Thread.sleep(2000);

        myAssert.assertEquals(GeneralBasic.validateEllipsisMenu("Move to team;Change role;Remove from team", driver), true, "Failed in Step 42: Validate Team Member Elipsis Menu.");

        //Step 43-45: Change Member role
        SystemLibrary.logMessage("Step 43-45: Change member role.");
        GeneralBasicHigh.changeMultiMemberRole_ViaTeamsPage(42, 42, driver);


        //Step 46 : Delete team
        SystemLibrary.logMessage("Step 46 : Delete team.");
        myAssert.assertEquals(GeneralBasicHigh.deleteMultiTeam(45, 45, driver), false, "Failed in Step 46: Team should NOT be deleted as expected.");


        //Step 47 : Member Remove from Team
        SystemLibrary.logMessage("Step 47 : Remove Member from Team.");
        myAssert.assertEquals(GeneralBasicHigh.removeMultiTeamMembers(50, 50, driver), true, "Failed in Step 47: Member should NOT be deleted as expected.");

        //Step 48 : Validate Text in Team Member Page
        SystemLibrary.logMessage("Step 48 : Validate Team Member Table.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(55, 55, driver), true, "Failed in test Step 47: Member Remove from Team as expected.");


        //Step 49 - 50 : Cancel Delete Team
        SystemLibrary.logMessage("Step 49 - 50 : Cancel Delete team.");
        myAssert.assertEquals(GeneralBasicHigh.deleteMultiTeam(60, 60, driver), false, "Failed in Step 49: Team should NOT be deleted as expected.");

        //Step 51 - 54 : Delete team, then add team and team member again.
        SystemLibrary.logMessage("Step 51 - 54 : Delete team, then add team and team member again.");
        GeneralBasicHigh.deleteMultiTeam(65, 65, driver);

        GeneralBasicHigh.addMultiTeam(65, 65, driver);


        GeneralBasicHigh.addTeamMember_Main(65, 65, driver);

        logMessage("Step 54- Step 55: Validate Team and Team Member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(66, 66, driver), true, "Failed in test Step 55: Validate Team Members after Red-Adding.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamTable_Main(67, 67, driver), true, "Failed in test Step 54: Validate Teams after Re-Adding.");

        //Step 56-59: Move to Team
        SystemLibrary.logMessage("Step 56- Step 59: Move member to Team.");
        myAssert.assertEquals(GeneralBasicHigh.moveMemberToTeam_Main(71, 71, driver), true, "Failed in Step 56- Step 59: Move Team member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(72, 72, driver), true, "Failed in Step 59_1: Validate Team Member after move member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(73, 73, driver), true, "Failed in Step 59_2: Validate Team Member after move member.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 8: Teams and Members.");

        myAssert.assertAll();

    }

    @Test(priority = 9)
    public void test9_EditUser() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 9: Edit User Preferred Name and Upload Photo.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 60- Step 61 : search Barry and vailate side Navigation.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(11, 11, driver), true, "Failed in Step 60- Step 61 : search Barry and vailate side Navigation.");

        SystemLibrary.logMessage("Step 62: Add Preferred Name.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(12, 12, driver), true, "Failed in Step 62: Add Preferred Name.");

        //Test this in later stage.
        //SystemLibrary.logMessage("Step 62_2: Upload user photo.");
        //SystemLibrary.logDebug("Upload photo function test is temporarily not available. Script is pending adjustment.");
        //GeneralBasic.signoutESS(driver);
        //driver.close();

        //driver= GeneralBasic.launchESS(3);
        //GeneralBasicHigh.logonESSMain(101,101, driver);

        //myAssert.assertEquals(GeneralBasicHigh.uploadUserPhoto_Main(21, 21, driver), true, "Failed in Step 2: Upload Photo.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 9: Edit User Personal Information.");
        myAssert.assertAll();

    }


    @Test(priority = 10)
    public void test10_AddTeamsAndMembers_0() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10: Add more Teams and Members - 0.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 63- Step 65: Add one Member to Team.");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(81, 81, driver), true, "Failed in Step 63-65:Add One Member to team.");

        SystemLibrary.logMessage("Step 66: Add Multi Teams.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiTeam(91, 101, driver), true, "Failed in Step 66: Add Multi Teams.");

        SystemLibrary.logMessage("Start Step 66: Add multi Members into Muli Teams. ");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(111, 114, driver), true, "Failed in Step 66. Add Members into Team The Boss");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(121, 125, driver), true, "Failed in Step 66. Add Members into Team B");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(131, 134, driver), true, "Failed in Step 66. Add Members into Team C");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10: Add More Teams and Members - 0.");
        myAssert.assertAll();
    }

    @Test(priority = 11)
    public void test11_AddTeamsAndMembers_1() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 11: Add more Teams and Members - 1.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Start Step 66: Add multi Members into Muli Teams. ");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(141, 143, driver), true, "Failed in Step 66. Add Members into Sub D");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(151, 153, driver), true, "Failed in Step 66. Add Members into Sub E");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(161, 163, driver), true, "Failed in Step 66. Add Members into Team F");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 11: Add More Teams and Members - 1.");
        myAssert.assertAll();
    }

    @Test(priority = 12)
    public void test12_AddTeamsAndMembers_2() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 12: Add more Teams and Members - 2.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Start Step 66: Add multi Members into Muli Teams. ");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(171, 174, driver), true, "Failed in Step 66. Add Members into Team G");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(181, 182, driver), true, "Failed in Step 66. Add Members into Team H");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(191, 192, driver), true, "Failed in Step 66. Add Members into Team This Team I");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 12: Add More Teams and Members - 3.");
        myAssert.assertAll();
    }

    @Test(priority = 13)
    public void test13_AddTeamsAndMembers() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 13: Add more Teams and Members - 3.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);


        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(201, 203, driver), true, "Failed in Step 66. Add Members into Team That Team J");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(211, 212, driver), true, "Failed in Step 66. Add Members into Team Another Team K");
        SystemLibrary.logMessage("End of Step 66: Add Multi Members into Multi Teams.");

        SystemLibrary.logMessage("Step 67: Validate Team Table.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamTable_Main(221, 221, driver), true, "Failed in Step 67: Validate Team Table after adding members.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 13: Add More Teams and Members - 3.");
        myAssert.assertAll();
    }

    @Test(priority = 14)
    public void test14_ActivateUsers() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 14: Activate Users.");

        logMessage("Delete all mails.");
        JavaMailLib.deleteAllMail();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 68- Step 69: Check account activation status");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiAccountActivationStatus_ViaAdmin(11, 11, driver), true, "Faield in Step 68: Check Account activation status.");

        SystemLibrary.logMessage("Step 70- Step 82: Activate User and check account activation status again.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(25, 25, testSerialNo, driver), true, "Step 70: Failed change working email.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(12, 12, testSerialNo, driver), true, "Failed in Step 70-84: Activating user.");

        SystemLibrary.logMessage("Restart broswer and log on ESS as  Carmin CUMMINGS.");
        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("Log on ESS as Carmin CUMMINGS");
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        GeneralBasicHigh.logonESSMain(301, 301, testSerialNo, driver);

        GeneralBasic.signoutESS(driver);
        driver.close();


        SystemLibrary.logMessage("Log on ESS as Admin.");
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);


        SystemLibrary.logMessage("Step 83-84: ReValidate account activation status via Admin.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiAccountActivationStatus_ViaAdmin(13, 13, driver), true, "Step 83-84: ReValidate account activation status via Admin..");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 14: Activate Users.");
        myAssert.assertAll();
    }

    @Test(priority = 15)
    public static void test15_ValidateUserDetailsViaAdmin() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 15: Validate User Details via Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 85: Validate User Banner");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(31, 31, driver), true, "Failed in Step 85: Validate User Banner.");

        SystemLibrary.logMessage("Step 86: Validate sidebar menu.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(41, 41, driver), true, "Failed in Step 86: Validate sidebr menu.");

        SystemLibrary.logMessage("Step 87: Edit work mobile number.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(31, 31, testSerialNo, driver), true, "Failed in Step 87: Edit Work mobule number.");

        SystemLibrary.logMessage("Step 88: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(41, 41, driver), true, "Failed in Step 88: Validate Dashboard.");

        SystemLibrary.logMessage("Step 89: Validate Diretory");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(241, 241, driver), true, "Failed in Step 89: Validate Directory.");

        SystemLibrary.logMessage("Step 90: Validete Directory - Leave Tab.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembersLeaveTab_Main(251, 251, driver), true, "Failed in Step 90: Validate Directory - Leave Tab.");

        SystemLibrary.logMessage("Step 91: Check Robin SPACEY's Banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(51, 51, driver), true, "Failed in Step 91: Check Employee's Banner.");

        SystemLibrary.logMessage("Step 92: Check Employee's Side Navigation Menu.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(61, 61, driver), true, "Failed in Step 92: Check Employee's side Navigation Menu.");

        SystemLibrary.logMessage("Step 93: Change Admin Permission for Financial to View");
        GeneralBasicHigh.configPermissionStatus_Main(41, 41, driver);
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(43, 43, driver), true, "Failed in step 93: Change Admin Permission for Financial to View");


        SystemLibrary.logMessage("Step 94: Check Employee's Side Navigation Menu again amd Validate Bank Accounts.");
        SystemLibrary.logMessage("Restart ESS");

        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(71, 71, driver), true, "Failed in Step 94: Check Employee's side Navigation Menu again.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(11, 11, driver), true, "Failed in Step 94: Validate Bank Accounts.");

        SystemLibrary.logMessage("Step 95-96: Validate Superannuation.");
        myAssert.assertEquals(GeneralBasicHigh.validateSuperannuation_Main(11, 11, driver), true, "Failed in Step 95-96: Validate Superannuation.");

        SystemLibrary.logMessage("Step 97-99: Validate Contact Detail and Banner");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(41, 41, driver), true, "Failed in Step 97-99: Validate Contact Detail.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(81, 81, driver), true, "Failed in Step 97-99: Validate Banner.");

        SystemLibrary.logMessage("Step 100: Validate Leave detail.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(31, 31, driver), true, "Failed in Step 100: Validate Leave detail.");

        SystemLibrary.logMessage("Step 101 - 102: Validate Contact Details");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(51, 51, driver), true, "Failed in Step 101 - 102: Validate Contact Details");

        SystemLibrary.logMessage("Step 103: Validate User Banner");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(91, 91, driver), true, "Failed in Step 103: Validate User Banner.");

        SystemLibrary.logMessage("Step 104 - 108: Validate Contact Details.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(61, 65, driver), true, "Failed in Step 104 - 108: Validate Contact Details.");

        SystemLibrary.logMessage("Step 109: Validate Personal Information.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(101, 101, driver), true, "Failed in Step 109: Validate Personal Information.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 15: Validate User Details via Admin.");
        myAssert.assertAll();

    }


    @Test(priority = 16)
    public static void test16_EditAndValidateUserDetailsViaAdmin() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 16: Edit and validate user Details via Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 110: Validate User sidear menu.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(111, 111, driver), true, "Failed in Step 110: Validate User sidear menu.");

        SystemLibrary.logMessage("Step 111: Change Roles and Permissions - Employment to View.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(51, 51, driver), true, "Failed in Step 111: Change Roles and Permissions - Employment to View.");

        SystemLibrary.logMessage("Restart ESS");
        GeneralBasic.signoutESS(driver);
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 112: Validate user side Navigation Menu.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(121, 121, driver), true, "Failed in Step 111: Change Roles and Permissions - Employment to View.");

        SystemLibrary.logMessage("Step 112 - Step 114: Validate user Empoyment Information.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(11, 13, driver), true, "Failed in Step 112 - Step 114: Validate user Empoyment Information.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 16: Edit and validate user Details via Admin.");
        myAssert.assertAll();

    }

    @Test(priority = 17)
    public static void test17_ValidateUserDetail_ViaAdmin2() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 17: Validate user Anthony BROWN's Details via Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 115: Validate Banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(131, 131, driver), true, "Failed in Step 115: Validate Banner.");

        SystemLibrary.logMessage("Step 115: Validate Personal Information.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(132, 132, driver), true, "Failed in Step 115: Validate Personal Information.");

        SystemLibrary.logMessage("Step 116: Validate Contract Details.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(71, 71, driver), true, "Failed in Step 116: Validate Contract Details.");

        SystemLibrary.logMessage("Step 117 - Step 119: Validate Employment Details.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(21, 21, driver), true, "Failed in Step 117 - Step 119: Validate User Employment Details.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 17: Validate user Anthony BROWN's Details via Admin.");
        myAssert.assertAll();
    }

    @Test(priority = 18)
    public static void test18_ChangeAndApporveUserPersonalDetail_ViaAdmin3() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 18: Validate user Details via Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 120 - 121: Validate user Banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(141, 141, driver), true, "Failed in Step 120 - 121: Validate user Banner.");

        SystemLibrary.logMessage("Step 122: Remove User Preferred name.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(151, 151, driver), true, "Failed in Step 122: Remove User Preferred name.");

        SystemLibrary.logMessage("Step 124 : validate Approval Details screen");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(5, 5, driver), true, "Failed in Step 124: Validate My Approvals Page in Step 124.");

        SystemLibrary.logMessage("Step 125 : validate Other Approval Details screen");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(11, 11, driver), true, "Failed in Step 125: validate Other Approval Details screen Step 125.");

        SystemLibrary.logMessage("Step 126 - Step 127: Approve the pending item and Re-Validate Other Approval page.");
        GeneralBasic.approveAllOtherApproval_ViaAdmin(driver);
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(15, 15, driver), true, "Failed in Step 126: Approve the pending item and Re-Validate Other Approval page.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 18: Validate user Details via Admin.");
        myAssert.assertAll();
    }


    @Test(priority = 19)
    public static void test19_ActivatUserAndResetPassword() throws Exception {

        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 19: Activating users, checking emails, Reset password.");

        JavaMailLib.deleteAllMail();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        ///////////////////////

        SystemLibrary.logMessage("Step 129: Check account activation status");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiAccountActivationStatus_ViaAdmin(31, 31, driver), true, "Faield in Step 128: Check Account activation status.");

        SystemLibrary.logMessage("Step 130: Active user account should fail as expected.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(32, 32, testSerialNo, driver), false, "Failed in Step 130: Activating user should fail as expected.");

        SystemLibrary.logMessage("Step 131: Edit user working email only");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(81, 81, testSerialNo, driver), true, "Failed in step 131: Edit user Contact Detail. Missing phone number item is allowed from version on 03072018.");

        SystemLibrary.logMessage("Step 132 - Step 133: Edit user phone number");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(82, 83, testSerialNo, driver), true, "Failed in step 132 - Step 133: Edit user Contact Detail - Work Email.");

        SystemLibrary.logMessage("Step 134: Active user account should fail again as expected.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(32, 32, testSerialNo, driver), false, "Failed in Step 134: Activating user should fail again as expected.");
        logMessage("Failed activated user as expected.");

        SystemLibrary.logMessage("Step 135 : validate Other Approval Details screen");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(21, 21, driver), true, "Failed in Step 135: validate Other Approval Details screen.");

        SystemLibrary.logMessage("Step 137: Apporve changes of Contact Details.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(85, 85, testSerialNo, driver), true, "Failed in Step 137: Apporve changes of Contact Details.");

        ////////////// Restart ESS  /////////////
        SystemLibrary.logMessage("Restaring ESS");
        GeneralBasic.signoutESS(driver);
        driver.close();

        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);
        //////

        SystemLibrary.logMessage("Step 138 - Step 146: ReActive user account.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(41, 41, testSerialNo, driver), true, "Failed in Step 138 - Step 146: ReActive user account.");

        SystemLibrary.logMessage("Step 145: Log on user using incorrect password.");
        GeneralBasic.signoutESS(driver);
        driver.close();

        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(311, 311, testSerialNo, driver), false, "Failed in Step 145: User should not log on ESS as expected.");
        driver.close();
        SystemLibrary.logMessage("User failed logon ESS as expected.");

        SystemLibrary.logMessage("*** End of Test 19 - Step 146 : Activating users, checking emails, Reset password.");
        myAssert.assertAll();

    }

    @Test(priority = 20)
    public static void test20_DownloadAndValidatePayAdvice() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 20: Download and Validate Pay Advice.");
        SoftAssert myAssert = new SoftAssert();

        SystemLibrary.logMessage("Step 146: Log on user Pansy and Validate Dashbarod.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(312, 312, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(51, 51, driver), true, "Failed in Step 147: Download Pay Advice.");

        SystemLibrary.logMessage("Step 147: Download and validate Pay Advice.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiPayAdviceReport_ViaDashboard(21, 21, driver), true, "Step 147: Download and Validate Pay Advice.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 20: Download and Validate Pay Advice.");

        myAssert.assertAll();
    }

    @Test(priority = 21)
    public static void test21_ActivateUser() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 21: Activating users.");

        JavaMailLib.deleteAllMail();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 148: Validate Team G members.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(261, 261, driver), true, "Failed in Step 148: Validate Team G members.");

        SystemLibrary.logMessage("Step 149: Activate user GREGG.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(51, 51, testSerialNo, driver), true, "Failed in Step 149: Activate user GREGG.");

        SystemLibrary.logMessage("Step 151: Validate GREGG account status.");
        GeneralBasic.signoutESS(driver);
        driver.close();

        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        myAssert.assertEquals(GeneralBasicHigh.validateMultiAccountActivationStatus_ViaAdmin(51, 51, driver), true, "Failed in Step 151: Validate GREGG account status.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 21: Activating users.");
        myAssert.assertAll();
    }

    @Test(priority = 22)
    public static void test22_AddAndValidateTeamMember() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 22: Add and Validate Team Member.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 152: Add and Validate Team Member.");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(271, 271, driver), true, "Failed in Step 152: Add a Team Member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(271, 271, driver), true, "Failed in Step 152: Validate Team Member.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 22: Add and Validate Team Member.");
        myAssert.assertAll();
    }


    @Test(priority = 23)
    public static void test23_ResetPassword() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 23: Reset Password.");

        JavaMailLib.deleteAllMail();
        SystemLibrary.logMessage("Step 159 - Step 162: Reset Password");
        myAssert.assertEquals(GeneralBasicHigh.forgetPassword_Main(61, 61, testSerialNo), true, "Failed in Step 159 - Step 162: Reset Password");

        SystemLibrary.logMessage("*** End of Test 23: Reset password.");
        myAssert.assertAll();
    }

    @Test(priority = 24)
    public static void test24_ValidateUserPersonalInformation() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 24: Log on Normala User and Validating users Detail.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        SystemLibrary.logMessage("Log on as Carmin.");
        GeneralBasicHigh.logonESSMain(321, 321, testSerialNo, driver);

        SystemLibrary.logMessage("Step 163: Validate dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(71, 71, driver), true, "Failed in Step 163: Validate dashboard.");

        SystemLibrary.logMessage("Step 164: Validate business card.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiUserBusinessCard(81, 81, driver), true, "Failed in Step 163: Validate Business Card.");
        SystemLibrary.logMessage("Step 165: Display and Validate User Profile via User name icon");
        GeneralBasic.displayPersonalInformationPage_ViaNavigationBarNameIcon(driver, "Carmin");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(161, 161, driver), true, "Failed in Step 165: Display and Validate User Profile via User name icon");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 24: Log on Normala User and Validating users Detail.");

        myAssert.assertAll();
    }


    @Test(priority = 25)
    public static void test25_ResetPassword() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 25: Reset Password for CUMMINGS.");
        JavaMailLib.deleteAllMail();

        SystemLibrary.logMessage("Step 165 - Step 172: Reset Password for CUMMINGS.");
        myAssert.assertEquals(GeneralBasicHigh.forgetPassword_Main(71, 71,testSerialNo), true, "Failed in Step 165 - Step 172: Reset Password");

        SystemLibrary.logMessage("*** End of Test 25: Reset Password for CUMMINGS.");
        myAssert.assertAll();
    }

    @Test(priority = 26)
    public static void test26_DisableUserAccount() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 26: Disable a User Account.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 172 - Step 174: Disable a User Account. ");
        myAssert.assertEquals(GeneralBasicHigh.disableMultiUserAccount(81, 81, driver), true, "Failed in Step 172 - Step 174: Disable a User Account. ");

        GeneralBasic.signoutESS(driver);
        driver.close();

        /////////////////////////////

        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Log on as Pansy with account disabled..");
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(331, 331, testSerialNo, driver), false, "Failed in Step 174: Pany should not log on as it is disabled as expected.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 26: Disable a User Accound.");
        myAssert.assertAll();
    }

    @Test(priority = 27)
    public static void test27_ActivateAllUsers() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 27: Activate Multi Users.");

        JavaMailLib.deleteAllMail();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 175 - 1: Activate User Mitchell SMART.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(101, 101, testSerialNo,  driver), true, "Failed in Step 175 - 1: Activate User Mitchell SMART.");

        SystemLibrary.logMessage("Step 175 - 2: Activate User Robert SINGLETON.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(102, 102, testSerialNo, driver), true, "Failed in Step 175 - 2: Activate User Robert SINGLETON.");

        SystemLibrary.logMessage("Step 175 - 3: Activate User Jack FINGLE.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(103, 103, testSerialNo, driver), true, "Failed in Step 175 - 3: Activate User Jack FINGLE.");

        SystemLibrary.logMessage("Step 175 - 4: Activate User Sue APPLEBY.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(104, 104, testSerialNo, driver), true, "Failed in Step 175 - 4: Activate User Sue APPLEBY.");

        SystemLibrary.logMessage("Step 175 - 5: Activate User Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(105, 105, testSerialNo, driver), true, "Failed in Step 175 - 5: Activate User Phantom FRY.");

        SystemLibrary.logMessage("Step 175 - 6: Activate User Christine RAMPLING.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(106, 106, testSerialNo, driver), true, "Failed in Step 175 - 6: Activate User Christine RAMPLING.");

        SystemLibrary.logMessage("Step 175 - 7: Activate User Jennifer HOWE.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(107, 107, testSerialNo, driver), true, "Failed in Step 175 - 7: Activate User Jennifer HOWE.");

        ///////////////////////
        SystemLibrary.logMessage("Restarting ESS after step 175....");
        GeneralBasic.signoutESS(driver);
        driver.close();

        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);
        SystemLibrary.logMessage("End of Restarting ESS after Step 175.");
        ////

        SystemLibrary.logMessage("Step 175 - 8: Activate User Ryan MAIN.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(108, 108, testSerialNo, driver), true, "Failed in Step 175 - 8: Activate User Ryan MAIN.");

        SystemLibrary.logMessage("Step 175 - 9: Activate User Ernie MANNING.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(109, 109, testSerialNo, driver), true, "Failed in Step 175 - 9: Activate User Ernie MANNING.");

        SystemLibrary.logMessage("Step 175 - 10: Activate User Tanya DOWNS.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(110, 110, testSerialNo, driver), true, "Failed in Step 175 - 10: Activate User Tanya DOWNS.");

        SystemLibrary.logMessage("Step 175 - 11: Activate User Stanley BROWN.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(111, 111, testSerialNo, driver), true, "Failed in Step 175 - 11: Activate User Stanley BROWN.");

        SystemLibrary.logMessage("Step 175 - 12: Activate User Sharon ANDREWS.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(112, 112, testSerialNo, driver), true, "Failed in Step 175 - 12: Activate User Sharon ANDREWS.");


        SystemLibrary.logMessage("Step 175 - 13: Activate User Gregory SMITH.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(113, 113, testSerialNo, driver), true, "Failed in Step 175 - 13: Activate User Gregory SMITH.");

        SystemLibrary.logMessage("Step 175 - 14: Activate User Young LONG.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(114, 114, testSerialNo, driver), true, "Failed in Step 175 - 14: Activate User Young LONG.");

        SystemLibrary.logMessage("Step 175 - Step 180: Activate User Ace HARRY.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(121, 121, testSerialNo, driver), true, "Failed in Step 175 - 14: Activate User Young LONG.");

        ////////////////////
        SystemLibrary.logMessage("Restarting ESS.");
        GeneralBasic.signoutESS(driver);
        driver.close();

        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 181: Validate Activation Report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(31, 31, driver), true, "Failed in Step 181: Validate Activation Report.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 27: Activate Multi Users..");
        myAssert.assertAll();
    }

    @Test(priority = 28)
    public static void test28_EditAndValidateLeaveSettings() throws InterruptedException, SQLException, IOException, ClassNotFoundException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 28: Edit and Validate Leave Settings.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 182: Validate Annual Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(11, 11, driver), true, "Failed in Step 182: Validate Annual Leave Settings.");

        SystemLibrary.logMessage("Step 182: Validate Long Service Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(12, 12, driver), true, "Failed in Step 182: Validate Long Service Leave Settings.");

        SystemLibrary.logMessage("Step 182: Validate Other Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(13, 13, driver), true, "Failed in Step 182: Validate Other Leave Settings.");

        SystemLibrary.logMessage("Step 182: Validate Personal Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(14, 14, driver), true, "Failed in Step 182: Validate Personal Leave Settings.");

        SystemLibrary.logMessage("Step 182: Validate Time In Lieu #2 Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(15, 15, driver), true, "Failed in Step 182: Validate Time In Lieu #2 Settings.");

        SystemLibrary.logMessage("Step 182: Validate Time In Lieu #1 Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(16, 16, driver), true, "Failed in Step 182: Validate Time In Liue Settings.");


        SystemLibrary.logMessage("Step 183 - Step 184: Edit Annual Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.editSettingsLeave_Main(21, 21, driver), true, "Failed in Step 183 - Step 184 : Edit Leave Settings.");

        SystemLibrary.logMessage("Step 186: Edit Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.editSettingsLeave_Main(22, 22, driver), true, "Failed in Step 183 - Step 184 : Edit Leave Settings.");

        SystemLibrary.logMessage("Step 187: Edit Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.editSettingsLeave_Main(23, 23, driver), true, "Failed in Step 183 - Step 184 : Edit Leave Settings.");

        SystemLibrary.logMessage("Step 187: Validate Edit Leave Settings Form.");
        myAssert.assertEquals(GeneralBasicHigh.validateEditLeaveFormInLeaveSettingPage_Main(31, 31, driver), true, "Failed in Step 187: Validate Edit Leave Settings Form.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 28: Edit and Validate Leave Settings.");
        myAssert.assertAll();

    }

    @Test(priority = 29)
    public static void test29_DownloadAndValidateLeaveBalanceReport() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 29: Donwload and Validate Leave Balances Report.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 188: Download and validate Leave Balance Report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiLeaveBalancesReport(41, 41, driver), true, "Failed in Step 188: Download and validate Leave Balance Report.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 29: Download and Validate Leave Balances Report.");
        myAssert.assertAll();
    }

    @Test(priority = 30)
    public static void test30_ValidateLeave() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 30: Validate Leave.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Log on as Sharson ANDREWS.");
        GeneralBasicHigh.logonESSMain(341, 341, testSerialNo, driver);

        SystemLibrary.logMessage("Step 189: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(91, 91, driver), true, "Failed in Step 189: Validate Dashboard.");

        SystemLibrary.logMessage("Step 190: Validate Leave Balance via dashboard.");
        GeneralBasic.displayDashboard(driver);
        driver.findElement(By.xpath("//a[@class='link'][contains(text(),'View more')]")).click();
        SystemLibrary.logMessage("View more button is clicked.");
        GeneralBasic.waitSpinnerDisappear(60, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(32, 32, driver), true, "Failed in Step 190: Validate Leave Balance via Dashboard.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 30: Validate Leave.");
        myAssert.assertAll();
    }

    @Test(priority = 31)
    public static void test31_ApplyLeave() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 31: Apply Leave.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Log on as Sharson ANDREWS.");
        GeneralBasicHigh.logonESSMain(341, 341, testSerialNo, driver);

        SystemLibrary.logMessage("Step 192 - Step 194: Validate Leave Hours and Days.");
        GeneralBasic.displayLeavePage(driver);
        myAssert.assertEquals(GeneralBasicHigh.editMultiLeave(51, 51, driver), true, "Failed in Step 192: Edit Leave Hours and Days.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(51, 51, driver), true, "Failed in Step 194: Validate Apply Leave Form.");

        SystemLibrary.logMessage("Step 195 - Step 197: Validate Leave Hours and Days.");
        GeneralBasic.displayLeavePage(driver);
        myAssert.assertEquals(GeneralBasicHigh.editMultiLeave(61, 61, driver), true, "Failed in Step 195: Edit Leave Hours and Days.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(61, 61, driver), true, "Failed in Step 195: Validate Apply Leave Form.");

        SystemLibrary.logMessage("Step 197: Apply for Leave.");
        GeneralBasic.displayLeavePage(driver);
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeaveViaLeavePage_OLD(71, 71, driver), true, "Failed in Step 197: Apply for leave.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 31: Apply Leave.");
        myAssert.assertAll();
    }


    @Test(priority = 32)
    public static void test32_AddUserMedicalConditions() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 32.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(341, 341, testSerialNo, driver);

        SystemLibrary.logMessage("Step 201: Add User Medical Condition");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(171, 171, driver), true, "Failed in Step 201: Add User Medical Condition.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 32.");
        myAssert.assertAll();

    }

    @Test(priority = 33)
    public static void test33_ChangeAndValidateUserProfile() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 33.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(341, 341, testSerialNo, driver);

        SystemLibrary.logMessage("Step 202: Check the Contact, Account Settings and Teams and Roles Details Screen");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(91, 91, driver), true, "Failed in Step 202: vailate member Contact Details details Step 202.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(131, 131, driver), true, "Failed in Step 202: vailate Account Settings Details Step 202.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(11, 11, driver), true, "Failed in Step 202: vailate Teams and Roles Details Step 202.");

        logMessage("Step 202: Vailate Approval Process, Teams and Roles Details Step 202.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(22, 22, driver), true, "Failed in Step 202: Vailate Approval Process, Teams and Roles Details Step 202.");

        SystemLibrary.logMessage("Step 203: Validate Team B via Teams & Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamMembers_ViaTeamsRolesDetailsPage_Main(31, 31, driver), true, "Failed in Step 203: Validate Team B via Teams & Roles page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 33.");
        myAssert.assertAll();

    }


    @Test(priority = 34)
    public static void test34_ApproveChanges() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 34: Approve Changes..");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 206: Validate email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(11, 11, testSerialNo), true, "Failed in Step 206: Validate email content.");
        JavaMailLib.deleteAllMail();

        SystemLibrary.logMessage("Step 208: Decline Medical Condition changes via Admin.");
        GeneralBasic.displayMyApprovalsPage_ViaNavigationBar(driver);
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(11, 11, driver), true, "Failed in Step 208: Decline Medical Condition changes via Admin.");

        SystemLibrary.logMessage("Step 209: Approve the leave via Admin.");
        GeneralBasic.displayMyApprovalsPage_ViaNavigationBar(driver);
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(21, 21, driver), true, "Failed in Step 209: Approve the leave via Admin.");

        SystemLibrary.logMessage("Step 211: Validate email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(21, 21, testSerialNo), true, "Failed in Step 211: Validate email content.");

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail();

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 34: Approve changes.");
        myAssert.assertAll();
    }

    @Test(priority = 35)
    public static void test35_ValidateDefaultWorkFlows() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 35: Validate Default Workflows.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 212: Validate Workflows page.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(11, 11, driver), true, "Failed in Step 212: Validate Workflows page.");

        SystemLibrary.logMessage("Step 213: Validate Workflows Profile page.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(21, 21, driver), true, "Failed in Step 213: Validate Workflows Profile page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 35: Validate Defult Workflows.");
        myAssert.assertAll();
    }


    @Test(priority = 36)
    public static void test36_EditWorkFlows_Profile() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 36: Edit Workflows  - Profile change..");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 214: Edit Workflows.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(31, 31, driver), true, "Failed in Step 214: Edit Workflows.");

        SystemLibrary.logMessage("Step 215: Add an Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(41, 41, driver), true, "Failed in Step 215: Add an Exception.");

        SystemLibrary.logMessage("Step 216: Add another Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(51, 51, driver), true, "Failed in Step 216: Add another Exception.");

        SystemLibrary.logMessage("Step 217: Validate Workflow after changes.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(61, 61, driver), true, "Failed in Step 217: Validate Workflow after changes.");

        SystemLibrary.logMessage("Step 218 - 220: Edit Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(71, 71, driver), true, "Failed in Step 218 - 1: Edit Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(72, 72, driver), true, "Failed in Step 218 - 2: Edit Exception.");

        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(81, 81, driver), true, "Failed in Step 219: Add Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(82, 82, driver), true, "Failed in Step 220: Add Exception.");

        SystemLibrary.logMessage("Step 221: Validate Work flow page after changes.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(91, 91, driver), true, "Failed in Step Step 221: Validate Work flow page after changes.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 36: Edit Workflows - Profile Change.");
        myAssert.assertAll();
    }

    @Test(priority = 37)
    public static void test37_EditWorkFlows_Leave() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 37: Edit Workflows - Leave.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 223: Validate Workflow - Leave 1.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(101, 101, driver), true, "Failed in Step 223: Validate Workflow - Leave 1.");

        SystemLibrary.logMessage("Step 224 - Step 226: Add Leave Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(111, 111, driver), true, "Failed in Step 224 - Step 226: Add Leave Exception.");
        SystemLibrary.logMessage("Step 227: Add Another Leave Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(121, 121, driver), true, "Failed in Step 227: Add Another Leave Exception.");

        SystemLibrary.logMessage("Step 228: Validate Workflow - Leave 2.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(131, 131, driver), true, "Failed in Step 228: Validate Workflow - Leave 2.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 37: Edit Workflows - Leave.");
        myAssert.assertAll();
    }

    @Test(priority = 38)
    public static void test38_MoveTeamAndValidateTeamsRoles() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 38.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 229 - Step 234: Move Team Member.");
        myAssert.assertEquals(GeneralBasicHigh.moveMemberToTeam_Main(301, 301, driver), true, "Failed in Step 229 - Step 234: Move Team Member.");

        SystemLibrary.logMessage("Step 235: Validate user Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(41, 41, driver), true, "Failed in Step 235: Validate user Teams and Roles page.");


        SystemLibrary.logMessage("Step 236: Validate Approval Process");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(51, 51, driver), true, "Step 236: Validate Approval Process");

        SystemLibrary.logMessage("Step 237: Validate user Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(61, 61, driver), true, "Failed in Step 237: Validate user Teams and Roles page.");

        SystemLibrary.logMessage("Step 238: Validate Approval Process");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(71, 71, driver), true, "Step 238: Validate Approval Process");


        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 38.");
        myAssert.assertAll();
    }

    @Test(priority = 39)
    public static void test39_ChangeUserProfileAndValidateApproval() throws Exception {
        SystemLibrary.logMessage("*** Start Test 39.");
        logMessage("Validate all old email.");
        JavaMailLib.deleteAllMail();

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Step 239: Log in as APPLEBY-SMITH");
        GeneralBasicHigh.logonESSMain(351, 351, testSerialNo, driver);

        SystemLibrary.logMessage("Step 239: Validate user dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(101, 101, driver), true, "Failed in Step 239: Validate user dashboard.");

        SystemLibrary.logMessage("Step 240 : Validate the Bank Accounts Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(21, 21, driver), true, "Failed in Step 240: Validate the Bank Accounts page.");

        SystemLibrary.logMessage("Step 241 - Step 243: Add Bank Account.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiBankAccount(31, 31, driver), false, "Failed in Step 241: Add Bank Account.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiBankAccount(32, 32, driver), false, "Failed in Step 242: Add Bank Account.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiBankAccount(33, 33, driver), false, "Failed in Step 243: Add Bank Account.");

        SystemLibrary.logMessage("Step 244: Add Bank Account.");
        //myAssert.assertEquals(GeneralBasicHigh.addMultiBankAccount(41, 41, driver), false, "Failed in Step 244 - 1: Add Bank Account.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiBankAccount(42, 42, driver), true, "Failed in Step 244 - 2: Add Bank Account.");

        SystemLibrary.logMessage("Step 246: Add an invalid email.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(101, 101, testSerialNo, driver), false, "Failed in Step 246: Add an invalid email.");

        SystemLibrary.logMessage("Step 247: Add an valid email.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(111, 111, testSerialNo, driver), true, "Failed in Step 247: Add an valid email.");

        SystemLibrary.logMessage("Step 248: Validate email with profile change.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(31, 31, testSerialNo), true, "Failed in Step 248: Validate email with profile chane.");

        SystemLibrary.logMessage("Step 249: Validate Approverls email with profile change.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(41, 41, testSerialNo), false, "Failed in Step 249: Validate Approverls email with profile change.");
        logWarning("No email is as expected. Known issue. Pending change. ");

        ////////////////////////
        SystemLibrary.logMessage("Restart ESS and log on as Admin");
        GeneralBasic.signoutESS(driver);
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        SystemLibrary.logMessage("Step 250: Validate Other Approverls via Admin.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(41, 41, driver), true, "Failed in Step 250: Validate Other Approverls via Admin.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 39.");
        myAssert.assertAll();
    }

    @Test(priority = 40)
    public static void test40_EditBankAccount() throws Exception {
        SystemLibrary.logMessage("*** Start Test 40.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old eamils.");
        JavaMailLib.deleteAllMail();

        SystemLibrary.logMessage("Step 252: Validate dashboard.");
        GeneralBasicHigh.logonESSMain(361, 361, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(111, 111, driver), true, "Failed in Step 252: Validate dashboard.");


        SystemLibrary.logMessage("Step 255: Validate All Team Members.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(311, 311, driver), true, "Failed in Step 255: Validate All Team Members.");

        SystemLibrary.logMessage("Step 256 : Validate Personal Information page..");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(191, 191, driver), true, "Failed in Step 256: Validate Personal Info.");

        //Step 257 : Validate member Bank Account Via All Team Members
        SystemLibrary.logMessage("Step 257 : Validate Bank Account.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(51, 51, driver), true, "Step 257 : Validate Bank Account.");

        SystemLibrary.logMessage("Step 258 - Step 259: Change order of Bank Account. ");
        myAssert.assertEquals(GeneralBasicHigh.changeOrderOfBankAccount_Main(61, 61, driver), true, "Step 258 - Step 259: Change order of Bank Account. ");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(71, 71, driver), true, "Failed in Step 259: Validate Bank account order.");

        SystemLibrary.logMessage("Step 260: Validate Approver's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(51, 51, testSerialNo), false, "Failed in Step 260: Validate Approver's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(52, 52, testSerialNo), false, "Failed in Step 260: Validate User's email.");
        logWarning("No email is expected. Known issue. Pending fix.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 40.");
        myAssert.assertAll();


    }


    @Test(priority = 41)
    public static void test41_EditContactDetailAndValdiateApproval() throws Exception {
        SystemLibrary.logMessage("*** Start Test 41.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete All old Emails.");
        JavaMailLib.deleteAllMail();

        SystemLibrary.logMessage("Step 262: Log on as Jack FINGLE");
        GeneralBasicHigh.logonESSMain(371, 371, testSerialNo, driver);

        SystemLibrary.logMessage("Step 263: Edit Middle Name.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(201, 201, driver), true, "Failed in Step 263: Edit Middle Name.");

        SystemLibrary.logMessage("Step 264 - Step 265: Edit Contact Detail - Address and Emergency Contact.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(121, 121, testSerialNo, driver), true, "Failed in Step 264: Edit Contact Detail - Address .");

        SystemLibrary.logMessage("Step 266 - Step 268: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(61, 61, testSerialNo), true, "Failed in Step 266: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(62, 62, testSerialNo), false, "Failed in Step 267: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(63, 63, testSerialNo), false, "Failed in Step 268: Validate email.");
        logWarning("No email in Step 267 and 268. Known issue. Pending fix.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 41.");
        myAssert.assertAll();


    }

    @Test(priority = 42)
    public static void test42_EditMaritialStatus() throws Exception {
        SystemLibrary.logMessage("*** Start Test 42.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail();

        logMessage("Step 269: Log on as Carming CUMMINGS.");
        GeneralBasicHigh.logonESSMain(381, 381, testSerialNo, driver);

        SystemLibrary.logMessage("Step 270: Validate All Team Members.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(321, 321, driver), true, "Failed in Step 270: Validate All Team Members.");

        SystemLibrary.logMessage("Step 271: Edit Marital Stataus.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(211, 211, driver), true, "Failed in Step 271: Edit Marital Status.");

        SystemLibrary.logMessage("Step 272: Validate email.");
        logMessage("Wait 0.5 mins for email sending through... ");
        Thread.sleep(30000);
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(71, 71, testSerialNo), true, "Failed in Step 272: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(72, 72, testSerialNo), true, "Failed in Step 273: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(73, 73, testSerialNo), true, "Failed in Step 274: Validate email.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 42.");
        myAssert.assertAll();

    }

    @Test(priority = 43)
    public static void test43_EditContactDetail_PhoneNumber() throws Exception {
        SystemLibrary.logMessage("*** Start Test 43.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail();

        logMessage("Step 275: Log on as Young LONG.");
        GeneralBasicHigh.logonESSMain(391, 391, testSerialNo, driver);

        logMessage("Step 276 - Step 277: Change Contact Detail Home and office mumber.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(131, 131, testSerialNo, driver), true, "Failed in Step 276 - Step 277: Change Contact Detail Home mumber.");

        SystemLibrary.logMessage("Step 278: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(81, 81, testSerialNo), true, "Failed in Step 278: Validate email.");
        SystemLibrary.logMessage("Step 279: Validate Johnathon FINGLE's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(82, 82, testSerialNo), false, "Failed in Step 279: Validate Johnathon FINGLE's email.");
        SystemLibrary.logMessage("Step 280: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(83, 83, testSerialNo), false, "Failed in Step 280: Validate email.");
        SystemLibrary.logMessage("Step 281: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(84, 84, testSerialNo), false, "Failed in Step 281: Validate email.");
        logMessage("No eamil for Phantom FRY is expected.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 43.");
        myAssert.assertAll();
    }


    @Test(priority = 44)
    public static void test44_EditPostalAddress() throws Exception {
        SystemLibrary.logMessage("*** Start Test 44.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail();

        logMessage("Step 282: Log on as Mitchell SMART and Validate Dashboard..");
        GeneralBasicHigh.logonESSMain(401, 401, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(121, 121, driver), true, "Failed in Step 282: Validate dashboard.");


        logMessage("Step 283 - Step 284: Change Contact Detail Postal Address.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(141, 141, testSerialNo, driver), true, "Failed in Step 283 - Step 284: Change Contact Detail Postal Address.");

        SystemLibrary.logMessage("Step 285 - Step 286: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(91, 91, testSerialNo), true, "Failed in Step 285: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(92, 92, testSerialNo), false, "Failed in Step 286: Validate email.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 44.");
        myAssert.assertAll();
    }

    @Test(priority = 45)
    public static void test45_EditEmgergencyContact() throws Exception {
        SystemLibrary.logMessage("*** Start Test 45.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail();

        logMessage("Step 287: Log on as Ernie MANNING and Validate Dashboard..");
        GeneralBasicHigh.logonESSMain(411, 411, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(131, 131, driver), true, "Failed in Step 287: Validate dashboard.");

        logMessage("Step 288: Change Contact Detail - Emergeny Contact.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(151, 151, testSerialNo, driver), true, "Failed in Step 288: Change Contact Detail - Emergeny Contact.");

        logMessage("Step 288: Validate User Contact Detail page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(10, 10, driver), true, "Failed in Step 288: Validate User Contact Detail page.");

        SystemLibrary.logMessage("Step 289 - Step 290: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(101, 101, testSerialNo), true, "Failed in Step 289: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(102, 102, testSerialNo), true, "Failed in Step 290: Validate email.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 45.");
        myAssert.assertAll();
    }

    @Test(priority = 46)
    public static void test46_ValidateApprovalItems() throws Exception {
        SystemLibrary.logMessage("*** Start Test 45.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 291: Logon as Administrator and Validate Dashboard..");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(141, 141, driver), true, "Failed in Step 291: Logon as Administrator and Validate Dashboard..");

        logMessage("Step 292: Validate Workflow - Profile Change. ");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(141, 141, driver), true, "Failed in Step 292: Validate Workflow - Profile Change. ");

        logMessage("Step 293: Validate My Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(1041, 1041, driver), true, "Failed in Step 293: Validate my Approval.");

        logMessage("Step 294: Validate Other Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1042, 1042, driver), true, "Failed in Step 294: Validate Other Approval.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 46.");
        myAssert.assertAll();


    }

    @Test(priority = 47)
    public static void test47_ApprovaItems_ViaAdmin() throws Exception {
        SystemLibrary.logMessage("*** Start Test 47.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail();

        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 295: Approve Item.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(31, 31, driver), false, "Failed in Step 295: Approve Item.");
        logMessage("Step 295: Validate Item after approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1051, 1051, driver), false, "Failed in Step 295: Validate Item after approval.");
        logMessage("Young LONG has Personal Contacts changes is NOT SHOWN as expected.");

        logMessage("Step 296: Validating email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(111, 111, testSerialNo), false, "Failed in Step 296: Validate email.");
        logMessage("Step 297: Validating email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(112, 112, testSerialNo), false, "Failed in Step 297: Validate email.");
        logMessage("Step 298: Validating email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(113, 113, testSerialNo), false, "Failed in Step 298: Validate email.");
        logMessage(" No email found is as expected for step 296, step 297, step 298.");


        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 47.");
        myAssert.assertAll();

    }


    @Test(priority = 48)
    public static void test48_ValidateApprovaItems() throws Exception {
        SystemLibrary.logMessage("*** Start Test 48.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Step 299: Log on as Mitchell SMART and Validate Dashboard.");
        GeneralBasicHigh.logonESSMain(421, 421, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(151, 151, driver), true, "Failed in Step 299: Validate Dashboard.");

        SystemLibrary.logMessage("Step 300: Validate My Approval - Profile Change via Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovals_ProfileChange_ViaDashboard_NonAdmin(101, 101, driver), true, "Faield in Step 300: Validate My Approval via Dashboard.");

        SystemLibrary.logMessage("Step 301: Validate Emergency Contact via Dashboard Profile Change.");
        GeneralBasic.displayDashboard(driver);
        PageObj_Dashboard.panel_PendingProfileApprovals(driver).click();

        WebElement element = PageObj_Approvals.getApprovalLink_Main(41, 41, driver);
        if (element != null) {
            element.click();
            Thread.sleep(6000);
            GeneralBasic.waitSpinnerDisappear(120, driver);
            myAssert.assertEquals(SystemLibraryHigh.validateTextInElement_Main(21, 21, PageObj_ContactDetail.table_ContactDetailsAll(driver)), true, "Faield in Step 301: Validate Emergency Contact via Dashboard Profile Change.");
        } else {
            myAssert.fail("Faield in Step 301: Validate Emergency Contact via Dashboard Profile Change.");
        }

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 48.");
        myAssert.assertAll();

    }

    @Test(priority = 49)
    public static void test49_ApprovaItems() throws Exception {
        SystemLibrary.logMessage("*** Start Test 49.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail();

        SystemLibrary.logMessage("Log on as Mitchell SMART.");
        GeneralBasicHigh.logonESSMain(421, 421, testSerialNo, driver);

        SystemLibrary.logMessage("Step 302 - Step 303: Approve Pending Item");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(51, 51, driver), true, "Faield in Step 302 - Step 303: Approve Pending Item");

        SystemLibrary.logMessage("Step 304: Valiate Email.");
        logMessage("Waiting for receiving email...");
        Thread.sleep(60000);
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(121, 121, testSerialNo), true, "Failed in Step 304: Valiate Email.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 49.");
        myAssert.assertAll();

    }

    @Test(priority = 50)
    public static void test50_ApprovaAllItems() throws Exception {
        SystemLibrary.logMessage("*** Start Test 50.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Step 305: Log on as Gregory SMITH and Validate Dashboard.");
        GeneralBasicHigh.logonESSMain(431, 431, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(161, 161, driver), true, "Failed in Step 305: Validate Dashboard.");

        SystemLibrary.logMessage("Step 306: Validate My Approval - Profile Change via Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovals_ProfileChange_ViaDashboard_NonAdmin(111, 111, driver), true, "Faield in Step 306: Validate My Approval via Dashboard.");

        SystemLibrary.logMessage("Step 307: Approve All approvals");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(61, 61, driver), true, "Failed in Step 307: Approve both approvals");

        SystemLibrary.logMessage("Step 307: Validate message after approve All.");
        GeneralBasic.displayApprovalsPage_ViaNavigationBar_NOTAdmin(driver);
        myAssert.assertEquals(SystemLibraryHigh.validateTextInElement_Main(31, 31, PageObj_Approvals.form_ApprovalList(driver)), true, "Failed in Step 307: Validate message after approve All");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 50.");
        myAssert.assertAll();

    }


    @Test(priority = 51)
    public static void test51_ApprovaAllItems() throws Exception {
        SystemLibrary.logMessage("*** Start Test 51.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail();

        SystemLibrary.logMessage("Step 308: Log on as Jack FINGLE and Validate Dashboard.");
        GeneralBasicHigh.logonESSMain(441, 441, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(171, 171, driver), true, "Failed in Step 308: Log on as Jack FINGLE and Validate Dashboard.");

        SystemLibrary.logMessage("Step 309: Validate My Approval - Profile Change via Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovals_ProfileChange_ViaDashboard_NonAdmin(121, 121, driver), true, "Faield in Step 309: Validate My Approval via Dashboard.");

        SystemLibrary.logMessage("Step 310: Approve approvals");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(71, 71, driver), true, "Failed in Step 310: Approve approvals");
        GeneralBasic.displayApprovalsPage_ViaNavigationBar_NOTAdmin(driver);
        myAssert.assertEquals(SystemLibraryHigh.validateTextInElement_Main(41, 41, PageObj_Approvals.form_ApprovalList(driver)), true, "Faied in Step 310: Validate Approval Item.");

        logMessage("Step 311: Validate Email content.");
        logMessage("Wait for receiving email...");
        Thread.sleep(90000);
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(131, 131, testSerialNo), true, "Failed in Step 311: Validate Email content.");
        logWarning("Email is not received, know issue - Jim: 08062018");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 51.");
        myAssert.assertAll();

    }


    @Test(priority = 52)
    public static void test52_DeclineApproval() throws Exception {
        SystemLibrary.logMessage("*** Start Test 52.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail();

        logMessage("Step 312: Log on As Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(181, 181, driver), true, "Failed in Step 312: Log on As Admin");

        logMessage("Step 313: Validate Workflow.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(151, 151, driver), true, "Failed in Step 313: Validate Workflow.");

        logMessage("Step 314: Validate My Approvals");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(131, 131, driver), true, "Failed in Step 314: Validate My Approvals");

        logMessage("Step 315: Decline a Approval.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(81, 81, driver), true, "Failed in Step 315: Decline a Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(141, 141, driver), true, "Failed in Step 315: Validate approval after Declining a Approval.");

        logMessage("Step 316: Validate Email.");
        Thread.sleep(30000);
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(141, 141, testSerialNo), true, "Failed in Step 316: Validate Email.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 52.");
        myAssert.assertAll();


    }

    @Test(priority = 53)
    public static void test53_BackupDatabase() throws InterruptedException {
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 317: Backup TNG and Payroll database.");
        myAssert.assertEquals(DBManage.backupMultiDB(201, 201), true, "Failed in Step 317: Backup Payroll DB.");
        myAssert.assertEquals(DBManage.backupMultiDB(202, 202), true, "Failed in Step 317: Backup Common DB.");
        myAssert.assertEquals(DBManage.backupMultiDB(203, 203), true, "Failed in Step 317: Backup TNG DB1.");
        myAssert.assertEquals(DBManage.backupMultiDB(204, 204), true, "Failed in Step 317: Backup TNG DB2.");

        logMessage("End of test 53.");
        myAssert.assertAll();

    }


    @Test(priority = 54)
    public static void test54_DownloadAndValidateAuditReport() throws Exception {
        SystemLibrary.logMessage("*** Start Test 54.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Log on As Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 318: Download and validate audit report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(51, 51, driver), true, "Failed in Step 318: Download and validate audit report.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 54.");
        myAssert.assertAll();
    }

    @Test(priority = 55)
    public static void test55_ValidateInMicropay() throws InterruptedException {
        SoftAssert myAssert=new SoftAssert();
        logMessage("Start Test 55.");
        logMessage("Step 319 - Step 323: Implement all user in Mciropay. Pending test...");
        logMessage("End of Test 55.");
        //myAssert.assertEquals(true, false, "Test is pending developing.");
        myAssert.assertEquals(true, false, "Test 55: Validate Implement in Micropay is under developing. ");
        myAssert.assertAll();
    }

    @Test(priority = 56)
    public static void test56_RedirectApprovals() throws Exception {
        SystemLibrary.logMessage("*** Start Test 56.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all email.");
        JavaMailLib.deleteAllMail();

        logMessage("Step 324: Log on As Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 326: Add Medical Condition for Sharon ANDREWS");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(221, 221, driver), true, "Failed in Step 326: Add Medical Condition for Sharon ANDREWS");

        logMessage("Step 327: Approve Medical Condition changes.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiPersonalInformationChanges(222, 222, driver), true, "Failed in Step 327: Approve Medical Condition changes.");

        Thread.sleep(90000);
        logMessage("Waiting for reveiving email.");

        logMessage("Step 328 - Step 329: Validate email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(151, 151, testSerialNo), true, "Failed in Step 328: Validate Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(152, 152, testSerialNo), true, "Failed in Step 329: Validate Email.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 56.");
        myAssert.assertAll();
    }


    @Test(priority = 57)
    public static void test57_EditMedicalCondition() throws Exception {
        SystemLibrary.logMessage("*** Start Test 57.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all email.");
        JavaMailLib.deleteAllMail();

        logMessage("Step 330: Log on As Sharon A");
        GeneralBasicHigh.logonESSMain(451, 451, testSerialNo, driver);

        logMessage("Step 330: Add Medical Condition for Sharon ANDREWS");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(231, 231, driver), true, "Failed in Step Step 330: Add Medical Condition for Sharon ANDREWS");

        GeneralBasic.signoutESS(driver);
        driver.close();

        //Do not detelete email in next test.
        logMessage("End of Test 57.");
    }
    ////////////////////

    @Test(priority = 58)
    public static void test58_TestRedirectApprovals() throws Exception {
        logMessage("Start test 58 - Test Redirect Approvals.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all mails...");
        JavaMailLib.deleteAllMail();

        logMessage("Step 331: Log on As Jack FINGLE and validate Dashboard.");
        GeneralBasicHigh.logonESSMain(461, 461, testSerialNo, driver);

        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(191, 191, driver), true, "Failed in Step 332: Validate Dashboard.");

        logMessage("Step 332: Validate Approvals - All.");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(151, 151, driver), true, "Failed in Step 332: Validate Approvals - All.");

        logMessage("Step 333: Validate Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(81, 81, driver), true, "Failed in Step 333: Validate Teams and Roles page.");

        logMessage("Step 334: Validate Ellipsis menu in Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_EllipsisMenInTeamsRolesDetailsPage_Main_OLD(91, 91, driver), true, "Failed in Step 334: Validate Ellipsis menu in Teams and Roles page.");

        logMessage("Step 335 - Step 336: Add Redirect Approvals");
        myAssert.assertEquals(GeneralBasicHigh.addRedirectApprovals_Main(101, 101, driver), false, "Failed in Step 335 - Step 336: Redirect Approvals");

        logMessage("Step 337 - Step 339: Add Redirect Approvals");
        myAssert.assertEquals(GeneralBasicHigh.addRedirectApprovals_Main(102, 102, driver), true, "Failed in Step 337 - Step 339: Redirect Approvals");

        logMessage("Step 340 - Step 342: Remove Redirect Approvals");
        myAssert.assertEquals(GeneralBasicHigh.removeRedirectApprovals_Main(103, 103, driver), true, "Failed in Step 340 - Step 342: Remove Redirect Approvals");

        logMessage("Step 343: Validate Approval Process in Teams & Toles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(111, 111, driver), true, "Failed in Step 343: Validate Approval Process in Teams & Toles page.");

        logMessage("Step 344: Add Redirect Approvals");
        myAssert.assertEquals(GeneralBasicHigh.addRedirectApprovals_Main(121, 121, driver), true, "Failed in Step 344: Add Redirect Approvals");

        logMessage("Step 345 - Step 346: Validate Approval Process in Teams & Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(122, 122, driver), true, "Failed in Step 345 - Step 346: Validate Approval Process in Teams & Toles page.");

        logMessage("Step 347: Validate Approvals All");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(161, 161, driver), true, "Failed in 347: Validate Approvals All");

        logMessage("Step 348 - Step 349: Validate email");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(161, 161, testSerialNo), true, "Failed in Step 348: Validate email for Jack FINGLE");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(162, 162, testSerialNo), true, "Failed in Step 349: Validate email for Tanya DOWNS");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 58.");
        myAssert.assertAll();
    }


    @Test(priority = 59)
    public static void test59_ApproveMedicalConditionChange() throws Exception {
        logMessage("Start Test 59.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 350: log on as Tanya and validate dashboard.");
        GeneralBasicHigh.logonESSMain(471, 471, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(201, 201, driver), true, "Failed in Step 350: log on as Tanya and validate dashboard.");

        logMessage("Step 351: Validate Approvals via Dashboard");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovals_ProfileChange_ViaDashboard_NonAdmin(171, 171, driver), true, "Failed in Step 351: Validate Approvals via Dashboard");

        /////////////////////////
        logMessage("Step 352: Validate Business card via Dashboard - > Approvals items");

        WebElement element = PageObj_Approvals.getApprovalLink_Main(91, 91, driver);
        if (element != null) {
            element.click();
            Thread.sleep(3000);
            GeneralBasic.waitSpinnerDisappear(120, driver);

            WebElement businessCard = SystemLibrary.waitChild("//div[@class='light-overlay']", 4, 1, driver);
            if (businessCard != null) {
                myAssert.assertEquals(SystemLibraryHigh.validateTextInElement_Main(51, 51, businessCard), true, "Faield in Step 352: Validate Business card via Dashboard - > Approvals items");
            }

        } else {
            myAssert.fail("Faield in Faield in Step 352: Validate Business card via Dashboard - > Approvals items");
        }

        //////

        logMessage("Step 354: Approve the Medical Conditin change.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(101, 101, driver), true, "Failed in Step 354: Approve the Medical Conditin change.");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(181, 181, driver), true, "Failed in Step 354: Validate Approval Item after approve.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 59.");
        myAssert.assertAll();

    }

    @Test(priority = 60)
    public static void test60_ValidateMedicalConditionAndEmail() throws Exception {
        logMessage("Start Test 60.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 355: log on as Sharon ANDREWS.");
        GeneralBasicHigh.logonESSMain(481, 481, testSerialNo, driver);

        logMessage("Step 355- Step 356: Validate and delete Medical Condition.");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(241, 241, driver), true, "Faied in Step 355: Validate Medical Condition.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(251, 251, driver), true, "Failed in Step 356: Delete Medical Condition.");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(261, 261, driver), true, "Faied in Step 356: Validate Medical Condition after deleting.");

        logMessage("Step 357: Validate email for Tanya DOWNS");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(171, 171, testSerialNo), true, "Failed in Step 357: Validate email for Tanya DOWNS.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 60.");
        myAssert.assertAll();
    }


    @Test(priority = 61)
    public static void test61_DeclineMedicalChanges() throws Exception {
        logMessage("*** Start Test 61.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 359: log on as Tanya DOWNS ANDREWS.");
        GeneralBasicHigh.logonESSMain(491, 491, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(211, 211, driver), true, "Failed in Step 359: Validate Dashboard.");

        logMessage("Step 360: Validate Approvals.");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(191, 191, driver), true, "Failed in Step 360: Validate Approvals.");

        logMessage("Step 361: Decline Medical Changes without comment.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(111, 111, driver), true, "Failed in Step 361: Decline Medical Changes without comment.");

        logMessage("Step 362: Validate Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(181, 181, testSerialNo), true, "Failed in Step 362: Validate Email.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 61.");
        myAssert.assertAll();

    }

    @Test(priority = 62)
    public static void test62_RedirectApproval_2() throws Exception {
        logMessage("*** Start Test 62.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all emails.");
        JavaMailLib.deleteAllMail();

        logMessage("Step 363: log on as Admin.");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 363: Validate Teams and Roles for Gregory SMITH");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(131, 131, driver), true, "Failed in Step 363: Validate Teams and Roles for Gregory SMITH");

        logMessage("Step 364: Validate Ellipsis in Teams & Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_EllipsisMenInTeamsRolesDetailsPage_Main_OLD(141, 141, driver), true, "Failed in Step 364: Validate Ellipsis in Teams & Roles page.");

        logMessage("Step 365 - Step 366: Add Redirect Approver and Validate Message.");
        myAssert.assertEquals(GeneralBasicHigh.addRedirectApprovals_Main(151, 151, driver), true, "Failed in Step 365: Add Redirect Approver.");

        logMessage("Step 367 - Step 368: Validateemail.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(191, 191, testSerialNo), true, "Failed in Step 367: Validate Gregory SMITH's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(192, 192, testSerialNo), true, "Failed in Step 368: Validate Ernie MANNING's email.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 62.");
        myAssert.assertAll();
    }

    @Test(priority = 63)
    public static void test63_ValidateLinkInTeamPage() throws Exception {
        logMessage("*** Start Test 63.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 369: log on as Mitchell SMART .");
        GeneralBasicHigh.logonESSMain(501, 501, testSerialNo, driver);

        logMessage("Step 369: Validate Team page.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamTable_Main(331, 331, driver), true, "Failed in Step 369: Validate Team Page.");

        logMessage("Step 370: Check Unassigned without link.");
        WebElement unassignedItem = SystemLibrary.waitChild("//span[text()='Unassigned']", 2, 1, driver);
        boolean isShown = false;
        if (unassignedItem != null) {
            isShown = true;
        }
        myAssert.assertEquals(isShown, true, "Failed in Step 370: Check Unassigned without link.");

        logMessage("Step 371: Select FINGLE from Team B");
        GeneralBasic.displayTeamsPage(driver);
        WebElement useItem = GeneralBasic.selectUserFromTeamPage("Team B", "Johnathon", null, "FINGLE", "Jack", driver);
        useItem.click();
        logMessage("User is clicked.");
        String userFullName = GeneralBasic.getUserFullname("Johnathon", null, "FINGLE", "Jack");
        Thread.sleep(3000);
        GeneralBasic.waitSpinnerDisappear(120, driver);
        logMessage("Screenshot after click user.");
        logScreenshot(driver);
        WebElement nameLable = SystemLibrary.waitChild("//h3[@class='bc-name' and text()='" + userFullName + "']", 5, 1, driver);
        isShown = false;
        if (nameLable != null) {
            isShown = true;
        }
        myAssert.assertEquals(isShown, true, "Failed in step 371: Select FINGLE from Team B in Team Page.");

        logMessage("Step 372: Validate Sidebar Menu.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(271, 271, driver), true, "Failed in Step 372: Validate Sidebar Menu.");

        logMessage("Step 373: Valdiate Contact Details page without Edit Function.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(161, 161, testSerialNo, driver), false, "Failed in Step 373: Valdiate Contact Details page without Edit Function.");
        logMessage("Cannot edit as expected.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 63.");

        myAssert.assertAll();


    }


    @Test(priority = 64)
    public static void test64_UploadUserPhoto() throws Exception {
        logMessage("*** Start Test 64.");
        logMessage("Test is pending adjustment.");
//        //Script is pending adjustment
//        SoftAssert myAssert = new SoftAssert();
//        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
//        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
//        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);
//
//        SystemLibrary.logMessage("Step 62: Upload user photo.");
//        myAssert.assertEquals(GeneralBasicHigh.uploadUserPhoto_Main(281, 281, driver), true, "Failed in Step 62: Upload Photo.");
//
//        GeneralBasic.signoutESS(driver);
//        driver.close();
        SystemLibrary.logMessage("*** End of Test 64.");

        //myAssert.assertAll();

    }

    @Test(priority = 65)
    public static void test65_EditManagerRolesAndPermission() throws Exception {
        logMessage("*** Start Test 65.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

       logMessage("Step 374: Validate Role and Permission page.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(61, 61, driver), true, "Failed in Step 374: Validate Role and Permission page.");

        logMessage("Step 375_1: Change Manager's Roles and Permissions");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(71, 71, driver), true, "Failed in Step 375_1: Change Manager's Roles and Permissions");
        logMessage("Step 375_2: Change Manager's Roles and Permissions");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(72, 72, driver), true, "Failed in Step 375_2: Change Manager's Roles and Permissions");
        logMessage("Step 375_3: Validate Manager's Roles and Permissions");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(73, 73, driver), true, "Failed in Step 375_3: Validate Manager's Roles and Permissions");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 65.");
        myAssert.assertAll();
    }

    @Test(priority = 66)
    public static void test66_EditAndValidateContactEmploymentDetail() throws Exception {
        logMessage("*** Start Test 66.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 376: Logon as Mitchell SMART.");
        GeneralBasicHigh.logonESSMain(501, 501, testSerialNo, driver);

        logMessage("Step 376: Validate Empoloyemment page.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(31, 31, driver), true, "Faield in Step 376_1: Validate Empoloyemment page.");
        WebElement checkIcon = SystemLibrary.waitChild("//i[@class='icon-checkmark']", 2, 1, driver);
        boolean isShown = false;
        if (checkIcon != null) isShown = true;
        myAssert.assertEquals(isShown, false, "Faield in Step 376_2: Validate Empoloyemment page.");
        logMessage("Tax detail is not visible, different from testcase.");

        logMessage("Step 377 - Step 378: Edit Contact Detail.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(171, 171, testSerialNo, driver), true, "Failed in Step 378: Edit Contact Detail.");

        logMessage("Wait for email");
        Thread.sleep(60000);
        logMessage("Step 379: Validate Jack FINGLE's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(201, 201, testSerialNo), true, "Step 379: Validate Jack FINGLE's email.");

        logMessage("Step 380: Validate Mitchell SMART's Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10, 10, driver), true, "Failed in Step 380: Validate Mitchell SMART's Teams and Roles page.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 66.");
        myAssert.assertAll();
    }

    @Test(priority = 67)
    public static void test67_AddRedirectApprovals() throws Exception {
        logMessage("*** Start Test 67.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Logon as Mitchell SMART.");
        GeneralBasicHigh.logonESSMain(501, 501, testSerialNo, driver);

        logMessage("Step 381: Redirect Approval.");
        myAssert.assertEquals(GeneralBasicHigh.addRedirectApprovals_Main(171, 171, driver), true, "Faield in Step 381: Redirect Approval.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 67.");
        myAssert.assertAll();
    }

    @Test(priority = 68)
    public static void test68_EditBankDetails() throws Exception {
        logMessage("*** Start Test 68.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 382: Logon as Jack FINGLE and validate bank account.");
        GeneralBasicHigh.logonESSMain(461, 461, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(81, 81, driver), true, "Failed in Step 382_1: validate bank account.");
        myAssert.assertEquals(GeneralBasicHigh.validateEllipsisMenuInBankAccountsPage_Main(82, 82, driver), true, "Failed in Step 382_1: validate bank account.");

        logMessage("Step 383 - Step 384: Edit Bank Account and validate pending approval message..");
        myAssert.assertEquals(GeneralBasicHigh.editMultiBankAccount(91, 91, driver), true, "Failed in Step 383: Edit Bank Account.");
        WebElement pendingApprovalMessage = SystemLibrary.waitChild("//div[@class='status-bar warning' and contains(., 'Pending approval')]", 2, 1, driver);
        myAssert.assertEquals(pendingApprovalMessage.getText().contains("Pending approval"), true, "Failed in Step 384: Validate Pending Approval message in Bank Account screen.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(92, 92, driver), true, "Failed in Step 384: Validate Pending Approval message in Bank Account screen.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 68.");
        myAssert.assertAll();
    }


    @Test(priority = 69)
    public static void test69_DeleteEmergencyContact() throws Exception {
        logMessage("*** Start Test 69.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 382: Logon as Jack FINGLE and validate bank account.");
        GeneralBasicHigh.logonESSMain(461, 461, testSerialNo, driver);

        logMessage("Step 385: Delete Emergency Contact.");
        myAssert.assertEquals(GeneralBasicHigh.deleteMultiContactDetails(181, 181, testSerialNo,  driver), true, "Failed in Step 385: Delete Emergency Contact.");

        logMessage("Step 385: Validte Contact Details");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(182, 182, driver), true, "Failed in Step 385: Validte Contact Details");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 69.");
        myAssert.assertAll();
    }

    @Test(priority = 70)
    public static void test70_DeclineAllChanges() throws Exception {
        logMessage("*** Start Test 70.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 386: Logon as Admin and validate Other Approval.");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(201, 201, driver), true, "Failed in Step 386: Logon as Admin and validate Other Approval.");

        logMessage("Step 387: Decline all changes.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(121, 121, driver), true, "Failed in Step 387: Decline all changes.");

        logMessage("Step 388: Validate Email.");
        logMessage("Waiting for receiving email...");
        Thread.sleep(60000);
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(211, 211, testSerialNo), true, "Failed in Step 388: Validate Johnathon FINGLE's email.");

        logMessage("Step 389: Validate Redirected Approvers.");
        myAssert.assertEquals(GeneralBasicHigh.validate_RedirectedApprovers_Main_ViaAdmin(11, 11, driver), true, "Failed in Step 389: Validate Redirected Approvers.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 70.");
        myAssert.assertAll();

    }

    @Test(priority = 71)
    public static void test71_CheckTerminatedEmployee_1() throws Exception {
        logMessage("*** Start Test 71.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 390: Logon as Admin and validate Search result of Ryan MAIN");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(11, 11, driver), true, "Faield in Step 390: Logon as Admin and validate Search result of Ryan MAIN");

        logMessage("Step 391: Validate Ryan MAIN's banner");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(291, 291, driver), true, "Failed in Step 391: Validate Ryan MAIN's banner");


        logMessage("Step 392: Validate Rayn MAIN's Employment page");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(41, 41, driver), true, "Failed in Step 392: Validate Rayn MAIN's Employment page");

        logMessage("Step 393: Valiate Team B.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(341, 341, driver), true, "Failed in Step 393: Valiate Team B.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 71.");
        myAssert.assertAll();

    }

    @Test(priority = 72)
    public static void test72_CheckTerminatedEmployee_2() throws Exception {
        logMessage("*** Start Test 72.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 394: Logon as Jack FINGLE and Search for Ryan MAIN.");
        GeneralBasicHigh.logonESSMain(461, 461, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(21, 21, driver), true, "Failed in Step 396: Logon as Sharon ANDREWS and Search for Ryan MAIN.");

        logMessage("Step 395_1: Validate Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(181, 181, driver), true, "Failed in Step 395_1: Validate Teams and Roles page.");

        logMessage("Step 395_2: Validate Team B.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(351, 351, driver), true, "Failed in Step 395: Valiate Team B.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 72.");
        myAssert.assertAll();

    }

    @Test(priority = 73)
    public static void test73_CheckTerminatedEmployee_3() throws Exception {
        logMessage("*** Start Test 73.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 396: Logon as Sharon ANDREWS and Search for Ryan MAIN.");
        GeneralBasicHigh.logonESSMain(481, 481, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(31, 31, driver), true, "Failed in Step 396: Logon as Sharon ANDREWS and Search for Ryan MAIN.");

        logMessage("Step 397: Validate Directory All");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(61, 61, driver), true, "Failed in Step 397: Validate Directory All");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 73.");
        myAssert.assertAll();

    }

    @Test(priority = 74)
    public static void test74_RemoveTerminationAndSync() throws Exception {
        logMessage("*** Start Test 74.");

        logMessage("Step 398_1: Remove Ryan MAIN's Termination statu in Meridian.");
        DBManage.sqlExecutor_Main(121, 121);

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 398_2: Logon as Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 398_2: Sydne all data.");
        myAssert.assertEquals(GeneralBasicHigh.syncAllData_Main(121, 121, driver), true, "Failed in Step 398_2: Sydne all data.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        logMessage("Step 398_2: Logon as Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 399: Validate Ryan's termination status in search result and Banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(41, 41, driver), true, "Failed in Step 399: Validate Ryan's termination status in search result.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(301, 301, driver), true, "Failed in Step 399: Validate Ryan's termination status in Banner.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        /////////////////
        logMessage("Step 400: Logon as Sharon Andrew and search User Ryan MAIN.");
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(511, 511, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(51, 51, driver), true, "Failed in Step 400: Validate Ryan's termination status in search result.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 74.");
        myAssert.assertAll();
    }

    @Test(priority = 75)
    public static void test75_EditRedirectApprovalAndValidateWorkflow() throws Exception {
        logMessage("*** Start Test 75...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 401: Change EOP Date in Meridian with last day of Next Month.");
        GeneralBasic.updateEOPDateAsLastDayOfNextMonthInMicropayDB();

        logMessage("Step 402: Log on As Admin");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 402: Validate FINGLE's Teams and Roles page");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(191, 191, driver), true, "Failed in Step 402: Validate FINGLE's Teams and Roles page");

        logMessage("Step 403: Edit Redirect approver.");
        myAssert.assertEquals(GeneralBasicHigh.editRedirectApprovals_Main(201, 201, driver), true, "Failed in step 403: Edit Redirect approver.");

        logMessage("Step 404: Validate SMART's Teams and Roles page");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(211, 211, driver), true, "Failed in Step 404: Validate SMART's Teams and Roles page");

        logMessage("Step 405: Remove Redirect Approval");
        myAssert.assertEquals(GeneralBasicHigh.removeRedirectApprovals_Main(221, 221, driver), true, "Failed in Step 405: Remove Redirect Approval");

        logMessage("Step 406: Validate Redirect Approval");
        myAssert.assertEquals(GeneralBasicHigh.validate_RedirectedApprovers_Main_ViaAdmin(21, 21, driver), true, "Failed in Step 406: Validate Redirect Approval");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 75.");
        myAssert.assertAll();
    }

    @Test(priority = 76)
    public static void test76_ApplyLeave() throws Exception {
        logMessage("*** Start Test 76...");
        SoftAssert myAssert = new SoftAssert();
        JavaMailLib.deleteAllMail();

        logMessage("Step 407: Log on As Ryan MAIN");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(521, 521, testSerialNo, driver);

        logMessage("Step 407: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(221, 221, driver), true, "Failed in Step 407: Validate Dashboard.");

        logMessage("Step 408 - Step 412: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(81, 81, driver), true, "Failed in Step 408: Apply Leave.");

        logMessage("Step 413: Validate Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(91, 91, driver), true, "Failed in Step 413: Validate Leave Page.");

        logMessage("Step 416 - Step 417: Test Filter");
        logMessage("Filter function is temporarily not available. Pending fix. Test is pending developing.");
        logMessage("Step 419: Validate Leave Upcoming and Pending Tab.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(101, 101, driver), true, "Failed in Step 419: Validate Leave Page - Upcoming.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(102, 102, driver), true, "Failed in Step 420: Validate Leave Page - Pending.");

        logMessage("Step 421 - Step 422: Validate Emails.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(221, 221, testSerialNo), true, "Failed in Step 421: Validate Ryan MAIN's Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(222, 222, testSerialNo), true, "Failed in Step 422: Validate Sue APPLEBY's Email.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 76.");
        myAssert.assertAll();
    }

    @Test(priority = 77)
    public static void test77_ValidateLeaveDetailBeforeApplyLeave() throws Exception {
        logMessage("*** Start Test 77...");
        SoftAssert myAssert = new SoftAssert();
        JavaMailLib.deleteAllMail();

        logMessage("Step 423: Log on As Jeniffer HOWE");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(531, 531, testSerialNo, driver);

        logMessage("Step 423: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(231, 231, driver), true, "Failed in Step 423: Validate Dashboard.");

        logMessage("Step 423: Validate Leave Balance as date on 31/05/2017.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(111, 111, driver), true, "Failed in Step 423: Validate Leave Page.");


        logMessage("Step 424: Validate All Team Members.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(371, 371, driver), true, "Failed in Step 424: Validate All Team Members.");

        logMessage("Step 425: Validate All Team Members - Leave Tab.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(372, 372, driver), true, "Failed in Step 425: Validate All Team Members - Leave Tab.");

        logMessage("Step 426: Validate Team - Leave Tab - Calendar June 2017.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(381, 381, driver), true, "Failed in Step 426: Validate Team - Leave Tav - Calendar June 2017.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of test 77.");

        myAssert.assertAll();


    }

    @Test(priority = 78)
    public static void test78_ValidateLeaveForcaseAndApplyLeave() throws Exception {
        logMessage("*** Start Test 78...");
        SoftAssert myAssert = new SoftAssert();
        //JavaMailLib.deleteAllMail();

        logMessage("Step 427: Log on As Jeniffer HOWE");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(531, 531, testSerialNo, driver);

        logMessage("Step 435: Forecase the Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveForecastInApplyLeaveDialogue_Main(131, 131, driver), true, "Failed in Step 435: Forecase the leave balance.");

        logMessage("Step 429 - 434: Apply Leave");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(121, 121, driver), true, "Failed in Step 429 - Step 434: Apply Leave");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of test 77.");

        myAssert.assertAll();
    }

    @Test(priority = 79)
    public static void test79_AdjustMeridianAndSync() throws Exception {
        logMessage("*** Start Test 79.");

        logMessage("Step 440: Change Public Holiday Date on the First Monday in 2 Months.");

        GeneralBasic.updatePublicHoliday_TNGFreeDayInMicropayDB();

        logMessage("*** End of Test 79.");
    }

    @Test(priority = 80)
    public static void test80_SynAllDateAfterAdjustingMicropayDB() throws Exception {
        logMessage("*** Start Test 80...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 442: Log on As Admin and Sync.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 442: Sync All Date.");
        myAssert.assertEquals(GeneralBasicHigh.syncAllData_Main(121, 121, driver), true, "Failed in Step 442: Sync All Date.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 80.");
        myAssert.assertAll();
    }

    @Test(priority = 81)
    public static void test81_ApplyLeaveAndValidateLeaveOnCalendar() throws Exception {
        logMessage("*** Start Test 81...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 442: Log on As Gregory SMITH.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(431, 431, testSerialNo, driver);

        logMessage("Step 443: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(241, 241, driver), true, "Failed in Step 443: Validate Dashboard.");

        logMessage("Step 444 - 446: Validate Leave Forecast.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveForecastInApplyLeaveDialogue_Main(141, 141, driver), true, "Failed in Step 444 - 446: Validate Leave Forecast.");

        logMessage("Step 445- 448: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(151, 151, driver), true, "Failed in Step 445- 448: Apply Leave.");

        logMessage("Step 449: Validate Leave in Team Leave Tab.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(391, 391, driver), true, "Failed in Step 429: Validate Team - Leave Tav - Calendar June 2017.");

        logMessage("Step 450: Validate Gregory SMITH Leave in Directory - Leave Tabb");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(71, 71, driver), true, "Failed in Step 450: Validate Gregory SMITH  Leave in Directory - Leave Tabb");

        logMessage("Step 451: Validate Jennifer Leave in Directory - Leave Tabb");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(81, 81, driver), false, "Failed in Step 451: Validate Jennifer's Leave in Directory - Leave Tabb");
        logMessage("Failed find Jennifer as expected.");

        logMessage("Step 452: Validate Sharon's Leave in Directory - June 2017.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(91, 91, driver), true, "Failed in Step 452: Validate Sharon's Leave in Directory - June 2017.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 81.");
        myAssert.assertAll();
    }

    @Test(priority = 82)
    public static void test82_ValidateLeaveOnCalendarViaAdmin() throws Exception {
        logMessage("*** Start Test 82...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 453: Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 455 - Step 458.");
        logMessage("Step 453: Validate Gregory SMITH's leave on Calendar.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(101, 101, driver), true, "Failed in Step 453: Validate Gregory SMITH's leave on Calendar.");

        logMessage("Step 454 - Step 455: Validate Sharon Andrew's leave on Calendar.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(111, 111, driver), true, "Failed in Step 454 - Step 455: Validate Sharon Andrew's leave on Calendar.");

        logMessage("Step 454: Validate Ryan MAIN's leave on Calendar.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(121, 121, driver), true, "Failed in Step 454: Validate Ryan MAIN's leave on Calendar.");

        logMessage("Step 455 - Step 458.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 82.");
        myAssert.assertAll();
    }

    @Test(priority = 83)
    public static void test83_ApplyLeaveForErnie() throws Exception {
        logMessage("*** Start Test 83...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 459: Log on As Ernie MANNING.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(541, 541, testSerialNo, driver);

        logMessage("Step 460 - Step 463: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(161, 161, driver), true, "Failed in Step 460 - Step 463: Apply Leave.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 83.");
        myAssert.assertAll();
    }

    @Test(priority = 84)
    public static void test84_ValidateAndApplyLeaveForMartin() throws Exception {
        logMessage("*** Start Test 84...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 464: Log on As Martin GREGG.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(551, 551, testSerialNo, driver);

        logMessage("Step 465: Validate Martin's dashboard - Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(251, 251, driver), true, "Failed in Step 465: Validate Martin's dashboard - Leave.");

        logMessage("Step 466: Edit Leave and Validate Apply Leave form for Martin.");
        GeneralBasic.displayLeavePage(driver);
        myAssert.assertEquals(GeneralBasicHigh.editMultiLeave(171, 171, driver), true, "Failed in Step 466: Edit Apply for Leave form for Martin.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(171, 171, driver), true, "Failed in Step 466: Validate Apply Leave Form for Martin.");

        logMessage("Step 467: Edit Leave and Validate Apply Leave form for Martin.");
        GeneralBasic.displayLeavePage(driver);
        myAssert.assertEquals(GeneralBasicHigh.editMultiLeave(181, 181, driver), true, "Failed in Step 467: Edit Apply for Leave form for Martin.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(181, 181, driver), true, "Failed in Step 467: Validate Apply Leave Form for Martin.");

        logMessage("Step 468 - Step 470: Edit Leave and Validate Apply Leave form for Martin.");
        GeneralBasic.displayLeavePage(driver);
        myAssert.assertEquals(GeneralBasicHigh.editMultiLeave(191, 191, driver), true, "Failed in Step 468 - Step 470: Edit Apply for Leave form for Martin.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(191, 191, driver), true, "Failed in Step 468 - Step 470: Validate Apply Leave Form for Martin.");

        logMessage("Step 472: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(201, 201, driver), true, "Failed in Step 72: Apply Leave.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 84.");
        myAssert.assertAll();
    }

    @Test(priority = 85)
    public static void test85_ApplyLeaveAndValidateBalanceForCarminC() throws Exception {
        logMessage("*** Start Test 85...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 473: Adjust Carmin CUMMINGS LSL Balance.");
        DBManage.sqlExecutor_Main(221, 221);

        logMessage("Step 473: Log on As Carmin CUMMINGS.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(381, 381, testSerialNo, driver), true, "Failed in Step 464: Log on As Carming CUMMINGS");

        logMessage("Step 473: Validate Carmin's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(261, 261, driver), true, "Failed in Step 473: Validate Carmin's Dashboard.");

        logMessage("Step 474: Validate Carmin's Team and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(231, 231, driver), true, "Failed in Step 474: Validate Carmin's Team and Roles page.");


        logMessage("Step 475: Validate Carmin's Approval Process.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(241, 241, driver), true, "Failed in Step 475: Validate Carmin's Approval Process.");

        logMessage("Step 476 - Step 480: Apply Leave");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(211, 211, driver), true, "Failed in Step 476 - Step 480: Apply Leave");

        logMessage("Step 481 - Step 482: Validate Leave Balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(221, 221, driver), true, "Failed in Step 481: Validate Leave Balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(231, 231, driver), true, "Failed in Step 482: Validate Leave Balance.");

        logMessage("Step 483: Validate Leave Balance with forcasting.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(241, 241, driver), true, "Failed in Step 483: Validate Leave Balance with forcasting.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 85.");
        myAssert.assertAll();
    }

    @Test(priority = 86)
    public static void test86_ValidateEmailLeaveApplication() throws Exception {
        logMessage("*** Start Test 86.");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 484: Validate Carmin CUMMINGS Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(231, 231, testSerialNo), true, "Failed in Step 484: Validate Carmin CUMMINGS Email.");
        logMessage("Step 485: Validate Robin SPACEY Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(232, 232, testSerialNo), false, "Failed in Step 485: Validate Robin SPACEY Email.");
        logMessage("Step 486: Validate Christne RAMPLING Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(233, 233, testSerialNo), true, "Failed in Step 486: Validate Christne RAMPLING Email.");

        logMessage("*** End of Test 86.");
        myAssert.assertAll();
    }

    @Test(priority = 87)
    public static void test87_EditAndValidatePendingLeave() throws Exception {
        logMessage("*** Start Test 87...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 487: Log on As Ryan MAIN.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(521, 521, testSerialNo, driver), true, "Failed in Step 487: Log on As Ryan MAIN.");

        logMessage("Step 487: Valdiate Leave in Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(251, 251, driver), true, "Failed in Step 487: Valdiate Leave in Dashboard.");

        logMessage("Step 488 - Step 489: Edit Pending Leave.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPendingLeave(261, 261, driver), true, "Failed in Step 489: Edit Leave.");

        logMessage("Step 490: Valdiate leave page after edit Pending Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(271, 271, driver), true, "Failed in Step 490: Valdiate leave page after edit Pending Leave.");

        /////////// Edit Pending Leave again.
        logMessage("Step 491 - Step 491: Edit Pending Leave again .");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPendingLeave(281, 281, driver), true, "Failed in Step 491: Edit Pending Leave again .");

        logMessage("Step 491: Valdiate leave page after edit Pending Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(291, 291, driver), true, "Failed in Step 491: Valdiate leave page after edit Pending Leave.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 87.");
        myAssert.assertAll();
    }

    @Test(priority = 88)
    public static void test88_ValidateAllApprovalItems() throws Exception {
        logMessage("*** Start Test 88...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 493: Log on As Admin and Validate My Approval.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver), true, "Failed in Step 493: Log on As Admin.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(1061, 1061, driver), true, "Failed in Step 493: Validate My Approval.");

        logMessage("Step 496: Validate Other Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1071, 1071, driver), true, "Failed in Step 496: Validate Other Leave 1.");
        logMessage("Step 497: Validate Other Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1072, 1072, driver), true, "Failed in Step 497: Validate Other Leave 2.");
        logMessage("Step 498: Validate Other Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1073, 1073, driver), true, "Failed in Step 498: Validate Other Leave 3.");
        logMessage("Step 499: Validate Other Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1074, 1074, driver), true, "Failed in Step 499: Validate Other Leave 4.");
        logMessage("Step 500: Validate Other Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1075, 1075, driver), true, "Failed in Step 500: Validate Other Leave 5.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 88.");
        myAssert.assertAll();

    }

    @Test(priority = 89)
    public static void test89_ValdiateLeaveBalanceAndForecastLeave() throws Exception {
        logMessage("*** Start Test 89...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 501: Validate Jennifer HOWE's Leave page via Admin Approvals page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_ViaAdminApprovals_Main(301, 301, driver), true, "Failed in Step 501: Validate Jennifer HOWE's Leave page via Admin Approvals page.");

        logMessage("Step 502: Adjust Jennifer HOWE's leave balance");
        DBManage.sqlExecutor_Main(231, 231);

        logMessage("Step 502: Validate Jenifer HOWE's leave balance after adjust leave belance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(311, 311, driver), true, "Failed in Step 502: Validate Jenifer HOWE's leave balance after adjust leave belance.");

        logMessage("Step 503: Forecast the balance to the end date of leave application");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(321, 321, driver), true, "Failed in Step 503: Forecast the balance to the end date of leave application");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 89.");
        myAssert.assertAll();

    }

    @Test(priority = 90)
    public static void test90_ChangeDefaultApprovalTeam() throws Exception {
        logMessage("*** Start Test 90...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 504: Change Default Approval Team.");
        myAssert.assertEquals(GeneralBasicHigh.changeDefaultApprovalTeam_Main(251, 251, driver), true, "Failed in Step 504: Change Default Approval Team.");

        logMessage("Step 505: Validate Team and Role pages.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(261, 261, driver), true, "Failed in Step 505: Validate Team and Role pages.");

        logMessage("Step 506: Validate Approval Process.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(271, 271, driver), true, "Failed in Step 506: Validate Approval Process.");

        logMessage("Step 507: Validate Other Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1081, 1081, driver), true, "Failed in Step 507: Validate Other Approval.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 90.");
        myAssert.assertAll();

    }

    @Test(priority = 91)
    public static void test91_ValidateLeaveBalanceAndApplyLeave() throws Exception {
        logMessage("*** Start Test 91...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 508: Adjust Carmin CUMMINGS's leave balance");
        DBManage.sqlExecutor_Main(241, 241);

        logMessage("Step 508: Validate Carmin CUMMINGS's leave balance after adjust leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(331, 331, driver), true, "Failed in Step 508: Validate Carmin CUMMINGS's leave balance after adjust leave balance.");

        logMessage("Step 510: Edit Leave and Validate Apply Leave form for Carmin C.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(341, 341, driver), true, "Failed in Step 510: Validate Apply Leave Form for Carmin C.");

        logMessage("Step 510 - Step 516: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(351, 351, driver), true, "Step 510 - Step 516: Apply Leave.");

        logMessage("Step 517: Validate Carmin CUMMINGS Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(241, 241, testSerialNo), true, "Failed in Step 517: Validate Carmin CUMMINGS Email.");

        logMessage("Step 518: Validate Tanya DOWNS Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(242, 242, testSerialNo), false, "Failed in Step 518: Validate Tanya DOWNS Email.");
        logMessage("No email for Tanya_DOWNS_EMP15 is as expected.");

        logMessage("Step 519: Validate Sue APPLEBY Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(243, 243, testSerialNo), true, "Failed in Step 519: Validate Sue APPLEBY Email.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 91.");
        myAssert.assertAll();
    }

    @Test(priority = 92)
    public static void test92_ValidteAndApplyLeaveForSharonA() throws Exception {
        logMessage("*** Start Test 92...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Delete All email.");
        JavaMailLib.deleteAllMail();

        logMessage("Step 521: Log on As Sharon ANDREWS.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(511, 511, testSerialNo, driver);

        logMessage("Step 522: Validate Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(361, 361, driver), true, "Step 522: Validate Leave Page.");

        logMessage("Step 523 - Step 524: Validate Edit Leave Dialogue.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(371, 371, driver), true, "Failed in Step 523 - Step 524: Validate Edit Leave Dialogue.");

        logMessage("Step 525 - Step 527: Apply leave for Sharon A.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(381, 381, driver), true, "Failed in Step 525 - Step 527: Apply Leave for Sharon A.");

        logMessage("Step 528: Validate Sharon A's Leave Page");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(391, 391, driver), true, "Failed in Step 528: Validate Sharon A's Leave Page");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 92.");
        myAssert.assertAll();
    }

    @Test(priority = 93)
    public static void test93_DeleteAndValidateWorkflow() throws Exception {
        logMessage("*** Start Test 93...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 529: Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 529: Delete Leave Workflow - a User Defined Leave.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(161, 161, driver), true, "Failed in Step 529: Delete Leave Workflow - a User Defined Leave.");

        logMessage("Step 529 - Step 531: Validate Leave Workflow after deleting .");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(171, 171, driver), true, "Failed in Step 529 - Step 531: Validate Leave Workflow after deleting .");

        logMessage("Step 532: Validate Search Result.");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(61, 61, driver), true, "Failed in Step 532: Validate Search Result.");

        logMessage("Step 533: Validate Sharan H's Approval Process.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(281, 281, driver), true, "Failed in Step 533: Validate Sharan H's Approval Process.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 93.");
        myAssert.assertAll();
    }

    @Test(priority = 94)
    public static void test94_ApplyLeaveAndValidateMmailAfterEditWorkflow() throws Exception {
        logMessage("*** Start Test 94...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Delete All mails.");
        JavaMailLib.deleteAllMail();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 534: Validate Sharon A's Apply for Leave dialogue.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(401, 401, driver), true, "Failed in Step 534: Validate Sharon A's Apply for Leave dialogue.");

        logMessage("Step 535: Apply Leave for Sharon A.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(411, 411, driver), true, "Failed in Step 535: Apply Leave for Sharon A.");

        logMessage("Step 536: Validate Sharon A's Leave page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(421, 421, driver), true, "Failed in Step 536: Validate Sharon A's Leave page.");

        logMessage("Step 537: Validate Sharon ANDREWS Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(251, 251, testSerialNo), true, "Failed in Step 537: Validate Sharon ANDREWS Email.");

        logMessage("Step 538: Validate Tanya DOWNS Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(252, 252, testSerialNo), false, "Failed in Step 538: Validate Tanya DOWNS Email.");
        logMessage("No email is for Tanya DOWNS is as expected.");

        logMessage("Step 539: Validate Sue APPLEBY Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(253, 253, testSerialNo), true, "Failed in Step 539: Validate Sue APPLEBY Email.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 94.");
        myAssert.assertAll();
    }

    @Test(priority = 95)
    public static void test95_AddAndRemoveTeamMember() throws Exception {
        logMessage("*** Start Test 95...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 540: Add Sharan A into Team F while remove from Team B.");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(401, 401, driver), true, "Failed in Step 540: Add Sharan A into Team F.");

        logMessage("Step 540: Validate Sharon A's Team and Role page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(291, 291, driver), true, "Failed in Step 540: Validate Sharon A's Team and Role page.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 95.");
        myAssert.assertAll();
    }

    @Test(priority = 96)
    public static void test96_ApplyAndValidateLeaveForSharonH() throws Exception {
        logMessage("*** Start Test 96...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 541: Validate ANDREWS's leave dialogue.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(431, 431, driver), true, "Step 541: Validate ANDREWS's leave dialogue.");

        logMessage("Step 541 - Step 545: Apply Care Leave for Sharon ANDREWS");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(441, 441, driver), true, "Failed in Step 541 - Step 545: Apply Care Leave for Sharon ANDREWS");

        logMessage("Step 546: Validate Sharon A's leave page with upcoming item.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(451, 451, driver), true, "Failed in Step 546: Validate Sharon A's leave page with upcoming item.");

        logMessage("Step 547: Validate Sharon A's leave page with pending item.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(452, 452, driver), true, "Failed in Step 547: Validate Sharon A's leave page with pending item.");

        logMessage("Step 548: Validate Sharon A's leave page with All item.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(453, 453, driver), true, "Failed in Step 548: Validate Sharon A's leave page with ALL item.");

        logMessage("Step 549: Edit Leave with Attachment.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPendingLeave(461, 461, driver), true, "Step 549: Edit Leave with Attachment.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 96.");
        myAssert.assertAll();
    }

    @Test(priority = 97)
    public static void test97_EditLeaveAttachmentAndValidateApprovalItems() throws Exception {
        logMessage("*** Start Test 97...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 549: Edit Leave with Attachment.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPendingLeave(461, 461, driver), true, "Failed in Step 549: Edit Leave with Attachment.");

        logMessage("Step 550: Change the Leave Settings - untick 'Allow insufficient balance'.");
        myAssert.assertEquals(GeneralBasicHigh.editSettingsLeave_Main(41, 41, driver), true, "Failed in Step 550: Change the Leave Settings - untick 'Allow insufficient balance'.");

        logMessage("Step 551: Validate Sharon Andrew's Leave forecase in Leave page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(471, 471, driver), true, "Failed in Step 551: Validate Sharon Andrew's Leave forecase in Leave page.");

        logMessage("Step 552: Validate Admin Dashboard with 1 Pending Leave Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(271, 271, driver), true, "Failed in Step 552: Validate Admin Dashboard with 1 Pending Leave Approval.");

        logMessage("Step 553: Validate Admin My Approvals.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(1091, 1091, driver), true, "Failed in Step 553: Validate Admin My Approvals.");

        logMessage("Step 554 - Step 555: Validate Other Approval - Sharon A - Carer Leave");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1101, 1101, driver), true, "Failed in Step 554 - Step 555: Validate Other Approval - Sharon A - Carer Leave.");

        logMessage("Step 556: Validate Other Approval - Sharon A - Time in Lieu #2.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1102, 1102, driver), true, "Failed in Step 556: Validate Other Approval - Sharon A - Time in Lieu #2.");

        logMessage("Step 557: Validate Other Approval - Carmin C.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1103, 1103, driver), true, "Failed in Step 557: Validate Other Approval - Carmin C ");

        logMessage("Step 558: Validate Other Approval - Ryan MAIN.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1104, 1104, driver), true, "Failed in Step 558: Validate Other Approval - Ryan MAIN.");

        logMessage("Step 559: Validate Other Approval - Carmin CUMMINGS.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1105, 1105, driver), true, "Failed in Step 559: Validate Other Approval - Carmin CUMMINGS.");

        logMessage("Step 560: Validate Other Approval - Martin GREGG.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1106, 1106, driver), true, "Failed in Step 560: Validate Other Approval - Martin GREGG.");

        logMessage("Step 561: Validate Other Approval - Gregory SMITH.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1107, 1107, driver), true, "Failed in Step 561: Validate Other Approval - Gregory SMITH.");

        logMessage("Step 562: Validate Other Approval - Jennifer HOWE.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1108, 1108, driver), true, "Failed in Step 562: Validate Other Approval - Jennifer HOWE.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 97.");
        myAssert.assertAll();
    }

    @Test(priority = 98)
    public static void test98_ApprolvePendingLeaveApplications() throws Exception {
        logMessage("*** Start Test 98...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 563 - Step 564: Validate Multi Approval controls in Approval Page - Pending Developing.");

        logMessage("Step 565_1: Approve Items.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(131, 131, driver), true, "Failed in Step 565_1: Approve Items for Gregory SMITH.");

        logMessage("Step 565_2: Approve Items.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(141, 141, driver), true, "Failed in Step 565_2: Approve Items for Carmin CUMMINGS.");

        logMessage("Step 565_3: Approve Items.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(151, 151, driver), true, "Failed in Step 565_3: Approve Items for Carmin CUMMINGS.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 98.");
        myAssert.assertAll();
    }

    @Test(priority = 99)
    public static void test99_ApplyLeaves_1() throws Exception {
        logMessage("*** Start Test 99...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 566: Edit Leave and Validate Apply Leave form for Jennifer H.");
        GeneralBasic.displayPage_ViaSideNavigationBar("Jennifer", "Jennifer", null, "HOWE", null, "Leave", driver);
        myAssert.assertEquals(GeneralBasicHigh.editMultiLeave(481, 481, driver), true, "Failed in Step 566: Edit Leave and Validate Apply Leave form for Jennifer H.");
        logMessage("Step 566: Validate Apply Leave Form for Jennifer H.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(481, 481, driver), true, "Failed in Step 566: Validate Apply Leave Form for Jennifer H.");

        logMessage("Step 566 - Step 568: Apply Leave Form for Jennifer H.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(482, 482, driver), true, "Failed in Step 566 - Step 568: Apply Leave Form for Jennifer H.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 99.");
        myAssert.assertAll();
    }

    @Test (priority = 100)
    public static void Test100_ApplyLeave_2() throws Exception {
        logMessage("*** Start Test 100...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 569 - Step 570: Apply Leave Form for Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(491, 491, driver), true, "Failed in Step 569 - Step 570: Apply Leave Form for Phantom FRY.");

        logMessage("Step 571 - Step 572: Apply Leave Form for Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(501, 501, driver), true, "Failed in Step 571 - Step 572: Apply Leave Form for Phantom FRY.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 100.");
        myAssert.assertAll();
    }

    @Test (priority = 101)
    public static void Test101_ValidateAllLeaveInDirectory() throws Exception {
        logMessage("*** Start Test 101...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 574: Validate Team - Directory.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(131, 131, driver), true, "Failed in Step 574: Validate Team - Directory.");

        logMessage("Step 575: Validate Team - Directory - Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(141, 141, driver), true, "Failed in Step 575: Validate Team - Directory - Leave.");

        logMessage("Step 576: Validate Team - Directory - Leave - Sharon ANDREWS.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(151, 151, driver), true, "Failed in Step 576: Validate Team - Directory - Leave.");

        logMessage("Step 577: Validate Team - Directory - Leave - Gregory SMITH.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(161, 161, driver), true, "Failed in Step 577: Validate Team - Directory - Leave - Gregory SMITH.");

        logMessage("Step 578: Validate Team - Directory - Leave - Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(171, 171, driver), true, "Failed in Step 578: Validate Team - Directory - Leave - Phantom FRY.");

        logMessage("Step 579: Validate Team - Directory - Leave - Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(181, 181, driver), true, "Failed in Step 579: Validate Team - Directory - Leave - Phantom FRY.");

        logMessage("Step 580: Validate Team - Directory - Leave - Sharon A.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(191, 191, driver), true, "Failed in Step 580: Validate Team - Directory - Leave - Sharon A.");

        logMessage("Step 581: Validate Team - Directory - Leave - Carmin C.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(201, 201, driver), true, "Failed in Step 581: Validate Team - Directory - Leave - Carmin A.");

        logMessage("Step 582: Validate Team - Directory - Leave - Jennifer H.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(211, 211, driver), true, "Failed in Step 582: Validate Team - Directory - Leave - Jennifer H.");

        logMessage("Step 583: Validate Team - Directory - Leave - Jennifer H.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(221, 221, driver), true, "Failed in Step 581: Validate Team - Directory - Leave - Jennifer H.");

        logMessage("Step 584: Validate Team - Directory - Leave - Martin G.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(231, 231, driver), true, "Failed in Step 584: Validate Team - Directory - Leave - Martin G.");

        logMessage("Step 585: Validate Team - Directory - Leave - Ernie MANNING.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(241, 241, driver), true, "Failed in Step 585: Validate Team - Directory - Leave - Ernie MANNING.");

        logMessage("Step 586: Validate Team - Directory - Leave - Carmin CUMMINGS.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(251, 251, driver), true, "Failed in Step 586: Validate Team - Directory - Leave - Carmin CUMMINGS.");

        logMessage("Step 587: Validate Team - Directory - Leave - Ryan MAIN.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(261, 261, driver), true, "Failed in Step 587: Validate Team - Directory - Leave - Ryan MAIN.");

        logMessage("Step 588: Validate Team - Directory - Leave - Sharon ANDREWS.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(271, 271, driver), true, "Failed in Step 588: Validate Team - Directory - Leave - Sharon ANDREWS.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 101.");
        myAssert.assertAll();
    }

    @Test (priority = 102)
    public static void test102_ValidateLeaveInTeamPage() throws Exception {
        logMessage("*** Start Test 102...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 589: Log on As Jack FINGLE.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(461, 461, testSerialNo, driver);

        logMessage("Step 590: Validate All Team Member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(411, 411, driver), true, "Failed in Step 590: Validate All Team Member.");

        logMessage("Step 591_1: Validate Team - Leave - Carmin CUMMINGS");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(421, 421, driver), true, "Failed in Step 591_1: Validate Team - Leave - Carmin CUMMINGS");

        logMessage("Step 591_2: Validate Team - Leave - Carmin CUMMINGS");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(422, 422, driver), true, "Failed in Step 591_2: Validate Team - Leave - Carmin CUMMINGS");

        logMessage("Step 591_3: Validate Team - Leave - Phantom FRY");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(423, 423, driver), false, "Failed in Step 591_3: Validate Team - Leave - Phantom FRY");
        logMessage("Validation Failed in Step 591_3 as expected.");

        logMessage("Step 591_4: Validate Team - Leave - Phantom FRY");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(424, 424, driver), false, "Failed in Step 591_4: Validate Team - Leave - Phantom FRY");
        logMessage("Validation Failed in Step 591_4 as expected.");

        logMessage("Step 592: Validate Team - Leave - Ryan MAIN");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(431, 431, driver), false, "Failed in Step 592: Validate Team - Leave - Ryan MAIN");
        logMessage("Validation Failed in Step 592 as expected.");

        logMessage("Step 593_1: Validate Team - Leave - Carmin CUMMINGS");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(441, 441, driver), true, "Failed in Step 593_1: Validate Team - Leave - Carmin CUMMINGS");

        logMessage("Step 593_2: Validate Team - Leave - Carmin CUMMINGS");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(442, 442, driver), true, "Failed in Step 593_2: Validate Team - Leave - Carmin CUMMINGS");

        logMessage("Step 594: Validate Team - Leave - Ryan MAIN");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(451, 451, driver), false, "Failed in Step 594: Validate Team - Leave - Ryan MAIN");
        logMessage("Validation Failed in Step 592 as expected.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 102.");
        myAssert.assertAll();
    }

    @Test (priority = 103)
    public static void test103_ValidateLeaveInTeamPage2() throws Exception {
        logMessage("*** Start Test 103...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 595: Log on As Ryan MAIN.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(521, 521, testSerialNo, driver);

        logMessage("Step 595: Validate All Team Member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(461, 461, driver), true, "Failed in Step 595: Validate All Team Member.");

        logMessage("Step 596: Validate Team - Leave - Ryan MAIN.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(471, 471, driver), true, "Failed in Step 596: Validate Team - Leave - Ryan MAIN.");

        logMessage("Step 597_1: Validate Team - Leave - Carmin CUMMINGS.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(481, 481, driver), true, "Failed in Step 597_1: Validate Team - Leave - Carmin CUMMINGS.");

        logMessage("Step 597_2: Validate Team - Leave - Carmin CUMMINGS.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(482, 482, driver), true, "Failed in Step 597_2: Validate Team - Leave - Carmin CUMMINGS.");

        logMessage("Step 597_3: Validate Team - Leave - Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(483, 483, driver), false, "Failed in Step 597_3: Validate Team - Leave - Phantom FRY.");
        logMessage("Cannot view Phantom's leave as expected.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 103.");
        myAssert.assertAll();
    }

    @Test (priority = 104)
    public static void test104_ValidateLeaveApplicationReport() throws Exception {
        logMessage("*** Start Test 104...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 598: Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 598: Download and validate Leave Application Report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(61, 61, driver), true, "Failed in Step 598: Download and validate Leave Application Report.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 104.");
        myAssert.assertAll();
    }

    @Test (priority = 105)
    public static void test105_TPUTool() throws InterruptedException {
        SoftAssert myAssert = new SoftAssert();
        logMessage("Step 599 - Step 605: Test TPU Toll.");
        logMessage("Test is pending developing.");
        myAssert.assertEquals(true, false, "Test 105: Step 599 - Step 605: Test TPU Toll. Test is pending developing... ");
        myAssert.assertAll();
    }

    @Test (priority = 106)
    public static void test106_ValidateRoleAndPermisionTableAndReport() throws Exception {
        logMessage("*** Start Test 106...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 606: Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 606: Validate Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(81, 81, driver), true, "Failed in Step 606: Validate Roles page.");

        logMessage("Step 606: Validate All Roles report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiRolesReport(91, 91, driver), true, "Failed in Step 606: Validate All Roles report.");

        logMessage("Step 607: Validate Administrator Roles report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiRolesReport(92, 92, driver), true, "Failed in Step 607: Validate Administrator Roles report.");

        logMessage("Step 608: Validate Manager Roles report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiRolesReport(93, 93, driver), true, "Failed in Step 608: Validate Manager Roles report.");

        logMessage("Step 609: Validate Memeber Roles report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiRolesReport(94, 94, driver), true, "Failed in Step 609: Validate Memeber Roles report.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 106.");
        myAssert.assertAll();
    }

    @Test (priority = 107)
    public static void test107_DuplicateAdminRoleAndValidate() throws Exception {
        logMessage("*** Start Test 107...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 610: Duplicate the Admin role.");
        myAssert.assertEquals(GeneralBasicHigh.duplicateMultiRole(101, 101, driver), true, "Failed in Step 610: Duplicate the Admin role.");

        logMessage("Restarting ESS.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 610: Valdiate Role page after duplicating the Admin role.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(102, 102, driver), true, "Failed in Step 610: Valdiate Role page after duplicating the Admin role.");

        logMessage("Step 610: Valdiate Administrator role Permission panels after duplicating the Admin role.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(201, 201, driver), true, "Failed in Step 610: Valdiate Administrator role Permission panels after duplicating the Admin role.");

        logMessage("Step 610: Valdiate Second Admin role Permission panels after duplicating the Admin role.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(202, 202, driver), true, "Failed in Step 610: Valdiate Administrator role Permission panels after duplicating the Admin role.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 107.");
        myAssert.assertAll();
    }

    @Test (priority = 108)
    public static void test108_EditAndValidateRolePermisson() throws Exception {
        logMessage("*** Start Test 108...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 611: Edit and change role permission.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(211, 218, driver), true, "Failded in Step 611: Edit and change role permission.");


        logMessage("Step 611: Validate Roles Permission after changes.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(221, 221, driver), true, "Failed in Step 611: Validate Roles Permission after changes.");

        logMessage("Step 612: Valdiate Role page.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(231, 231, driver), true, "Failed in Step 612: Valdiate Role page.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 108.");
        myAssert.assertAll();
    }

    @Test (priority = 109)
    public static void test109_DuplicateMemberRoleAndValidatePermissions_1() throws Exception {
        logMessage("*** Start Test 109...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 613: Duplicate the Member role.");
        myAssert.assertEquals(GeneralBasicHigh.duplicateMultiRole(241, 241, driver), true, "Failed in Step 613: Duplicate the Member role.");

        logMessage("Restarting ESS.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 613: Valdiate Role page after duplicating the Member role.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(251, 251, driver), true, "Failed in Step 613: Valdiate Role page after duplicating the Admin role.");

        logMessage("Step 613: Validate Roles Permission.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(252, 252, driver), true, "Failed in Step 613: Validate Roles Permission.");

        logMessage("Step 614: Change Roles - Member Terminated - Permissons.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(261, 261, driver), true, "Failed in Step 614: Change Roles - Member Terminated - Permissons row 261.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(262, 262, driver), true, "Failed in Step 614: Change Roles - Member Terminated - Permissons row 262.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(263, 263, driver), true, "Failed in Step 614: Change Roles - Member Terminated - Permissons row 263.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(264, 264, driver), true, "Failed in Step 614: Change Roles - Member Terminated - Permissons row 264.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(265, 265, driver), true, "Failed in Step 614: Change Roles - Member Terminated - Permissons row 265.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(266, 266, driver), true, "Failed in Step 614: Change Roles - Member Terminated - Permissons row 266.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(267, 267, driver), true, "Failed in Step 614: Change Roles - Member Terminated - Permissons row 267.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(268, 268, driver), true, "Failed in Step 614: Change Roles - Member Terminated - Permissons row 268.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(269, 269, driver), true, "Failed in Step 614: Change Roles - Member Terminated - Permissons row 269.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(270, 270, driver), true, "Failed in Step 614: Change Roles - Member Terminated - Permissons row 270.");

        logMessage("Step 614: Validate Role - Member Terminated - Permission after configurations.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(281, 281, driver), true, "Failed in Step 614: Validate Role - Member Terminated - Permission after configurations.");

        logMessage("Step 615: Valdiate Role page after change Member role.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(291, 291, driver), true, "Failed in Step 615: Valdiate Role page after changing member role.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 109.");

        myAssert.assertAll();
    }

    @Test (priority = 110)
    public static void test110_DuplicateMemberTerminatedRoleAndValidatePermissions_2() throws Exception {
        logMessage("*** Start Test 110...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 616: Duplicate the Member Terminated role.");
        myAssert.assertEquals(GeneralBasicHigh.duplicateMultiRole(301, 301, driver), true, "Failed in Step 616: Duplicate the Member Terminated role.");

        logMessage("Restarting ESS.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 616: Valdiate Role page after duplicating the Member Terminated role.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(302, 302, driver), true, "Failed in Step 616: Valdiate Role page after duplicating the Member Terminated role.");

        logMessage("Step 616: Validate Leave for Manager Roles Permission.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(303, 303, driver), true, "Failed in Step 616: Validate Member Terminated Roles Permission.");

        ////////////////////////////////////////////////
        logMessage("Step 617: Change Roles - Leave For Manager - Permissons.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(311, 311, driver), true, "Failed in Step 617: Change Roles - Leave For Manager - Permissons row 311.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(312, 312, driver), true, "Failed in Step 617: Change Roles - Leave For Manager - Permissons row 312.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(313, 313, driver), true, "Failed in Step 617: Change Roles - Leave For Manager - Permissons row 313.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(314, 314, driver), true, "Failed in Step 617: Change Roles - Leave For Manager - Permissons row 314.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(315, 315, driver), true, "Failed in Step 617: Change Roles - Leave For Manager - Permissons row 315.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(316, 316, driver), true, "Failed in Step 617: Change Roles - Leave For Manager - Permissons row 316.");

        logMessage("Step 617: Validate Role - Leave For Manager - Permission after configurations.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(321, 321, driver), true, "Failed in Step 617: Validate Role - Leave for Manager - Permission after configurations.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 110.");

        myAssert.assertAll();
    }

    @Test (priority = 111)
    public static void test111_RemoveAndValidateTeam() throws Exception {
        logMessage("*** Start Test 111...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 618: Validate HOWE's Team and Role page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(301, 301, driver), true, "Failed in Step 618: Validate HOWE's Team and Role page.");

        logMessage("Step 619: Validate Team C");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(491, 491, driver), true, "Failed in Step 619: Validate Team C");

        logMessage("Step 620 - Step 621: Remove Jennifer H from team.");
        myAssert.assertEquals(GeneralBasicHigh.removeMultiTeamMembers(501, 501, driver), true, "Failed in Step 620 - Step 621: Remove Jennifer H from team.");

        logMessage("Step 622: Validate Team C again after remove Jennifer from Team.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(511, 511, driver), true, "Failed in Step 622: Validate Team C again after remove Jennifer from Team.");

        logMessage("Step 623: Validate Jennifer H's Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(311, 311, driver), true, "Failed in Step 623: Validate Jennifer H's Teams and Roles page.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 111.");

        myAssert.assertAll();
    }

    @Test (priority = 112)
    public static void test112_AddSecondAdminRole() throws Exception {
        logMessage("*** Start Test 112...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 624 - Step 625: Add Second Admin Role.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiAdministratorRole(321, 321, driver), true, "Failed in Step 624 - Step 625: Add Second Admin Role.");

        logMessage("Restart ESS");
        GeneralBasic.signoutESS(driver);
        driver.close();

        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 626: Validate Directory list after add Second Admin Role.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(281, 281, driver), true, "Failed in Step 626: Validate Directory list after add Second Admin Role.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 112.");
        myAssert.assertAll();
    }

    @Test (priority = 113)
    public static void test113_ChangeMemeberRole() throws Exception {
        logMessage("*** Start Test 113...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);

        logMessage("Step 627: Validate Samuel DAVIS's banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(311, 311, driver), true, "Failed in Step 627: Validate Samuel DAVIS's banner.");

        logMessage("Step 627: Validate Samuel DAVIS's Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(331, 331, driver), true, "Failed in Step 627: Validate Samuel DAVIS's Teams and Roles page.");

        logMessage("Step 628: Change Member Role.");
        myAssert.assertEquals(GeneralBasicHigh.changeMultiMemberRole(341, 341, driver), true, "Failed in Step 628: Change Member Role.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 113.");
        myAssert.assertAll();
    }

    @Test (priority = 114)
    public static void test114_ReactiveEmployeeTerminated() throws Exception {
        logMessage("*** Start Test 114...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver);


        if (GeneralBasic.displayPage_ViaSideNavigationBar("Samuel", "Samuel", null, "DAVIS", null, "Account Settings", driver)){
            WebElement button_Activate=SystemLibrary.waitChild("//button[contains(@class,'button button--primary') and text()='Activate']", 30, 1, driver);
            if (button_Activate!=null){
                button_Activate.click();
                Thread.sleep(3000);
                GeneralBasic.waitSpinnerDisappear(120, driver);
                logMessage("Activate Button is clicked.");
            }
        }

        logMessage("Step 630_2: Validate Account Setting page after click activate button.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(151, 151, driver), true, "Failed in Step 630_2: Validate Account Setting page after clicking Activate button.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 114.");
        myAssert.assertAll();
    }

}
////////////////////// Debug here ///////////////////////









