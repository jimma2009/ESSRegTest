package TestNG;

import Lib.*;
import PageObject.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.IOException;
import java.sql.SQLException;
import java.util.concurrent.TimeUnit;

import static Lib.AutoITLib.*;
import static Lib.AutoITLib.exitMeridian;
import static Lib.GeneralBasic.*;
import static Lib.GeneralBasicHigh.*;
import static Lib.SystemLibrary.*;

public class ESSRegTestVer5 {

    private static String testSerialNo ="xxxxx";
    private static String emailDomainName ="xxx.xxx.xxx";
    
    @Test(priority = 0)
    public void test0_ScenarioPrepare() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 0 : SystemTest_ScenarioPreparation");

        //Run this before test
        ///// Temp Disabled
        //WiniumLib.generateESSTenant(testSerialNumber);

        SystemLibrary.logMessage("Terminate Any existing ChromeDriver.exe and Chrome.exe.");
        SystemLibrary.executeDOSCommand("Taskkill /IM chrome.exe /F");
        SystemLibrary.executeDOSCommand("Taskkill /IM chromedriver.exe /F");

        logMessage("Delete all mail.");
        JavaMailLib.deleteAllMail(emailDomainName);

        //////////////////////////// Delete and Restore DB  //////////////////////////
        SystemLibrary.logMessage("Start Deleting Payroll and Common DB.");
        myAssert.assertEquals(DBManage.deleteMultiDB(101, 102), true, "Failed Deleting Payroll and commond db.");

        //Step P1: Restore Payroll DB
        SystemLibrary.logMessage("Step P1: Start restoring Payroll and Common DB.");
        myAssert.assertEquals(DBManage.restoreMultiDB(101, 102), true, "Failed Restoring Payroll and Common db.");
        SystemLibrary.logMessage("End of restoring payroll DB.");
        //////

        //Assing the rights to DB after restoring.
        DBManage.sqlExecutor_Main(201, 201);
        DBManage.sqlExecutor_Main(202, 202);

        //Step P2: Update employee email address
        SystemLibrary.logMessage("Step p2: Start update email address and change email type as work email.");
        //Without update email type
        GeneralBasic.updateEmployeeEmailInSageMicropayDB(testSerialNo, emailDomainName);
        SystemLibrary.logMessage("Step p2: End of updating email address.");

        //Step P3: Remove data from staging table
        SystemLibrary.logMessage("Step P3: Remove date from staging table.");
        DBManage.sqlExecutor_Main(111, 111);

        //Step P4: Check nothing in eHR Implement

        //Step P5: Setup Super User's email
        SystemLibrary.logMessage("Step P5: Setup Admin user contact details.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);  //Launch ESS
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver); //Log on ESS as Super User

        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(11, 11, testSerialNo, emailDomainName, driver), true, "Faied in Step P5: Setup Admin user contact details.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 0: SystemTest_ScenarioPreparation.");
        myAssert.assertAll();
    }

    //must run without headless
    @Test(priority = 10011)
    public void test10011_ValidateDashboardAndAuditReport() throws InterruptedException, IOException, Exception {
        //Step 1
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10011: Login as Super user, validate dashboard and audit report.");
        SystemLibrary.logMessage("Step 1: Log in as Super User");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver); //Log on ESS as Super User

        SystemLibrary.logMessage("Step 1.2: Validate Dashboard.");
        GeneralBasic.displayDashboard(driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(31, 31, testSerialNo, emailDomainName, driver), true, "Failed validate dashboard in step 2.");

        SystemLibrary.logMessage(("Step 1.4: Access 4 Audit Report. "));
        GeneralBasic.displayDashboard(driver);

        logMessage("Step 1.4.1: Download Profile Change Audit report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(11, 11, emailDomainName, driver), true, "Failed in Step Step 1.4.1: Download Profile Change Audit report.");

        logMessage("Step 1.4.2: Download Leave Applictions Audit report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(12, 12, emailDomainName, driver), true, "Failed in Step 1.4.2: Download Leave Applictions Audit report.");

        logMessage("Step 1.4.3: Download Maintenance Audit report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(13, 13, emailDomainName, driver), true, "Failed in Step 1.4.3: Download Maintenance Audit report.");

        logMessage("Step 1.4.4: Download Activation report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(14, 14, emailDomainName, driver), true, "Failed inStep 1.4.4: Download Activation report.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test10011");
        myAssert.assertAll();
    }

    @Test (priority = 10021)
    public void test10021_ValidateDashboard() throws Exception {

        SystemLibrary.logMessage("*** Start Test 10021");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver); //Log on ESS as Super User

        GeneralBasic.displayDashboard(driver);
        driver.navigate().back();
        logMessage("Brower Back commmand is sent.");

        SystemLibrary.logMessage("Step 2: Validate Dashboard after Clicking browser Back button.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(31, 31, testSerialNo, emailDomainName, driver), true, "Failed in Step 2: Validate Dashboard after Clicking browser Back button.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10021");
        myAssert.assertAll();
    }

    @Test(priority = 10031)
    public void test10031_ValidateMenu() throws InterruptedException, IOException, Exception {
        //Step 2.3
        SystemLibrary.logMessage("*** Start Test 10031: Check Super user menu options.");
        SystemLibrary.logMessage("*** Step 3: Check menu options.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver); //Log on ESS as Super User

        logMessage("Step 3: Validate menu option.");
        myAssert.assertEquals(SystemLibraryHigh.validateTextInElement_Main(10011, 10011, PageObj_NavigationBar.topSecondNavaigationBar(driver),emailDomainName), true, "Failed in Step 3: Validate menu option.");
        myAssert.assertEquals(GeneralBasic.displayTeamsPage(driver), 1, "Fail in Step 3: Display Teams page in Step 3.");
        myAssert.assertEquals(GeneralBasic.displayLeavesForApprovalViaNavigationBar("Admin", driver), true, "Failed in Step 3: Display Leave For Approval page.");

        SystemLibrary.logMessage("Step 4: Check settings menus and pages.");
        myAssert.assertEquals(GeneralBasic.displaySettings_RolesPermissions(driver), true, "Failed in Step 4: Validate Menu - Roles and Permissions.");
        myAssert.assertEquals(GeneralBasic.displaySettings_Workflows(driver), true, "Failed in Step 4: Validate Menu - Workflows.");
        myAssert.assertEquals(GeneralBasic.displaySettings_RedirectedApprovers(driver), true, "Failed in Step 4: Validate Menu - Redirect Approval.");
        myAssert.assertEquals(GeneralBasic.displaySettings_Leave(driver), true, "Failed in Step 4: Validate Menu - Leave.");
        myAssert.assertEquals(GeneralBasic.displaySettings_Integration(driver), true, "Failed in Step 4: Validate Menu - Leave.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10031.");
        myAssert.assertAll();
    }

    @Test(priority = 10041)
    public void test10041_WebAPIKeyAndSync() throws InterruptedException, IOException, Exception {
        //Step 2.3
        SystemLibrary.logMessage("*** Start Test 10041.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver); //Log on ESS as Super User

        logMessage("Step 5: Validate Integration page.");
        myAssert.assertEquals(GeneralBasicHigh.validateIntegrationPage_Main(10021, 10021, emailDomainName, driver), true, "Faield in Step 5: Validate Integration page.");

        logMessage("Step 6: Validate WebAPI Configuration Form in Integration page.");
        myAssert.assertEquals(GeneralBasicHigh.validateIntegrationPage_WebAPIConfigForm_Main(10031, 10031, emailDomainName, driver), true, "Faield in Step 6: Validate WebAPI Configuration Form in Integration page.");

        SystemLibrary.logMessage("Step 7_1: Add new Web API Key.");
        myAssert.assertEquals(GeneralBasicHigh.addNewWebAPIConfiguration_Main(101, 101, driver), true, "Failed in Step 7_1: add New Web API Key in Step 6.");

        logMessage("Restarting ESS.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver); //Log on ESS as Super User

        logMessage("Step 7_2: Validate Integration page after adding Web API.");
        myAssert.assertEquals(GeneralBasicHigh.validateIntegrationPage_Main(10041, 10041, emailDomainName, driver), true, "Faield in Step 7_2: Validate Integration page after adding Web API.");

        logMessage("Step 8: Remove Web API Key again.");
        myAssert.assertEquals(GeneralBasicHigh.removeIntegrationAPIKey_Main(101, 101, driver), true, "Failed in Step 8: Remove Web API Key again.");

        logMessage("Refresh Integration page by displaying Dashboard first.");
        GeneralBasic.displayDashboard(driver);
        logMessage("Step 8: Validate Integration page after remove Web API.");
        myAssert.assertEquals(GeneralBasicHigh.validateIntegrationPage_Main(10021, 10021, emailDomainName, driver), true, "Faield in Step 8: Validate Integration page after remove Web API.");

        logMessage("Step 9_1: ReAdd Web API.");
        GeneralBasicHigh.addNewWebAPIConfiguration_Main(101, 101, driver);

        logMessage("Refresh Integration page by displaying Dashboard first.");
        GeneralBasic.displayDashboard(driver);
        logMessage("Step 9_2: Validate Integration page after Re-Adding Web API.");
        myAssert.assertEquals(GeneralBasicHigh.validateIntegrationPage_Main(10041, 10041, emailDomainName, driver), true, "Failed in Step 9_2: Validate Integration page after Re-Adding Web API.");

        SystemLibrary.logMessage("Step 10: Edit API configuration");
        myAssert.assertEquals(editWebAPIConfiguration_Main(102, 102, driver), true, "Failed in Step 10: Edit API configuration.");

        logMessage("Step 11 - Step 13: Sync All Data.");
        myAssert.assertEquals(GeneralBasicHigh.syncAllData_Main(102, 102, driver), true, "Failed in Step 11 - Step 13: Sync All Data.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10041.");
        myAssert.assertAll();
    }

    @Test (priority = 10051)
    public void test10051_ReSyncAllData() throws InterruptedException, IOException, Exception {
        //Step 2.3
        SystemLibrary.logMessage("*** Start Test 10051.");
        logMessage("Logon ESS as Admin.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        //Step 2.14 - 2.16
        SystemLibrary.logMessage("Step 14: Re-Edit API configuration.");
        myAssert.assertEquals(editWebAPIConfiguration_Main(103, 103, driver), true, "Failed in Step 14: Re-Edit API configuration.");

        logMessage("Step 15 - Step 16: Re-Sync All.");
        myAssert.assertEquals(GeneralBasicHigh.syncAllData_Main(103, 103, driver), true, "Failed in Step 15 - Step 16: Re-Sync All.");

        //Step 2.17
        SystemLibrary.logMessage("Step 17: Click view more button in API Log screen.");
        GeneralBasic.displaySettings_Integration(driver);
        int origianlLogCount = PageObj_Integration.getTotalLogCount(driver);

        SystemLibrary.displayElementInView(PageObj_Integration.button_ViewMore(driver), driver, 10);
        PageObj_Integration.button_ViewMore(driver).click();
        Thread.sleep(5000);
        GeneralBasic.waitSpinnerDisappear(60, driver);
        SystemLibrary.logMessage("View More button is clicked.");

        int currentLogCount = PageObj_Integration.getTotalLogCount(driver);

        int newLogCount = currentLogCount - origianlLogCount;
        SystemLibrary.logMessage(newLogCount + " lines of logs are shown.");
        myAssert.assertEquals(newLogCount, 20, "The logs is not shown as expected in Step 17.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10051.");
        myAssert.assertAll();
    }

    @Test(priority = 10061)
    public void test10061_ValidateTeamsInitialStatus() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10061.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        //Step 3.17 - 3.18
        SystemLibrary.logMessage("Step 18: Validate Teams Page.");
        myAssert.assertEquals(validateTeamTable_Main(10011, 10011, testSerialNo, emailDomainName, driver), true, "Failed in Step 18: Validate Unassigned member count.");

        SystemLibrary.logMessage("Step 19 - Step 20: Validate Unassigned Team member.");
        myAssert.assertEquals(validateTeamMembers_Main(10021, 10021, emailDomainName, driver), true, "Failed in Step 19 - Step 20: Validate Unassigned Team member.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10061.");
        myAssert.assertAll();
    }

    @Test(priority = 10071)
    public void test10071_ValidateRolesAndPermissionInitialStatus() throws IOException, InterruptedException, Exception {
        SystemLibrary.logMessage("*** Start Test 10071.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 21: Validate Roles page.");
        myAssert.assertEquals(validateMultiRolesPage(10011, 10011, emailDomainName, driver), true, "Failed in Step 21: Validate Roles Page.");

        logMessage("Step 22: Validate Administrator roles permissions.");
        myAssert.assertEquals(validatePermissionPanel_Main(10021, 10021, emailDomainName, driver), true, "Failed in Step 22: Validate Administrator roles permissions.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10071.");
        myAssert.assertAll();
    }

    @Test(priority = 10081)
    public void test10081_ConfigureAndResoreRolesPermissions() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10081.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 23- Step 24: Change and Validate Roles perssions.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(10031, 10031, driver), true, "Fail in Step 23: Change Setting to Deny.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(10032, 10032, driver), true, "Fail in Step 24: Change Maintenance to Deny.");

        SystemLibrary.logMessage("Step 25: Validate Setting menu");
        myAssert.assertEquals(GeneralBasic.displaySettings_RolesPermissions(driver), true, "Fail in Test 25: Display Setting - Role and Permission menu.");
        myAssert.assertEquals(GeneralBasic.displaySettings_Integration(driver), false, "Fail in Step 25: Display Setting - Integration Menu.");
        myAssert.assertEquals(GeneralBasic.displaySettings_Workflows(driver), false, "Fail in Step 25: Display Setting - Workflow Menu.");
        myAssert.assertEquals(GeneralBasic.displaySettings_RedirectedApprovers(driver), false, "Fail in Step 25: Display Setting - Redirect Approval Menu.");
        myAssert.assertEquals(GeneralBasic.displaySettings_Leave(driver), false, "Fail in Step 25: Display Setting - Leave Menu.");

        //Step 26 Check team page
        SystemLibrary.logMessage("Step 26: Check Team Page");
        myAssert.assertEquals(GeneralBasic.addTeam("Unassigned", driver), false, "Failed test on step 26");

        //Step 27 Restore Settings
        SystemLibrary.logMessage("Step 27: Restore Settings");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(10041, 10041, driver), true, "Failed in Step 27_1: Restore Setttngs.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(10042, 10042, driver), true, "Failed in Step 27_2: Restore Setttngs.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(10043, 10043, driver), true, "Failed in Step 27_3: Restore Setttngs.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(10044, 10044, driver), true, "Failed in Step 27_4: Restore Setttngs.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(10045, 10045, driver), true, "Failed in Step 27_5: Restore Setttngs.");

        logMessage("Step 28: Validate Roles Permissions after Resotre settings.");
        myAssert.assertEquals(validatePermissionPanel_Main(10021, 10021, emailDomainName, driver), true, "Failed in Step 28: Validate Administrator roles permissions.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 10081.");
        myAssert.assertAll();

    }

    @Test(priority = 10091)
    public void test10091_CreateTeam() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10091.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 29: Validate Teams Page. ");
        myAssert.assertEquals(validateTeamTable_Main(10011, 10011, testSerialNo, emailDomainName, driver), true, "Failed in Step 29: Validate Teams Page.");

        SystemLibrary.logMessage("Step 30: Validate Unassigned Team member.");
        myAssert.assertEquals(validateTeamMembers_Main(10021, 10021, emailDomainName, driver), true, "Failed in Step 30: Validate Unassigned Team member.");

        logMessage("Step 30 - Step 32: Add Unassinged Team. ");
        myAssert.assertEquals(GeneralBasic.addTeam("Unassigned", driver), false, "Failed in Step 30 - Step 32: Add Unassinged Team. ");

        SystemLibrary.logMessage("Step 33: Add and Validate Team Anything.");
        myAssert.assertEquals(GeneralBasic.addTeam("Team Anything", driver), true, "Failed in Step 33: Add Team Anything.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(11, 11, emailDomainName, driver), true, "Failed in Step 33: Valdiate Team members after Team Anything.");

        SystemLibrary.logMessage("Step 34: Validate Team Anything listed.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamTable_Main(21, 21, testSerialNo, emailDomainName, driver), true, "Failed in Step 34: Validate Team Anything listed.");

        SystemLibrary.logMessage("Step 35: Validate Directory ellipsis menu.");
        myAssert.assertEquals(GeneralBasic.validateEllipsisMenuInTeamDirectory("Leave history report;Leave balances report", driver), true, "Failed in Step 35: Validate Directory ellipsis menu.");

        SystemLibrary.logMessage("Step 36: Validate Unassigned ellipsis menu.");
        myAssert.assertEquals(GeneralBasic.validateEllipsisMenuInTeamUnassigned("Leave history report;Leave balances report", driver), true, "Failed in Step 36: Validate Unassigned ellipsis menu.");

        SystemLibrary.logMessage("Step 36: Validate Team Anything ellipsis menu.");
        myAssert.assertEquals(GeneralBasic.validateEllipsisMenuInTeamPage("Team Anything", "Leave history report;Leave balances report", driver), true, "Failed in Step 36: Validate Team Anything ellipsis menu.");

        SystemLibrary.logMessage("Step 37: Validate Teams / Team Anything ellipsis menu.");
        myAssert.assertEquals(GeneralBasic.validateEllipsisMenuInTeamsTeamTable("Team Anything", "Add a member;Leave history report;Leave balances report;Rename team;Delete team", driver), true, "Failed in Step 37: Validate Teams / Team Anything ellipsis menu.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10091.");
        myAssert.assertAll();

    }

    @Test(priority = 10101)
    public void test10101_RenameTeamsAndAddTeamMember() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10101");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 38: Rename to Team A.");
        myAssert.assertEquals(GeneralBasicHigh.renameTeam_Main(31, 31, driver), true, "Failed in Step 38: Rename Team to Team A.");

        SystemLibrary.logMessage("Step 39 to Step 41 : Add Member to Team.");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(41, 41, driver), true, "Failed in Step 39 to Step 41 : Add Member to Team.");

        SystemLibrary.logMessage("Step 41: Validate Teams member Table.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(41, 41, driver), true, "Failed in Step 41: Validate Teams member Table.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10101");

        myAssert.assertAll();
    }

    @Test(priority = 10121)
    public void test10121_MoveDeleteAddTeamsAndTeamMembers() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10121");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 42: Validate Member Ellipsis menu.");
        GeneralBasic.displayTeamsPage(driver);
        PageObj_Teams.getEllipsis_Teams_21("Team A", "Peter KONG", driver).click();
        Thread.sleep(2000);
        myAssert.assertEquals(GeneralBasic.validateEllipsisMenu("Move to team;Change role;Remove from team", driver), true, "Failed in Step 42: Validate Team Member Elipsis Menu.");

        SystemLibrary.logMessage("Step 43- Step 45: Change member role.");
        myAssert.assertEquals(GeneralBasicHigh.changeMultiMemberRole_ViaTeamsPage(42, 42, driver), true, "Failed in Step 43- Step 45: Change member role.");

        SystemLibrary.logMessage("Step 46 : Delete team, but cannot not deleted as expected..");
        myAssert.assertEquals(GeneralBasicHigh.deleteMultiTeam(45, 45, driver), false, "Failed in Step 46: Team should NOT be deleted as expected.");

        SystemLibrary.logMessage("Step 47 : Remove Member from Team.");
        myAssert.assertEquals(GeneralBasicHigh.removeMultiTeamMembers(50, 50, driver), true, "Failed in Step 47 : Remove Member from Team.");

        SystemLibrary.logMessage("Step 48 : Validate Team Member Table.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(55, 55, driver), true, "Failed in Step 48 : Validate Team Member Table.");

        SystemLibrary.logMessage("Step 49 - Step 50 : Cancel Delete team.");
        myAssert.assertEquals(GeneralBasicHigh.deleteMultiTeam(60, 60, driver), false, "Failed in Step 49 - Step 50 : Cancel Delete team.");

        SystemLibrary.logMessage("Step 51 - Step 54 : Delete team, then add team and team member again.");
        myAssert.assertEquals(GeneralBasicHigh.deleteMultiTeam(65, 65, driver), true, "Failed in Step 51: Delete Team.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiTeam(65, 65, driver), true, "Failed in Step 52: Add Team A.");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(65, 65, driver), true, "Failed in Step 53: Add Team Member Robind S.");

        logMessage("Step 54- Step 55: Validate Team and Team Member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(66, 66, driver), true, "Failed in test Step 54: Validate Team Members after Red-Adding.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamTable_Main(67, 67, testSerialNo, driver), true, "Failed in test Step 55: Validate Teams after Re-Adding.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10121");

        myAssert.assertAll();
    }

    @Test(priority = 10131)
    public void test10131_MoveMemberToTeamWithValidate() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10131");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        //Step 56-59: Move to Team
        SystemLibrary.logMessage("Step 56- Step 59: Move member to Team.");
        myAssert.assertEquals(GeneralBasicHigh.moveMemberToTeam_Main(71, 71, driver), true, "Failed in Step 56- Step 59: Move Team member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(72, 72, driver), true, "Failed in Step 59_1: Validate Team Member after move member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(73, 73, driver), true, "Failed in Step 59_2: Validate Team Member after move member.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10131");

        myAssert.assertAll();
    }

    @Test(priority = 10141)
    public void test10141_ValidateSidebarAndEditPreferredName() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10141");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 60- Step 61 : search Barry and vailate side Navigation.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(11, 11, driver), true, "Failed in Step 60- Step 61 : search Barry and vailate side Navigation.");

        SystemLibrary.logMessage("Step 62: Add Preferred Name.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(12, 12, driver), true, "Failed in Step 62: Add Preferred Name.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10141");
        myAssert.assertAll();
    }

    //Must run without headless
    @Test(priority = 10142)
    public void test10142_UploadUserPhoto() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10142");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 62_2: Upload Photo for Steve BARRY.");
        myAssert.assertEquals(GeneralBasicHigh.uploadUserPhoto_Main(21, 21, driver), true, "Failed in Step 62_2: Upload Photo for Steve BARRY.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10142");
        myAssert.assertAll();
    }

    @Test(priority = 10151)
    public void test10151_AddTeamsAndMembers_1() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10151.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 63: Validate Team A.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(10031, 10031, driver), true, "Failed in Step 63: Validate Team A.");

        SystemLibrary.logMessage("Step 64- Step 65: Add BARRY to Team A.");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(81, 81, driver), true, "Failed in Step 64- Step 65: Add BARRY to Team A.");

        SystemLibrary.logMessage("Step 66: Add Multi Teams.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiTeam(91, 101, driver), true, "Failed in Step 66: Add Multi Teams.");

        SystemLibrary.logMessage("Start Step 66: Add multi Members into Muli Teams. ");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(111, 111, driver), true, "Failed in Step 66 - Row 111. Add Members into Team The Boss");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(112, 112, driver), true, "Failed in Step 66 - Row 112. Add Members into Team The Boss");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(113, 113, driver), true, "Failed in Step 66 - Row 113. Add Members into Team The Boss");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(114, 114, driver), true, "Failed in Step 66 - Row 114. Add Members into Team The Boss");

        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(121, 121, driver), true, "Failed in Step 66 - Row 121. Add Members into Team B");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(122, 122, driver), true, "Failed in Step 66 - Row 122. Add Members into Team B");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(123, 123, driver), true, "Failed in Step 66 - Row 123. Add Members into Team B");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(124, 124, driver), true, "Failed in Step 66 - Row 124. Add Members into Team B");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(125, 125, driver), true, "Failed in Step 66 - Row 125. Add Members into Team B");

        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(131, 131, driver), true, "Failed in Step 66 - Row 131. Add Members into Team C");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(132, 132, driver), true, "Failed in Step 66 - Row 132. Add Members into Team C");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(133, 133, driver), true, "Failed in Step 66 - Row 133. Add Members into Team C");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(134, 134, driver), true, "Failed in Step 66 - Row 134. Add Members into Team C");


        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10151.");
        myAssert.assertAll();
    }

    @Test(priority = 10161)
    public void test10161_AddTeamsAndMembers_2() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10161.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Start Step 66: Add multi Members into Muli Teams. ");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(141, 141, driver), true, "Failed in Step 66 - Row 141. Add Members into Sub D");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(142, 142, driver), true, "Failed in Step 66 - Row 142. Add Members into Sub D");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(143, 143, driver), true, "Failed in Step 66 - Row 143. Add Members into Sub D");

        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(151, 151, driver), true, "Failed in Step 66 - Row 151. Add Members into Sub E");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(152, 152, driver), true, "Failed in Step 66 - Row 152. Add Members into Sub E");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(153, 153, driver), true, "Failed in Step 66 - Row 153. Add Members into Sub E");

        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(161, 161, driver), true, "Failed in Step 66 - Row 161. Add Members into Team F");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(162, 162, driver), true, "Failed in Step 66 - Row 162. Add Members into Team F");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(163, 163, driver), true, "Failed in Step 66 - Row 163. Add Members into Team F");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10161.");
        myAssert.assertAll();
    }

    @Test(priority = 10171)
    public void test10171_AddTeamsAndMembers_3() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10171.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Start Step 66: Add multi Members into Muli Teams. ");

        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(171, 171, driver), true, "Failed in Step 66 - Row 171. Add Members into Team G");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(172, 172, driver), true, "Failed in Step 66 - Row 172. Add Members into Team G");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(173, 173, driver), true, "Failed in Step 66 - Row 173. Add Members into Team G");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(174, 174, driver), true, "Failed in Step 66 - Row 174. Add Members into Team G");

        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(181, 181, driver), true, "Failed in Step 66 - Row 181. Add Members into Team H");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(182, 182, driver), true, "Failed in Step 66 - Row 182. Add Members into Team H");

        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(191, 191, driver), true, "Failed in Step 66 - Row 191. Add Members into Team This Team I");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(192, 192, driver), true, "Failed in Step 66 - Row 192. Add Members into Team This Team I");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10171.");
        myAssert.assertAll();
    }

    @Test(priority = 10181)
    public void test10181_AddTeamsAndMembers_4() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10181.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(201, 201, driver), true, "Failed in Step 66 - Row 201. Add Members into Team That Team J");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(202, 202, driver), true, "Failed in Step 66 - Row 202. Add Members into Team That Team J");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(203, 203, driver), true, "Failed in Step 66 - Row 203. Add Members into Team That Team J");

        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(211, 211, driver), true, "Failed in Step 66 Row 211. Add Members into Team Another Team K");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(212, 212, driver), true, "Failed in Step 66 Row 212. Add Members into Team Another Team K");

        SystemLibrary.logMessage("End of Step 66: Add Multi Members into Multi Teams.");

        SystemLibrary.logMessage("Step 67: Validate Team Table.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamTable_Main(221, 221, testSerialNo, driver), true, "Failed in Step 67: Validate Team Table after adding members.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10181.");
        myAssert.assertAll();
    }

    @Test(priority = 10191)
    public void test10191_ActivateUsersWithCancellation() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10191.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Delete all mails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 68: Validate Team Sub D.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(10041, 10041, driver), true, "Failed in Step 68: Validate Team Sub D.");

        SystemLibrary.logMessage("Step 69: Check Carming account activation status");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(11, 11, driver), true, "Failed in Step 69: Check Carming account activation status");

        SystemLibrary.logMessage("Step 70: Click User Carming Activation button.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_WithClickActionButtonOnly_ViaAdmin(10011, 10011, driver), true, "Failed in Step 70: Click User Carming Activation button.");

        logMessage("Step 70: Validate account activation status after click Activation button.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10021, 10021, driver), true, "Failed in Step 70: Validate account activation status after click Activation button.");

        logMessage("Step 71: Cancel Activation.");
        myAssert.assertEquals(GeneralBasicHigh.cancelActivateMultiUserAccount_ViaAdmin(10031, 10031, driver), true, "Failed in Step 71: Cancel Activation.");

        logMessage("Step 71: Validate account activation status after click Cancel Activation button.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10041, 10041, driver), true, "Failed in Step 70: Validate account activation status after click Cancel Activation button.");

        logMessage("Step 72: Validate activation email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10011, 10011, testSerialNo), true, "Failed in Step 72: Validate activation email.");

        logMessage("Step 73: Activate user Via Email after cancelling activation.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaEmail(10051, 10051, testSerialNo), true, "Failed in Step 73: Activate user Via Email after cancelling activation.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10191.");
        myAssert.assertAll();
    }

    @Test(priority = 10201)
    public void test10201_ActivateUserWithPasswordValidation() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10201.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 74: Activate Carming C - Validate Password Validation 1.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_PasswordValidation_ViaAdmin(10061, 10061, driver), true, "Failed in Step 74: Activate Carming C - Validate Password Validation 1.");

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 74: Activate Carming C - Validate Password Validation 2.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_PasswordValidation_ViaAdmin(10062, 10062, driver), true, "Failed in Step 74: Activate Carming C - Validate Password Validation 2.");

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 74: Activate Carming C - Validate Password Validation 3.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_PasswordValidation_ViaAdmin(10063, 10063, driver), true, "Failed in Step 74: Activate Carming C - Validate Password Validation 3.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10201.");
        myAssert.assertAll();
    }

    @Test (priority = 10211)
    public void test10211_ActivateUser() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10211.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 74 - Step 82: Activate Carming C");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(10071, 10071, testSerialNo, driver), true, "Failed in Step 74 - Step 82: Activate Carming C.");

        logMessage("Step 82: Validiate Carming C Account status.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10081, 10081, driver), true, "Failed in Step 82: Validate Carming C Account status.");

        SystemLibrary.logMessage("Step 83: Log on ESS as Carmin CUMMINGS");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(301, 301, testSerialNo, emailDomainName, driver);

        logMessage("Step 83: Validate Carming C account settting page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10091, 10091, driver), true, "Failed in Step 83: Validate Carming C Account status.");

        logMessage("Step 84: Log on as Admin and Validate Carm C account setting page again.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10101, 10101, driver), true, "Failed in Step 84: Log on as Admin and Validate Carm C account setting page again.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10211.");
        myAssert.assertAll();
    }

    @Test (priority = 10221)
    public void test10221_ValidateUserDetails() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10221.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        SystemLibrary.logMessage("Step 85: Validate User Banner");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(31, 31, driver), true, "Failed in Step 85: Validate User Banner.");

        SystemLibrary.logMessage("Step 86: Validate sidebar menu.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(41, 41, driver), true, "Failed in Step 86: Validate sidebr menu.");

        SystemLibrary.logMessage("Step 87: Validate Contact Detail page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(10001, 10001, driver), true, "Failed in Step 87: Validate Contact Detail page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10221.");
        myAssert.assertAll();

    }

    @Test (priority = 10231)
    public void test10231_EditAndValidateContactDetailDirectory() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10231.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 88: Validate Email Notification icon.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmailNotificationIconInContactDetailPage_Main(10011, 10011, driver), true, "Failed in Step 88: Validate Email Notification icon.");

        SystemLibrary.logMessage("Step 89: Edit work mobile number.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(31, 31, testSerialNo, driver), true, "Failed in Step 89: Edit Work mobule number.");

        SystemLibrary.logMessage("Step 90: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(41, 41, testSerialNo, driver), true, "Failed in Step 90: Validate Dashboard.");

        SystemLibrary.logMessage("Step 91: Validate Diretory");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(241, 241, driver), true, "Failed in Step 91: Validate Directory.");

        SystemLibrary.logMessage("Step 92: Validete Directory - Leave Tab.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembersLeaveTab_Main(251, 251, driver), true, "Failed in Step 92: Validate Directory - Leave Tab.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10231.");
        myAssert.assertAll();

    }

    @Test (priority = 10241)
    public void test10241_SearchUserViaDirectory() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        logMessage("*** Start Test 10241.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 93: Search Robin S via Directory.");
        myAssert.assertEquals(GeneralBasicHigh.searchUserAndDisplayPersonalInformationPageViaDirecotry_ViaAdmin_Main(10051, 10051, driver), true, "Failed in Step 93: Search Robin S via Directory.");

        SystemLibrary.logMessage("Step 93: Check Robin SPACEY's Banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(51, 51, driver), true, "Failed in Step 93: Check Robin SPACEY's Banner.");

        SystemLibrary.logMessage("Step 94: Validate Robin SPACEY's Side Navigation Menu.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(61, 61, driver), true, "Failed in Step 94: Validate Robin SPACEY's side Navigation Menu.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 10241.");
        myAssert.assertAll();

    }

    @Test (priority = 10251)
    public void test10251_ChangeRolePermission_Financial() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        logMessage("*** Start Test 10251.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 95: Change Admin Permission for Financial to View");
        GeneralBasicHigh.configPermissionStatus_Main(41, 41, driver);
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(43, 43, driver), true, "Failed in step 95: Change Admin Permission for Financial to View");

        SystemLibrary.logMessage("Step 96: Check SPACEY's Side Navigation Menu again amd Validate Bank Accounts.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(71, 71, driver), true, "Failed in Step 96: Check SPACEY's side Navigation Menu again.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(11, 11, driver), true, "Failed in Step 96: Validate SPACEY's Bank Accounts.");

        SystemLibrary.logMessage("Step 97: Validate 'That Team J'.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(10061, 10061, driver), true, "Failed in Step 97: Validate 'That Team J'.");

        ////////////////////////////////
        SystemLibrary.logMessage("Step 98: Validate MONTGOMERY Superannuation.");
        myAssert.assertEquals(GeneralBasicHigh.validateSuperannuation_Main(11, 11, driver), true, "Failed in Step 98: Validate MONTGOMERY Superannuation.");

        logMessage("Step 99: Validate Search Result.");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(10001, 10001, driver), true, "Failed in Step 99: Validate Search Result.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 10251.");
        myAssert.assertAll();

    }

    @Test(priority = 10261)
    public void test10261_ValidateContactAndPersonalInfoDetail() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        logMessage("*** Start Test 10261.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 100: Validate Stanley B Contact Detail.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(41, 41, driver), true, "Failed in Step 100: Validate Stanley B Contact Detail.");

        SystemLibrary.logMessage("Step 101: Validate Stanley B's Banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(81, 81, driver), true, "Failed in Step 101: Validate Stanley B's Banner.");

        SystemLibrary.logMessage("Step 102: Validate Stanley B's Leave detail.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(31, 31, driver), true, "Failed in Step 102: Validate Stanley B's Leave detail.");

        SystemLibrary.logMessage("Step 103: Select the 'Back' arrow three times.");
        logWarning("Step 103 is NOT tested.");

        SystemLibrary.logMessage("Step 104: Validate Pansy BROWN's Contact Details");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(51, 51, driver), true, "Failed in Step 104: Validate Pansy BROWN's Contact Details");

        SystemLibrary.logMessage("Step 105: Validate Pansy BROWN's Banner");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(91, 91, driver), true, "Failed in Step 105: Validate User Pansy BROWN's Banner");

        ////////////////
        SystemLibrary.logMessage("Step 106: Validate Margaret CURTIS's Contact Details.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(61, 61, driver), true, "Failed in Step 106: Validate Margaret CURTIS's Contact Details.");

        SystemLibrary.logMessage("Step 107: Validate Johnathon D's Contact Details.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(62, 62, driver), true, "Failed in Step Step 107: Validate Johnathon D's Contact Details.");

        SystemLibrary.logMessage("Step 108: Validate Young LONG's Contact Details.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(63, 63, driver), true, "Failed in Step 108: Validate Young LONG's Contact Details.");

        SystemLibrary.logMessage("Step 109: Validate Freda B's Contact Details.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(64, 64, driver), true, "Failed in Step 109: Validate Freda B's Contact Details.");

        SystemLibrary.logMessage("Step 110: Validate Peter KONG's Contact Details.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(65, 65, driver), true, "Failed in Step 110: Validate Peter KONG's Contact Details.");

        SystemLibrary.logMessage("Step 111: Validate Sharon ANDREW's Contact Details.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(66, 66, driver), true, "Failed in Step 111: Validate Sharon ANDREW's Contact Details.");

        SystemLibrary.logMessage("Step 112: Validate Victoria's Personal Information.");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(10001, 10001, driver), true, "Failed in Step 112: Validate Victoria's Personal Information.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 10261.");
        myAssert.assertAll();

    }

    @Test(priority = 10271)
    public void test10271_EditPermissionAndValidateEmployeementDetail() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        logMessage("*** Start Test 10271.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 113: Validate Tanya D's sidear menu.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(111, 111, driver), true, "Failed in Step 113: Validate Tanya D's sidear menu.");

        SystemLibrary.logMessage("Step 114: Change Roles and Permissions - Employment to View.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(51, 51, driver), true, "Failed in Step 114: Change Roles and Permissions - Employment to View.");

        SystemLibrary.logMessage("Step 115: Validate Tanya D's side Navigation Menu.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(121, 121, driver), true, "Failed in Step 111: Change Roles and Permissions - Employment to View.");

        SystemLibrary.logMessage("Step 115: Validate Tanya D's Empoyment Information.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(11, 11, driver), true, "Failed in Step 115: Validate Tanya D's Empoyment Information.");

        SystemLibrary.logMessage("Step 116: Validate Richard Z's Empoyment Information.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(12, 12, driver), true, "Failed in Step 116: Validate Richard Z's Empoyment Information.");

        SystemLibrary.logMessage("Step 117: Validate Ernie M's Empoyment Information.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(13, 13, driver), true, "Failed in Step 117: Validate Ernie M's Empoyment Information.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 10271.");
        myAssert.assertAll();

    }

    @Test(priority = 10281)
    public void test10281_ValidateUserDetail_AnthonyB() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        logMessage("*** Start Test 10281.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 118: Validate Anthony B's Banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(131, 131, driver), true, "Failed in Step 118: Validate Anthony B's Banner.");

        SystemLibrary.logMessage("Step 118: Validate Anthony B's Personal Information.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(132, 132, driver), true, "Failed in Step 118: Validate Anthony B's Personal Information.");

        SystemLibrary.logMessage("Step 119: Validate Anthony B's Contract Details.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(71, 71, driver), true, "Failed in Step 119: Validate Anthony B's Contract Details.");

        SystemLibrary.logMessage("Step 120 - Step 122: Validate Employment Details.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(21, 21, driver), true, "Failed in Step 120 - Step 122: Validate Employment Details.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 10281.");
        myAssert.assertAll();

    }

    @Test(priority = 10291)
    public void test10291_ChangeAndApprovePersonalDetail() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        logMessage("*** Start Test 10291.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 124: Validate Ace H's Banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(141, 141, driver), true, "Failed in Step 124: Validate Ace H's Banner.");

        SystemLibrary.logMessage("Step 125: Remove Christine R's Preferred name Sue.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(151, 151, driver), true, "Failed in Step 125: Remove Christine R's Preferred name Sue.");

        logMessage("Step 126: Search Su and validate search result.");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(10011, 10011, driver), true, "Failed in Step 126: Search Su and validate search result.");

        SystemLibrary.logMessage("Step 127 : validate My Approval Details screen");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(5, 5, driver), true, "Failed in Step 127: Validate My Approvals Page.");

        SystemLibrary.logMessage("Step 128 : validate Other Approval Details screen");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(11, 11, driver), true, "Failed in Step 128: validate Other Approval Details screen.");

        SystemLibrary.logMessage("Step 129: Approve all Other Approval.");
        myAssert.assertEquals(GeneralBasic.approveAllOtherApproval_ViaAdmin(driver), true, "Failed in Step 129: Approve all Other Approval.");

        logMessage("Step 129: Validate Other Approval after approval All.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(15, 15, driver), true, "Failed in Step 129: Validate Other Approval after approval All.");

        logMessage("Step 130: Search Su and validate search result.");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(10021, 10021, driver), true, "Failed in Step 130: Search Su and validate search result.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 10291.");
        myAssert.assertAll();

    }

    @Test(priority = 10301)
    public void test10301_ActivateUserMultiTimes() throws IOException, InterruptedException, Exception {
        SoftAssert myAssert = new SoftAssert();
        logMessage("*** Start Test 10301.");

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 131: Search BR and validate search result.");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(10031, 10031, driver), true, "Failed in Step 131: Search BR and validate search result.");

        SystemLibrary.logMessage("Step 132: Check Pansy BROWN's account activation status");
        //myAssert.assertEquals(GeneralBasicHigh.validateMultiAccountActivationStatus_ViaAdmin(31, 31, driver), true, "Faield in Step 132: Check Pansy BROWN's account activation status");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10111, 10111, driver), true, "Faield in Step 132: Check Pansy BROWN's account activation status");

        SystemLibrary.logMessage("Step 133: Active user account should fail as expected.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(10121, 10121, testSerialNo, driver), true, "Failed in Step 133: Activating user should fail as expected.");

        SystemLibrary.logMessage("Step 134: Add Pansy B's working email only");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(81, 81, testSerialNo, driver), true, "Failed in Step 134: Add Pansy B's working email only");

        logMessage("Step 134: Validate Pansy B's Contact Detail page after adding work email.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(10021, 10021, driver), true, "Failed in Step 134: Validate Pansy B's Contact detail page after adding work email.");

        SystemLibrary.logMessage("Step 135: Edit Pansy B's phone number");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(82, 82, testSerialNo, driver), true, "Failed in Step 135: Edit Pansy B's phone number");

        logMessage("Step 135: Validate Pansy B's Contact Detail page after adding mobile phone number.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(10031, 10031, driver), true, "Failed in Step 135: Validate Pansy B's Contact Detail page after adding phone number.");

        SystemLibrary.logMessage("Step 136: Edit Pansy B's Office number");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(83, 83, testSerialNo, driver), true, "Failed in Step 136: Edit Pansy B's office number");

        logMessage("Step 136: Validate Pansy B's Contact Detail page after adding office number.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(10041, 10041, driver), true, "Failed in Step 136: Validate Pansy B's Contact Detail page after adding office number.");

        SystemLibrary.logMessage("Step 137: Active user account should fail as expected.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(10121, 10121, testSerialNo, driver), true, "Failed in Step 137: Activating user should fail as expected.");

        SystemLibrary.logMessage("Step 138 : validate Other Approval Details screen");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(21, 21, driver), true, "Failed in Step 138: validate Other Approval Details screen.");

        logMessage("Step 139: Validate Contact Detail page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(100051, 100051, driver), true, "Failed in Step 139: Validate Contact Detail page.");

        SystemLibrary.logMessage("Step 140: Apporve changes of Contact Details.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(85, 85, testSerialNo, driver), true, "Failed in Step 140: Apporve changes of Contact Details.");

        SystemLibrary.logMessage("Step 141 - Step 147: ReActive user account.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(41, 41, testSerialNo, driver), true, "Failed in Step 141 - Step 147: ReActive user account.");

        SystemLibrary.logMessage("Step 148: Log on Pansy BROWN using incorrect password.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(311, 311, testSerialNo, driver), false, "Failed in Step 148: Log on Pansy BROWN using incorrect password.");
        logMessage("Failed log on ESS as expected.");

        //GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 10301.");
        myAssert.assertAll();

    }

    //Must run without Headless
    @Test(priority = 10311)
    public static void test10311_DownloadAndValidatePayAdvice() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10311: Download and Validate Pay Advice.");
        SoftAssert myAssert = new SoftAssert();

        SystemLibrary.logMessage("Step 149: Log on user Pansy and Validate Dashbarod.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(312, 312, testSerialNo, emailDomainName, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(51, 51, testSerialNo, emailDomainName, driver), true, "Failed in Step 149: Log on user Pansy and Validate Dashbarod.");

        SystemLibrary.logMessage("Step 150: Download and validate Pay Advice.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiPayAdviceReport_ViaDashboard(21, 21, driver), true, "Step 150: Download and Validate Pay Advice.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10311: Download and Validate Pay Advice.");

        myAssert.assertAll();
    }

    @Test(priority = 10321)
    public static void test10321_ActivateUser() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10321.");

        JavaMailLib.deleteAllMail(emailDomainName);
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 151: Validate Team G members.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(261, 261, driver), true, "Failed in Step 151: Validate Team G members.");

        SystemLibrary.logMessage("Step 152: Click Martin GREGG Activation button only.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_WithClickActionButtonOnly_ViaAdmin(10131, 10131, driver), true, "Failed in Step 152: Click User Carming Activation button only.");

        logMessage("Step 152: Validate Martin G's activation status after click Activation button.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10141, 10141, driver), true, "Failed in Step 70: Validate account activation status after click Activation button.");

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 153: Activate Carming C - Validate Password Validation 1.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_PasswordValidation_ViaAdmin(10151, 10151, driver), true, "Failed in Step 74: Activate Carming C - Validate Password Validation 1.");

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        SystemLibrary.logMessage("Step 153: Activate user Martin GREGG.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(51, 51, testSerialNo, driver), true, "Failed in Step 153: Activate user Martin GREGG.");

        SystemLibrary.logMessage("Step 154: Log on as Admin and Validate Validate Martin GREGG's account status.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10161, 10161, driver), true, "Failed in Step 154: Log on as Admin and Validate Validate Martin GREGG's account status.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10321.");
        myAssert.assertAll();
    }

    @Test(priority = 10331)
    public static void test10331_AddCarminToTeamBAndValidateTeamB() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10331.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 155 - Step 156: Add Carmin into Team B.");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(271, 271, driver), true, "Failed in Step 155 - Step 156: Add Carmin into Team B.");

        SystemLibrary.logMessage("Step 156: Validate Team B after adding.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(271, 271, driver), true, "Failed in Step 156: Validate Team B after adding.");

        SystemLibrary.logMessage("Step 157: Validate Team H.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(10071, 10071, driver), true, "Failed in Step 157: Validate Team H.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10331.");
        myAssert.assertAll();
    }

    @Test(priority = 10341)
    public static void test10341_ForgetPassword() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10341.");

        JavaMailLib.deleteAllMail(emailDomainName);
        SystemLibrary.logMessage("Step 159 - Step 165: Reset Password");
        myAssert.assertEquals(GeneralBasicHigh.forgetPassword_Main(61, 61, testSerialNo), true, "Failed in Step 159 - Step 165: Reset Password");

        SystemLibrary.logMessage("*** End of Test 10341");
        myAssert.assertAll();
    }

    @Test(priority = 10351)
    public static void test10351_ValidateUserPersonalInformationViaUserNameIcon() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10351.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        SystemLibrary.logMessage("Log on as Carmin.");
        GeneralBasicHigh.logonESSMain(321, 321, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 166: Validate dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(71, 71, testSerialNo, driver), true, "Failed in Step 166: Validate dashboard.");

        SystemLibrary.logMessage("Step 167: Validate business card.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiUserBusinessCard(81, 81, driver), true, "Failed in Step 167: Validate Business Card.");

        SystemLibrary.logMessage("Step 168: Display and Validate User Profile via User name icon");
        myAssert.assertEquals(GeneralBasic.displayPersonalInformationPage_ViaNavigationBarNameIcon(driver, "Carmin"), true, "Failed in Step 168: Display User Profile via click User name icon");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(161, 161, driver), true, "Failed in Step 168: Validate User Profile page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10351.");

        myAssert.assertAll();
    }

    @Test(priority = 10361)
    public static void test10361_ResetPassword() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        logMessage("*** Start Test 10361.");

        JavaMailLib.deleteAllMail(emailDomainName);
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        logMessage("Log on as Carmin.");
        GeneralBasicHigh.logonESSMain(321, 321, testSerialNo, emailDomainName, driver);

        logMessage("Step 169 - Step 174: Reset Password.");
        myAssert.assertEquals(GeneralBasicHigh.resetPassword_Main(71, 71, testSerialNo, driver), true, "Failed in Step 165 - Step 172: Reset Password");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 10361.");

    }

    @Test(priority = 10371)
    public static void test10361_DisableAccount() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        logMessage("*** Start Test 10371.");

        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 175: Log on as Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 175: Validate Carming C Account Detail page after reset password.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10171, 10171, driver), true, "Failed in Step 175: Validate Carming C Account Detail page after reset password.");

        SystemLibrary.logMessage("Step 176: Disable a Pansy's Account. ");
        myAssert.assertEquals(GeneralBasicHigh.disableMultiUserAccount(81, 81, driver), true, "Failed in Step 176: Disable a Pansy's Account. ");

        logMessage("Step 177: Sign out Admin.");
        GeneralBasic.signoutESS(driver);
        driver.close();

        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Step 177: Log on as Pansy with account disabled..");
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(331, 331, testSerialNo, driver), false, "Failed in Step 174: Pany should not log on as it is disabled as expected.");

        driver.close();
        SystemLibrary.logMessage("*** End of Test 26: Disable a User Accound.");
        myAssert.assertAll();


        logMessage("*** End of Test 10371.");

    }

    @Test(priority = 10381)
    public static void test10381_AcivateMultiUsers() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10381.");

        logMessage("Delete All Mails.");
        JavaMailLib.deleteAllMail(emailDomainName);
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        ////////////////////////////////////////
        boolean isActivated;
        //for(int a=107;a<=107;a++){
        for(int a=101;a<=114;a++){
            logMessage("Step 178 activate user in UserAccountSettings sheet row "+a);
            isActivated=GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(a, a, testSerialNo, driver);
            myAssert.assertEquals(isActivated, true, "Failed in Step 178: Activate User in UserAccountSettings sheet row "+a+", the first attempt.");
            if (!isActivated){
                logMessage("Acitvate the second time.");
                isActivated=GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(a, a, testSerialNo, driver);
                myAssert.assertEquals(isActivated, true, "Failed in Step 178: Activate User in UserAccountSettings sheet row "+a+", the second attempt.");
            }
        }
        //////////////////////

/*

        SystemLibrary.logMessage("Step 178 - 1: Activate User Mitchell SMART.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(101, 101, driver), true, "Failed in Step 178 - 1: Activate User Mitchell SMART.");

        SystemLibrary.logMessage("Step 178 - 2: Activate User Robert SINGLETON.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(102, 102, driver), true, "Failed in Step 178 - 2: Activate User Robert SINGLETON.");

        SystemLibrary.logMessage("Step 178 - 3: Activate User Jack FINGLE.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(103, 103, driver), true, "Failed in Step 178 - 3: Activate User Jack FINGLE.");

        SystemLibrary.logMessage("Step 178 - 4: Activate User Sue APPLEBY.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(104, 104, driver), true, "Failed in Step 178 - 4: Activate User Sue APPLEBY.");

        SystemLibrary.logMessage("Step 178 - 7: Activate User Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(105, 105, driver), true, "Failed in Step 178 - 7: Activate User Phantom FRY.");

        SystemLibrary.logMessage("Step 178 - 8: Activate User Christine RAMPLING.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(106, 106, driver), true, "Failed in Step 178 - 8: Activate User Christine RAMPLING.");

        SystemLibrary.logMessage("Step 178 - 9: Activate User Jennifer HOWE.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(107, 107, driver), true, "Failed in Step 178 - 9: Activate User Jennifer HOWE.");

        SystemLibrary.logMessage("Step 178 - 11: Activate User Ryan MAIN.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(108, 108, driver), true, "Failed in Step 178 - 11: Activate User Ryan MAIN.");

        SystemLibrary.logMessage("Step 178 - 14: Activate User Ernie MANNING.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(109, 109, driver), true, "Failed in Step 178 - 14: Activate User Ernie MANNING.");

        SystemLibrary.logMessage("Step 178 - 15: Activate User Tanya DOWNS.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(110, 110, driver), true, "Failed in Step 178 - 15: Activate User Tanya DOWNS.");

        SystemLibrary.logMessage("Step 178 - 16: Activate User Stanley BROWN.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(111, 111, driver), true, "Failed in Step 178 - 16: Activate User Stanley BROWN.");

        SystemLibrary.logMessage("Step 178 - 17: Activate User Sharon ANDREWS.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(112, 112, driver), true, "Failed in Step 178 - 17: Activate User Sharon ANDREWS.");

        SystemLibrary.logMessage("Step 178 - 19: Activate User Gregory SMITH.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(113, 113, driver), true, "Failed in Step 178 - 19: Activate User Gregory SMITH.");

        SystemLibrary.logMessage("Step 178 - 28: Activate User Young LONG.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(114, 114, driver), true, "Failed in Step 175 - 28: Activate User Young LONG.");
*/

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("Log some users before using email function.");

        SystemLibrary.logMessage("Log on ESS as Jack once.");
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(10011, 10011, testSerialNo, driver);
        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("Log on ESS as Sue once.");
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(10012, 10012, testSerialNo, driver);
        GeneralBasic.signoutESS(driver);
        driver.close();

        myAssert.assertAll();
        SystemLibrary.logMessage("*** End of Test 10381: Activate Multi Users..");
    }

    @Test (priority = 10391)
    public static void test10391_ActivateAceHARRYAndChangeNotificationEmail() throws Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10391.");

        JavaMailLib.deleteAllMail(emailDomainName);
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 179: Click Activate button in Ace HARRY Account Setting page.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_WithClickActionButtonOnly_ViaAdmin(121, 121, driver), true, "Failed in Step 179: Click Activate button inAce HARRY Account Setting page.");

        SystemLibrary.logMessage("Step 179 - Step 180: Add Ace H's Work email and office number");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(10061, 10061, testSerialNo, driver), true, "Failed in Step 179 - Step 180: Add Ace H's Work email and office number");

        logMessage("Step 181: Change Username and Email Notification permisson to Edit.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(10051, 10051, driver), true, "Failed in Step 181: Change Username Edit.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(10052, 10052, driver), true, "Failed in Step 181: Change Email Notification Edit.");

        logMessage("Step 182: Validate Ace H's Account Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10181, 10181, driver), true, "Failed in Step 182: Validate Ace H's Account Settings.");

        logMessage("Step 183: Edit default notification email via Account Setting page.");
        myAssert.assertEquals(GeneralBasicHigh.editAccountSettings_NotificationEmail_Main(10191, 10191, driver), true, "Failed in Step 183: Edit default email address.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10391.");
        myAssert.assertAll();
    }

    @Test (priority = 10401)
    public static void test10401_ActivateUserAndChangeUsername() throws Exception {
        logMessage("Start test 10401.");
        SoftAssert myAssert=new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        JavaMailLib.deleteAllMail(emailDomainName);
        SystemLibrary.logMessage("Step 184: Activate Ace HARRY.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(121, 121, testSerialNo, driver), true, "Failed in Step 184: Activate Ace HARRY.");

        logMessage("Step 185: Change Ace H's username via account setting page.");
        JavaMailLib.deleteAllMail(emailDomainName);
        myAssert.assertEquals(GeneralBasicHigh.editAccountSettings_UserName_Main(10201, 10201, testSerialNo, driver), true, "Failed in Step 183: Edit default email address.");

        logMessage("Step 186: Validate Ace's Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10021, 10021, testSerialNo), true, "Failed in Step 186: Validate Ace's Email.");

        logMessage("Step 187: Log on As ACE using new username.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(10001, 10001, testSerialNo, driver);

        logMessage("Step 187: Validate ACE's Account Setting page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10211, 10211, driver), true, "Failed in Step 187: Validate ACE's Account Setting page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10401.");
        myAssert.assertAll();
    }

    //Must run without headless
    @Test (priority = 10411)
    public static void test10411_DownloadAndValdiateActivationReport() throws Exception {
        SoftAssert myAssert=new SoftAssert();

        logMessage("Start Test 10411.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 188: Validate Activation Report.");
        GeneralBasic.displayDashboard(driver);
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(31, 31, driver), true, "Failed in Step 188_1: Validate Activation Report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(32, 32, driver), true, "Failed in Step 188_2: Validate Activation Report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(33, 33, driver), true, "Failed in Step 188_2: Validate Activation Report.");

        logMessage("Changing back Ace H's user name after step 188.");
        myAssert.assertEquals(GeneralBasicHigh.editAccountSettings_UserName_Main(10221, 10221, testSerialNo, driver), true, "Failed changing back Ace H's user name after step 187.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10411");
        myAssert.assertAll();
    }

    //old test 28
    @Test(priority = 10421)
    public static void test10421_EditAndValidateLeaveSettings() throws InterruptedException, SQLException, IOException, ClassNotFoundException, Exception {
        SoftAssert myAssert = new SoftAssert();
        SystemLibrary.logMessage("*** Start Test 10421.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 189_1: Validate Annual Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(11, 11, driver), true, "Failed in Step 189_1: Validate Annual Leave Settings.");

        SystemLibrary.logMessage("Step 189_2: Validate Long Service Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(12, 12, driver), true, "Failed in Step 189_2: Validate Long Service Leave Settings.");

        SystemLibrary.logMessage("Step 189_3: Validate Other Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(13, 13, driver), true, "Failed in Step 189_3: Validate Other Leave Settings.");

        SystemLibrary.logMessage("Step 189_4: Validate Personal Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(14, 14, driver), true, "Failed in Step 189_4: Validate Personal Leave Settings.");

        SystemLibrary.logMessage("Step 189_5: Validate Time In Lieu #2 Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(15, 15, driver), true, "Failed in Step 189_5: Validate Time In Lieu #2 Settings.");

        SystemLibrary.logMessage("Step 189_6: Validate Time In Lieu #1 Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(16, 16, driver), true, "Failed in Step 189_6: Validate Time In Liue Settings.");

        ////////////////////////
        SystemLibrary.logMessage("Step 190 - Step 192: Edit Annual Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.editSettingsLeave_Main(21, 21, driver), true, "Failed in Step 190 - Step 192: Edit Annual Leave Settings.");

        SystemLibrary.logMessage("Step 193: Edit Other Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.editSettingsLeave_Main(22, 22, driver), true, "Failed in Step 183 - Step 193 : Edit Other Leave Settings.");

        SystemLibrary.logMessage("Step 194: Edit Time In Lieu #2 Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.editSettingsLeave_Main(23, 23, driver), true, "Failed in Step 194: Edit Leave Settings.");

        ///////////////////////////////////////////////

        SystemLibrary.logMessage("Step 194_1: Validate Annual Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(10001, 10001, driver), true, "Failed in Step 194_1: Validate Annual Leave Settings.");

        SystemLibrary.logMessage("Step 194_2: Validate Long Service Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(10002, 10002, driver), true, "Failed in Step 194_2: Validate Long Service Leave Settings.");

        SystemLibrary.logMessage("Step 194_3: Validate Other Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(10003, 10003, driver), true, "Failed in Step 194_3: Validate Other Leave Settings.");

        SystemLibrary.logMessage("Step 194_4: Validate Personal Leave Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(10004, 10004, driver), true, "Failed in Step 194_4: Validate Personal Leave Settings.");

        SystemLibrary.logMessage("Step 194_5: Validate Time In Lieu #2 Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(10005, 10005, driver), true, "Failed in Step 194_5: Validate Time In Lieu #2 Settings.");

        SystemLibrary.logMessage("Step 194_6: Validate Time In Lieu #1 Settings.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(10006, 10006, driver), true, "Failed in Step 194_6: Validate Time In Liue Settings.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10421: Edit and Validate Leave Settings.");
        myAssert.assertAll();

    }

    //Must run without headless
    @Test(priority = 10431)
    public static void test10431_DownloadAndValidateLeaveBalanceReport() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10431.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 195: Download and validate Leave Balance Report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiLeaveBalancesReport(41, 41, driver), true, "Failed in Step 195: Download and validate Leave Balance Report.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10431: Download and Validate Leave Balances Report.");
        myAssert.assertAll();
    }

    @Test(priority = 10441)
    public static void test10441_ValidateLeave() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10441");

        logMessage("Delete all data in _iptblFinaliseLeaveApplication table");
        DBManage.sqlExecutor_Main(141, 141);

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Step 196: Log on as Sharson ANDREWS.");
        GeneralBasicHigh.logonESSMain(341, 341, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 196: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(91, 91, testSerialNo, driver), true, "Failed in Step 196: Validate Dashboard.");

        SystemLibrary.logMessage("Step 197: Display Leave page after clickng View More button in Dashboard.");
        GeneralBasic.displayDashboard(driver);
        driver.findElement(By.xpath("//div[@id='leave-balances-widget']//div[@class='ps-content show-content']//a[contains(text(),'View more')]")).click();
        Thread.sleep(3000);
        GeneralBasic.waitSpinnerDisappear(120, driver);
        SystemLibrary.logMessage("View more button is clicked.");
        WebElement lable_Leave=waitChild("//div[@id='pl-header']//h4[contains(text(),'Leave')]", 10, 1, driver);
        boolean isLeavePageShown=false;
        if (lable_Leave!=null) {
            isLeavePageShown=true;
            logMessage("Leave Page is shown.");
        }
        else{
            logError("Leave Page is NOT shonw.");
        }
        myAssert.assertEquals(isLeavePageShown, true, "Falied in Step 197: Display Leave page after clickng View More button in Dashboard.");

        logMessage("Step 197: Validate Leave Balance via Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10001, 10001, driver), true, "Failed in Step 197: Validate Leave Balance via Dashboard.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10441.");
        myAssert.assertAll();
    }

    //Must run without Headless
    @Test(priority = 10451)
    public static void test10451_ApplyLeave() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10451.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Log on as Sharson ANDREWS.");
        GeneralBasicHigh.logonESSMain(341, 341, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 198 - Step 200: Display and Validate Apply Leave form.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(10011, 10011, driver), true, "Failed in Step 198: Validate Apply Leave Form.");

        SystemLibrary.logMessage("Step 200: Validate Leave Reason List in Apply Leave form.");
        GeneralBasic.displayLeavePage(driver);
        PageObj_Leave.button_AddLeave(driver).click();
        Thread.sleep(3000);
        GeneralBasic.waitSpinnerDisappear(120, driver);
        logMessage("Apply for Leave button is clicked.");
        logScreenshot(driver);
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveReasonListInApplyForLeaveForm_Main(10051, 10051, driver), true, "Failed in Step 200: Validate Leave Reason List in Apply Leave form.");
        PageObj_ApplyForLeave.button_Close(driver).click();
        logMessage("Close Apply for Leave button is clicked.");

        SystemLibrary.logMessage("Step 199 - Step 205: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(71, 71, driver), true, "Failed in Step 199 - Step 205: Apply Leave.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10451.");
        myAssert.assertAll();
    }

    //Must run without headless
    @Test(priority = 10461)
    public static void test10461_ValidateLeaveLogAndAttachmentAfterApplyLeave() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10461.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Log on as Sharson ANDREWS.");
        GeneralBasicHigh.logonESSMain(341, 341, testSerialNo, emailDomainName, driver);

        logMessage("Step 205: Validate Leave Page after applying leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10031, 10031, driver), true, "Failed in Step 205: Validate Leave Page after applying leave.");

        logMessage("Step 206_1: Validate log in Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Log_Main(10041, 10041, driver), true, "Failed in Step 206_1: Validate log in Leave Page.");

        logMessage("Step 206_2: Validate Leave Attachment.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Attachment_Man(10051, 10051, driver), true, "Failed in Step 206_2: Validate Leave Attachment.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10461.");
        myAssert.assertAll();
    }

    @Test(priority = 10471)
    public static void test10471_AddMedicalConditionAndValdiateSharonAllPages() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10471.");

        SoftAssert myAssert = new SoftAssert();

        SystemLibrary.logMessage("Log on as Sharson ANDREWS.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(341, 341, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 208: Add User Medical Condition");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(171, 171, driver), true, "Failed in Step 201: Add User Medical Condition.");

        SystemLibrary.logMessage("Step 208: Validate Personal Information page.");
        myAssert.assertEquals(validatePersonalInformation_Main(10011, 10011, driver), true, "Failed in Step 208: Validate Personal Information page.");

        SystemLibrary.logMessage("Step 209_1: Validate the Contact Detail Screen.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(91, 91, driver), true, "Failed in Step 209_1: vailate Contact Details Page.");

        logMessage("Step 209_2: Validate Account Settings page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(131, 131, driver), true, "Failed in Step 209_2: Validate Account Settings page.");

        logMessage("Step 209_3: Validate Teams and Role page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(11, 11, driver), true, "Failed in Step 209_3: Validate Teams and Role page.");

        logMessage("Step 209_4: Vailate Approval Process via Teams And Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(22, 22, driver), true, "Failed in Step 209_4: Vailate Approval Process.");

        logMessage("Step 209_5: Vailate Employment page.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(10001, 10001, driver), true, "Failed in Step 209_5: Vailate Employment page.");

        logMessage("Step 209_6: Vailate Bank Account page.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(10001, 10001, driver), true, "Failed in Step 209_6: Vailate Bank Account page.");

        logMessage("Step 209_7: Vailate Superannuation page.");
        myAssert.assertEquals(GeneralBasicHigh.validateSuperannuation_Main(10001, 10001, driver), true, "Failed in Step 209_7: Vailate Superannuation page.");

        logMessage("Step 209_8_1: Validate Pay Advice page.");
        myAssert.assertEquals(GeneralBasicHigh.validatePageAdvicePaySummaryPage_Main(10001, 10001, driver), true, "Failed in Step 209_8_1: Valdiate Pay Advice Page.");

        logMessage("Step 209_8_2: Validate Pay Advice page with Expanding.");
        myAssert.assertEquals(GeneralBasicHigh.validatePageAdvicePaySummaryPage_Main(10002, 10002, driver), true, "Failed in Step 209_8_2: Valdiate Pay Advice Page with Expanding.");

        logMessage("Step 209_8_3: Validate Payment Summary page.");
        myAssert.assertEquals(GeneralBasicHigh.validatePageAdvicePaySummaryPage_Main(10011, 10011, driver), true, "Failed in Step 209_8_3: Valdiate Pay Advice Page with Expanding.");

        SystemLibrary.logMessage("Step 210: Validate Team B via Teams & Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamMembers_ViaTeamsRolesDetailsPage_Main(31, 31, driver), true, "Failed in Step 210: Validate Team B via Teams & Roles page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10471.");
        myAssert.assertAll();
    }

    @Test (priority = 10481)
    public static void test10481_ValidateEmailNotifications() throws Exception {
        logMessage("*** Start Test 10481.");
        SoftAssert myAssert=new SoftAssert();

        SystemLibrary.logMessage("step 212_1: Validate Jack FINGLE's Leave Application Submission email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10031, 10031, testSerialNo), true, "Failed in step 212_1: Validate Jack FINGLE's Leave Application Submission email content.");

        SystemLibrary.logMessage("step 212_2: Validate Jack FINGLE's Profile Change Submission email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10032, 10032, testSerialNo), true, "Failed in step 212_2: Validate Jack FINGLE's Profile Change Submission email content.");

        SystemLibrary.logMessage("step 212_3: Validate Sue APPLEBY's Leave Application Submission email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10041, 10041, testSerialNo), true, "Failed in step 212_3: Validate Sue APPLEBY's Leave Application Submission email content.");

        SystemLibrary.logMessage("step 212_4: Validate Sue APPLEBY's Profile Change Submission email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10042, 10042, testSerialNo), true, "Failed in step 212_4: Validate Sue APPLEBY's Profile Change Submission email content.");

        SystemLibrary.logMessage("step 213_1: Validate Sharon ANDREWS's Leave Application email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10051, 10051, testSerialNo), true, "Failed in step 213_1: Validate Sharon ANDREWS's Leave Application email content.");

        SystemLibrary.logMessage("step 213_2: Validate Sharon ANDREWS's Profile Change email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10052, 10052, testSerialNo), true, "Failed in step 213_2: Validate Sharon ANDREWS's Profile Change email content.");

        JavaMailLib.deleteAllMail(emailDomainName);
        logMessage("End of Test 10481.");
        myAssert.assertAll();
    }

    @Test(priority = 10491)
    public void test10491_DecllineAndApproval() throws InterruptedException, IOException, Exception {
        //Step 2.3
        SystemLibrary.logMessage("*** Start Test 10491.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver); //Log on ESS as Super User

        logMessage("Step 214: Validate Other Approval");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(10001, 10001, driver), true, "Failed in Step 214: Validate Other Approval");

        logMessage("Step 215: Decline the Medical Condition for Sharon A");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(11, 11, driver), true, "Failed in Step 215: Decline Medical Condition changes via Admin.");

        SystemLibrary.logMessage("Step 216: Approve the leave via Admin.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(21, 21, driver), true, "Failed in Step 216: Approve the leave via Admin.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10491.");
        myAssert.assertAll();
    }

    @Test (priority=10501)
    public void test10501_ValidateAllMailsAfterDeclineAndApporval() throws InterruptedException, IOException, Exception {
        //Step 2.3
        SystemLibrary.logMessage("*** Start Test 10501.");
        SoftAssert myAssert = new SoftAssert();

        SystemLibrary.logMessage("Step 217_1: Validate Jack FINGLE's Leave Application approval email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10061, 10061, testSerialNo), true, "Failed in Step 217_1: Validate Jack FINGLE's Leave Application approval email content.");

        SystemLibrary.logMessage("step 217_2: Validate Jack FINGLE's Profile Change declined email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10062, 10062, testSerialNo), true, "Failed in step 217_2: Validate Jack FINGLE's Profile Change declined email content.");

        SystemLibrary.logMessage("step 217_3: Validate Sue APPLEBY's Leave Application approval email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10071, 10071, testSerialNo), true, "Failed in step 217_3: Validate Sue APPLEBY's Leave Application approval email content.");

        SystemLibrary.logMessage("step 217_4: Validate Sue APPLEBY's Profile decline email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10072, 10072, testSerialNo), true, "Failed in step 217_4: Validate Sue APPLEBY's Profile Change decline email content.");

        SystemLibrary.logMessage("step 218_1: Validate Sharon ANDREWS's Leave request email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10081, 10081, testSerialNo), true, "Failed in step 218_1: Validate Sharon ANDREWS's Leave Application request email content.");

        SystemLibrary.logMessage("step 218_2: Validate Sharon ANDREWS's Profile Change decline email content.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10082, 10082, testSerialNo), true, "Failed in step 218_2: Validate Sharon ANDREWS's Profile Change decline email content.");

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail(emailDomainName);
        SystemLibrary.logMessage("*** End of Test 10501.");
        myAssert.assertAll();
    }

    @Test(priority = 10511)
    public static void test10511_ValidateDefaultWorkFlows() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10511: Validate Default Workflows.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 219: Validate Workflows page.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(11, 11, driver), true, "Failed in Step 219: Validate Workflows page.");

        SystemLibrary.logMessage("Step 220: Validate Workflows Profile page.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(21, 21, driver), true, "Failed in Step 220: Validate Workflows Profile page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 10511: Validate Defult Workflows.");
        myAssert.assertAll();
    }

    @Test(priority = 10521)
    public static void test10521_EditWorkFlows_Profile() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10521: Edit Workflows  - Profile change..");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 221: Edit Workflows.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(31, 31, driver), true, "Failed in Step 221: Edit Workflows.");

        SystemLibrary.logMessage("Step 222: Add an Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(41, 41, driver), true, "Failed in Step 222: Add an Exception.");

        SystemLibrary.logMessage("Step 223: Add another Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(51, 51, driver), true, "Failed in Step 223: Add another Exception.");

        SystemLibrary.logMessage("Step 224: Validate Workflow after changes.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(61, 61, driver), true, "Failed in Step 224: Validate Workflow after changes.");

        SystemLibrary.logMessage("Step 225_1: Edit Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(71, 71, driver), true, "Failed in Step 225_1: Edit Exception.");

        SystemLibrary.logMessage("Step 225_2: Edit Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(72, 72, driver), true, "Failed in Step 225_2: Edit Exception.");

        logMessage("Step 226: Add Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(81, 81, driver), true, "Failed in Step 226: Add Exception.");

        logMessage("Step 227: Add Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(82, 82, driver), true, "Failed in Step 227: Add Exception.");

        SystemLibrary.logMessage("Step 228: Validate Work flow page after changes.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(91, 91, driver), true, "Failed in Step Step 228: Validate Work flow page after changes.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 10521: Edit Workflows - Profile Change.");
        myAssert.assertAll();
    }



    //////////////////////// Debug here

    @Test (priority = 10522)
    public static void test10522_TestBackInWorkflowPage() throws Exception {
        SystemLibrary.logMessage("*** Start Test 37: Edit Workflows - Leave.");
        SoftAssert myAssert = new SoftAssert();
        int errorCounter=0;
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        GeneralBasic.displaySettings_Workflows(driver);

        String typeOfWorkflows="1";
        if (typeOfWorkflows.equals("1")) {
            PageObj_Workflows.label_ProfileChangesWorkflowDefault(driver).click();
        } else if (typeOfWorkflows.equals("2")) {
            PageObj_Workflows.label_LeaveWorkflowDefault(driver).click();
        }
        Thread.sleep(3000);
        GeneralBasic.waitSpinnerDisappear(120, driver);
        logMessage(typeOfWorkflows + " Changes Workflow is clicked.");
        logScreenshot(driver);

        driver.navigate().back();
        logMessage("Go back to Workflows main page.");
        Thread.sleep(3000);
        GeneralBasic.waitSpinnerDisappear(120, driver);
        logScreenshot(driver);

        WebElement webpanel_Workflows=SystemLibrary.waitChild("//div[@class='panel-body']", 120, 1, driver);

        String storeFileName="WorkflowsPage_SysTest_Step212.txt";
        if (webpanel_Workflows!=null){
            if (!SystemLibrary.validateTextValueInWebElementInUse(webpanel_Workflows, storeFileName, "2", "1", null, driver)) errorCounter++;
        }
        else{
            errorCounter++;
        }

        logMessage("Step 229: Bacl to Workflow main page.");
        myAssert.assertEquals(errorCounter, 0, "Failed in Step 229: Back to Workflow main page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 10522.");
        myAssert.assertAll();
    }

    @Test(priority = 10531)
    public static void test10531_EditWorkFlows_Leave() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10531: Edit Workflows - Leave.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 230: Validate Workflow - Leave 1.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(101, 101, driver), true, "Failed in Step 230: Validate Workflow - Leave 1.");

        SystemLibrary.logMessage("Step 231 - Step 233: Add Leave Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(111, 111, driver), true, "Failed in Step 224 - Step 223: Add Leave Exception.");

        SystemLibrary.logMessage("Step 234: Add Another Leave Exception.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(121, 121, driver), true, "Failed in Step 234: Add Another Leave Exception.");

        SystemLibrary.logMessage("Step 235: Validate Workflow - Leave 2.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(131, 131, driver), true, "Failed in Step 235: Validate Workflow - Leave 2.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 10531: Edit Workflows - Leave.");
        myAssert.assertAll();
    }

    //Must run without Headless
    @Test(priority = 10541)
    public static void test10541_UploadPhoto() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10541.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Before Step 236: Upload Photo for Ernie MANNING.");
        myAssert.assertEquals(GeneralBasicHigh.uploadUserPhoto_Main(10021, 10021, driver), true, "Failed in Before Step 236: Upload Photo for Ernie MANNING.");

        SystemLibrary.logMessage("Before Step 236: Upload Photo for Gregory SMITH.");
        myAssert.assertEquals(GeneralBasicHigh.uploadUserPhoto_Main(10022, 10022, driver), true, "Failed in Before Step 236: Upload Photo for Gregory SMITH.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10541.");
        myAssert.assertAll();
    }

    @Test(priority = 10551)
    public static void test10551_MoveTeamAndValidateTeamsRoles() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10551.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 236: Validate 'That Team J'");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(10081, 10081, driver), true, "Failed in Step 236: Validate 'That Team J'");

        SystemLibrary.logMessage("Step 237 - Step 241: Move Team Member.");
        myAssert.assertEquals(GeneralBasicHigh.moveMemberToTeam_Main(301, 301, driver), true, "Failed in Step 237 - Step 241: Move Team Member.");

        SystemLibrary.logMessage("Step 242: Validate SMITH's Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(41, 41, driver), true, "Failed in Step 242: Validate user Teams and Roles page.");

        SystemLibrary.logMessage("Step 243: Validate Approval Process");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(51, 51, driver), true, "Step 243: Validate Approval Process");

        SystemLibrary.logMessage("Step 244: Validate RAMPLING's Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(61, 61, driver), true, "Failed in Step 244: Validate user Teams and Roles page.");

        SystemLibrary.logMessage("Step 245: Validate Approval Process");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(71, 71, driver), true, "Step 245: Validate Approval Process");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10551.");
        myAssert.assertAll();
    }

    @Test (priority = 10561)
    public static void test10561_logonAllUsers() throws Exception {
        SystemLibrary.logMessage("*** Start log on All Users.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver;
        int a=10021;
        while (a<=10271){
            driver = GeneralBasic.launchESS(SystemLibrary.driverType);
            driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
            myAssert.assertEquals(GeneralBasicHigh.logonESSMain(a, a, testSerialNo, driver), true, "Failed log on user line "+a+".");
            GeneralBasic.signoutESS(driver);
            driver.close();

            a=a+10;
        }

        logMessage("*** End of log on All users.");
        myAssert.assertAll();
    }

    @Test(priority = 10571)
    public static void test10571_ValdiateSueALeaveBalanceInDashboardAndLeavePage() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10571.");
        logMessage("Delete all old email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Step 246: Log in as Sue APPLEBY");
        GeneralBasicHigh.logonESSMain(351, 351, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 246_1: Validate Sue A's dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10001, 10001, testSerialNo, driver), true, "Failed in Step 246_1: Validate Sue A's dashboard.");

        logMessage("Step 246_2: Validate Annual Leave balance in Sue A's Dashboard Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10001, 10001, driver), true, "Failed in Step 246_2: Validate Annual Leave balance in Sue A's Dashboard Page.");

        logMessage("Step 246_3: Validate Personal Leave balance in Sue A's Dashboard Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10002, 10002, driver), true, "Failed in Step 246_3: Validate Personal Leave balance in Sue A's Dashboard Page.");

        logMessage("Step 246_4: Validate Long Service Leave balance in Sue A's Dashboard Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10003, 10003, driver), true, "Failed in Step 246_4: Validate Long Service Leave balance in Sue A's Dashboard Page.");

        ////////////////////
        logMessage("Step 246_5: Validate Annual Leave balance in Sue A's Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10011, 10011, driver), true, "Failed in Step 246_5: Validate Annual Leave balance in Sue A's Dashboard Page.");

        logMessage("Step 246_6: Validate Personal Leave balance in Sue A's Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10012, 10012, driver), true, "Failed in Step 246_6: Validate Personal Leave balance in Sue A's Dashboard Page.");

        logMessage("Step 246_7: Validate Long Service Leave balance in Sue A's Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10013, 10013, driver), true, "Failed in Step 246_7: Validate Long Service Leave balance in Sue A's Dashboard Page.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10571.");
        myAssert.assertAll();
    }

    @Test(priority = 10581)
    public static void test10581_ChangeSueAProfile() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10581.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Log in as Sue APPLEBY");
        GeneralBasicHigh.logonESSMain(351, 351, testSerialNo, emailDomainName, driver);


        SystemLibrary.logMessage("Step 247 : Validate Sue A's Bank Accounts Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(21, 21, driver), true, "Failed in Step 247 : Validate Sue A's Bank Accounts Page.");

        SystemLibrary.logMessage("Step 248: Add Invalid BSB Bank Account.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiBankAccount(31, 31, driver), false, "Failed in Step 248: Add Invalid BSB Bank Account.");

        logMessage("Step 249: Change to Invalid BSB");
        myAssert.assertEquals(GeneralBasicHigh.addMultiBankAccount(32, 32, driver), false, "Failed in Step 249: Change to Invalid BSB");

        logMessage("Step 250: Save without mandatory item.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiBankAccount(33, 33, driver), false, "Failed in Step 250: Save without mandatory item.");

        logMessage("Step 251_1: Save Account name with apostrophes.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiBankAccount(41, 41, driver), false, "Failed in 251_1: Save Account name with apostrophes.");

        logMessage("Step 251_2: Save Account name without apostrophes.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiBankAccount(42, 42, driver), true, "Failed in Step 251_2: Save Account name without apostrophes.");

        logMessage("Step 251_3: Validate Bank Account page after Add Bank account.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(10011, 10011, driver), true, "Failed in Step 251_3: Validate Bank Account page after Add Bank account.");

        logMessage("Step 252_1: Change Sue's Surname ot SMITH.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(10031, 10031, driver), true, "Failed in Step 252_1: Change Sue's Surname ot SMITH.");

        logMessage("Step 252_2: Valdiate Personal Detail page.");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(10032, 10032, driver), true, "Failed in Step 252_2: Valdiate Personal Detail page.");

        logMessage("Step 252_3: Valiudate Banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(10033, 10033, driver), true, "Failed in Step 252_3: Valiudate Banner.");


        SystemLibrary.logMessage("Step 253: Add an invalid email.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(101, 101, testSerialNo, driver), false, "Failed in Step 253: Add an invalid email.");

        SystemLibrary.logMessage("Step 254: Add an valid email.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(111, 111, testSerialNo, driver), true, "Failed in Step 254: Add an valid email.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10581.");
        myAssert.assertAll();
    }

    @Test (priority=10591)
    public static void test10591_ValidateEmailAfterSueProfileChange() throws Exception {
        logMessage("*** Start test 10591...");
        SoftAssert myAssert=new SoftAssert();

        SystemLibrary.logMessage("Step 255_1: Validate emails with profile change - Bank Account.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10091, 10091, testSerialNo), true, "Failed in Step 255_1: Validate emails with profile change - Bank Account.");

        SystemLibrary.logMessage("Step 255_2: Validate emails with profile change - Name.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10092, 10092, testSerialNo), true, "Failed in Step 255_2: Validate emails with profile change - Name.");

        SystemLibrary.logMessage("Step 255_3: Validate Sue's emails with profile change - Personal Contacts.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10093, 10093, testSerialNo), true, "Failed in Step 255_3: Validate emails with profile change - Personal Contacts.");

        SystemLibrary.logMessage("Step 256: Validate Gregory SMITH's emails with sue's profile change - Bank Account.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10101, 10101, testSerialNo), true, "Failed in Step 256: Validate emails with profile change - Bank Account.");

        logMessage("End of test 10591.");
        myAssert.assertAll();
    }

    @Test(priority = 10601)
    public static void test10601_ValidateApprovalViaAdmin() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10601.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        logMessage("Log on as Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 257: Validate Admin My Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(10011, 10011, driver), true, "Failed in Step 257: Validate Admin My Approval.");

        SystemLibrary.logMessage("Step 258: Validate Other Approverls via Admin.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(41, 41, driver), true, "Failed in Step 258: Validate Other Approverls via Admin.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 10601.");
        myAssert.assertAll();
    }

    @Test (priority=10611)
    public static void test10611_ValidateChristineLeaveBalance() throws InterruptedException, ClassNotFoundException, SQLException, IOException, Exception {
        SystemLibrary.logMessage("*** Start Test 10611.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 259: Log on as Christine RAMPLING");
        GeneralBasicHigh.logonESSMain(361, 361, testSerialNo, emailDomainName, driver);

        logMessage("Step 259: Validate Christine RAMPLING's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10011, 10011,  testSerialNo, driver), true, "Failed in Step 259: Validate Christine RAMPLING's Dashboard.");

        logMessage("Step 260_1: Validate Annual Leave balance in Christine R's Dashboard Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10021, 10021, driver), true, "Failed in Step 260_1: Validate Annual Leave balance in Christine R's Dashboard Page.");

        logMessage("Step 260_2: Validate Personal Leave balance in Christine R's Dashboard Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10022, 10022, driver), true, "Failed in Step 260_2: Validate Personal Leave balance in Chrinstine R's Dashboard Page.");

        logMessage("Step 260_3: Validate Long Service Leave balance in Chrinstine R's Dashboard Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10023, 10023, driver), true, "Failed in Step 260_3: Validate Long Service Leave balance in Christine R's Dashboard Page.");

        logMessage("Step 260_4: Validate Time in Lieu #1 balance in Chrinstine R's Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10024, 10024, driver), true, "Failed in Step 260_4: Validate Time in Lieu #1 balance in Chrinstine R's Leave Page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("End of Test 10611.");
        myAssert.assertAll();
    }

    @Test(priority = 10621)
    public static void test10621_ChangeChristineRBankAccountOrderAndValdateEmail() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10621.");

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        logMessage("Log on as Christine RAMPLING");
        GeneralBasicHigh.logonESSMain(361, 361, testSerialNo, emailDomainName, driver);

        SystemLibrary.logMessage("Step 262: Validate All Team Members.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(311, 311, driver), true, "Failed in Step 262: Validate All Team Members.");

        SystemLibrary.logMessage("Step 263 : Validate Personal Information page..");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(191, 191, driver), true, "Failed in Step 263: Validate Personal Info.");

        SystemLibrary.logMessage("Step 264 : Validate Bank Account.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(51, 51, driver), true, "Step 264 : Validate Bank Account.");

        SystemLibrary.logMessage("Step 265: Change order of Bank Account. ");
        myAssert.assertEquals(GeneralBasicHigh.changeOrderOfBankAccount_Main(61, 61, driver), true, "Step 265: Change order of Bank Account. ");

        SystemLibrary.logMessage("Step 266: Validate Bank Account page after changing order.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(71, 71, driver), true, "Failed in Step 266: Validate Bank account after changing order.");

        ////////////////////////////////
        SystemLibrary.logMessage("Step 267: Validate Chrinstine R's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(51, 51, testSerialNo), true, "Failed in Step 267: Validate Chrinstine R's email.");

        SystemLibrary.logMessage("Step 268: Validate Gregory S's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(52, 52, testSerialNo), true, "Failed in Step 268: Validate User's email.");
        logWarning("No email is expected. Known issue. Pending fix.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10621.");
        myAssert.assertAll();
    }

    @Test(priority = 10631)
    public static void test10631_EditContactDetailAndValdiateApproval() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10631.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete All old Emails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        SystemLibrary.logMessage("Step 269: Log on as Jack FINGLE");
        GeneralBasicHigh.logonESSMain(10091, 10091, testSerialNo, driver);

        SystemLibrary.logMessage("Step 269: Validating Jack F's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10021, 10021, testSerialNo, driver), true, "Failed in Step 269: Validating Jack F's Dashboard.");

        SystemLibrary.logMessage("Step 270: Edit Middle Name.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(201, 201, driver), true, "Failed in Step 270: Edit Middle Name.");

        logMessage("Step 270: Validate Personal Detail page after change middle name.");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(10041, 10041, driver), true, "Step 270: Validate Personal Detail page after change middle name.");

        SystemLibrary.logMessage("Step 271: Edit Contact Detail - Address.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(121, 121, testSerialNo, driver), true, "Failed in Step 271: Edit Contact Detail - Address .");

        logMessage("Step 272: Valdiate Contact Page after edit Contect Detail.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(122, 122, driver), true, "Failed in Step 272: Valdiate Contact Page after edit Contect Detail.");

        SystemLibrary.logMessage("Step 273: Edit Emergecny Contact Detail.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(123, 123, testSerialNo, driver), true, "Failed in Step 273: Edit Emergecny Contact Detail.");

        logMessage("Step 273: Valdiate Contact Page after edit Emergency Contect Detail.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(124, 124, driver), true, "Failed in Step 273: Valdiate Contact Page after edit Emergency Contect Detail.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10631.");
        myAssert.assertAll();

    }

    @Test (priority = 10641)
    public static void test10641_ValidateEmailAfterEditContactDetail() throws Exception {
        logMessage("*** Start Test 10641");
        SoftAssert myAssert=new SoftAssert();

        logMessage("Step 274_1: Validate Email - Jack - Profile Change for Name.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10121, 10121, testSerialNo), true, "Failed in Step 274_1: Validate Email - Jack - Profile Change for Name.");

        logMessage("Step 274_2: Validate Email - Jack - Profile Change for Address.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10122, 10122, testSerialNo), true, "Failed in Step 274_2: Validate Email - Jack - Profile Change for Address.");

        logMessage("Step 274_3: Validate Email - Jack - Profile Change for Emergency Contacts.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10123, 10123, testSerialNo), true, "Failed in Step 274_3: Validate Email - Jack - Profile Change for Emergency Contacts.");

        logMessage("Step 275: Validate Email - Phantom F - Profile Change for Address Submition.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(62, 62, testSerialNo), true, "Failed in Step 275: Validate Email - Phantom F - Profile Change for Address Submition.");

        logMessage("Step 276: Validate Email - Mitchell S - Profile Change for Emergency Submition.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(63, 63, testSerialNo), true, "Failed in Step 276: Validate Email - Mitchell S - Profile Change for Emergency Submition.");
        logWarning("No email in Step 267 and 268. Known issue. Pending fix.");

        logMessage("End of Test 10641.");
        myAssert.assertAll();
    }

    @Test(priority = 10651)
    public static void test10651_EditMaritialStatus() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10651.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 277: Log on as Carming CUMMINGS.");
        GeneralBasicHigh.logonESSMain(381, 381, testSerialNo, emailDomainName, driver);

        logMessage("Step 277: Validate Carming C's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10031, 10031,  testSerialNo, driver), true, "Failed in Step 277: Validate Carming C's dashboard.");

        SystemLibrary.logMessage("Step 278: Validate All Team Members.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(321, 321, driver), true, "Failed in Step 278: Validate All Team Members.");

        SystemLibrary.logMessage("Step 279: Edit Marital Stataus.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(211, 211, driver), true, "Failed in Step 279: Edit Marital Status.");

        logMessage("Step 279: Valdiate Carmin C's Personal Informaiton page.");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(10051, 10051, driver),true, "Failed in Step 279: Valdiate Carmin C's Personal Informaiton page.");

        SystemLibrary.logMessage("Step 280: Validate Carmin C's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(71, 71, testSerialNo), true, "Failed in Step 280: Validate Carmin C's email.");

        logMessage("Step 281: Validate Jack FINGLE's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(72, 72, testSerialNo), true, "Failed in Step 281: Validate Jack FINGLE's email.");

        logMessage("Step 282: Validate Sue APPLEBY-SMITH's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(73, 73, testSerialNo), true, "Failed in Step 282: Validate Sue APPLEBY-SMITH's email.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10651.");
        myAssert.assertAll();

    }

    @Test(priority = 10661)
    public static void test10661_EditContactDetail_PhoneNumber() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10661.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Log on as Admin first.");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Delete existing Home Number if existing.");
        GeneralBasicHigh.editMultiContactDetails(10071, 10071, testSerialNo, driver);

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 283: Log on as Young LONG.");
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(391, 391, testSerialNo, emailDomainName, driver);

        logMessage("Step 283_1: Valdiate Young LONG's dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10041, 10041, testSerialNo, driver), true,"Failed in Step 283_1: Valdiate Young LONG's dashboard.");

        logMessage("Step 283_2: Valdiate Young LONG's dashboard - Your Manager;Membership Teams.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10042, 10042, testSerialNo, driver), false,"Failed in Step 283_2: Valdiate Young LONG's dashboard - Your Manager;Membership Teams.");
        logMessage("Validation should be failed as expected in Step 283_2.");

        logMessage("Step 284: Change Contact Detail Home mumber.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(10072, 10072, testSerialNo, driver), true, "Failed in Step 276 - Step 277: Change Contact Detail Home mumber.");

        logMessage("Step 284: Validate Contact Detail screen after changing home number.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(10073, 10073, driver), true, "Failed in Step 284: Validate Contact Detail screen after changing home number.");

        logMessage("Step 285: Add office number. ");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(10081, 10081, testSerialNo, driver), true, "Failed in Step 285: Change Contact Detail Office mumber.");

        logMessage("Step 285: Validate Contact Detail screen after changing Office number.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(10082, 10082, driver), true, "Failed in Step 285: Validate Contact Detail screen after changing Office number.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10661.");
        myAssert.assertAll();
    }

    @Test (priority = 10671)
    public static void test10671_ValidateAllEmailAfterEditContact() throws Exception {
        logMessage("Start Test 10671.");
        SoftAssert myAssert=new SoftAssert();

        SystemLibrary.logMessage("Step 286_1: Validate Young L's Personal Contact email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10131, 10131, testSerialNo), true, "Failed in Step 286_1: Validate Young L's Personal Contact email.");

        SystemLibrary.logMessage("Step 286_2: Validate Young L's Work Contact email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10132, 10132, testSerialNo), true, "Failed in Step 286_2: Validate Validate Young L's Work Contact email.");

        SystemLibrary.logMessage("Step 287: Validate Approver Jack F's Psersonal Contact email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10133, 10133, testSerialNo), true, "Failed in Step 287: Validate Validate Approver Jack F's Psersonal Contact email.");

        SystemLibrary.logMessage("Step 288: Validate Approver Sue A's Personal Contact email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10134, 10134, testSerialNo), true, "Failed in Step 288: Validate Approver Sue A's Personal Contact email.");

        SystemLibrary.logMessage("Step 289: Validate Approver Phantom F's Work Contact email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10135, 10135, testSerialNo), true, "Failed in Step 289: Validate Approver Phantom F's Work Contact email.");

        logMessage("End of Test 10671.");
        myAssert.assertAll();
    }

    @Test(priority = 10681)
    public static void test10681_EditPostalAddress() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10681.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 290: Log on as Mitchell SMART and Validate Dashboard..");
        GeneralBasicHigh.logonESSMain(401, 401, testSerialNo, emailDomainName, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(121, 121, testSerialNo, emailDomainName, driver), true, "Failed in Step 290: Validate dashboard.");

        logMessage("Step 291: Change Contact Detail Postal Address.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(141, 141, testSerialNo, emailDomainName, driver), true, "Failed in Step 291: Change Contact Detail Postal Address.");

        logMessage("Step 292: Validate Contact Detail Page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(142, 142, emailDomainName, driver), true, "Failed in Step 292: Validate Contact Detail Page.");

        SystemLibrary.logMessage("Step 293: Validate Mitchell S's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(91, 91, testSerialNo, emailDomainName), true, "Failed in Step 293: Validate Mitchell S's email.");

        SystemLibrary.logMessage("Step 294: Validate Approver Phantom F's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(92, 92, testSerialNo, emailDomainName), true, "Failed in Step 294: Validate Approver Phantom F's email.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10681.");
        myAssert.assertAll();
    }

    @Test(priority = 10691)
    public static void test10691_EditEmgergencyContact() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10691.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 295: Log on as Ernie MANNING");
        GeneralBasicHigh.logonESSMain(411, 411, testSerialNo, driver);

        logMessage("Step 295: Validate Ernie M's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(131, 131, testSerialNo, driver), true, "Failed in Step 295: Validate Ernie M's Dashboard.");

        logMessage("Step 296: Change Contact Detail - Emergeny Contact.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(151, 151, testSerialNo, driver), true, "Failed in Step 296: Change Contact Detail - Emergeny Contact.");

        logMessage("Step 296: Validate User Contact Detail page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(10091, 10091, driver), true, "Failed in Step 296: Validate User Contact Detail page.");

        SystemLibrary.logMessage("Step 297: Validate Ernie M's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(101, 101, testSerialNo), true, "Failed in Step 297: Validate Ernie M's email.");

        logMessage("Step 298: Valdiate Admin's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(102, 102, testSerialNo), true, "Failed in Step 298: Valdiate Admin's email.");


        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10691.");
        myAssert.assertAll();
    }

    @Test(priority = 10701)
    public static void test10701_ValidateApprovalItems() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10701_46.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 299: Logon as Administrator.");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 299: Validate Admin Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(141, 141, testSerialNo, driver), true, "Failed in Step 299: Validate Admin Dashboard.");

        logMessage("Step 300: Validate Workflow - Profile Change. ");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(141, 141, driver), true, "Failed in Step 300: Validate Workflow - Profile Change. ");

        logMessage("Step 301: Validate My Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(1041, 1041, driver), true, "Failed in Step 301: Validate my Approval.");

        logMessage("Step 302: Validate Other Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1042, 1042, driver), true, "Failed in Step 302: Validate Other Approval.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10701.");
        myAssert.assertAll();

    }

    @Test(priority = 10711)
    public static void test10711_ApprovaItems_ViaAdmin() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10711_47.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 303_1: Approve Young LONG's Personal Contacts changes.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(31, 31, driver), true, "Failed in Step 303_1: Approve Young LONG's Personal Contacts changes.");

        logMessage("Step 303_2: Validate Item after approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1051, 1051, driver), true, "Failed in Step 303_2: Validate Other Approval Item after approval.");

        logMessage("Step 304: Validating Young LONG's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(111, 111, testSerialNo), true, "Failed in Step 304: Validating Young L's email.");

        logMessage("Step 305: Validating Jack FINGLE's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(112, 112, testSerialNo), true, "Failed in Step 305: Validating Jack FINGLE's email.");

        logMessage("Step 306: Validating Approver Sue APPLEBY-SMITH's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(113, 113, testSerialNo), true, "Failed in Step 306: Validating Approver Sue APPLEBY-SMITH's email.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10711.");
        myAssert.assertAll();
    }

    @Test(priority = 10721)
    public static void test10721_ValidateApprovaItems() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10721_48.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        SystemLibrary.logMessage("Step 307: Log on as Mitchell SMART");
        GeneralBasicHigh.logonESSMain(421, 421, testSerialNo, driver);

        logMessage("Step 307: Validate Mitchell SMART's dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(151, 151, testSerialNo, driver), true, "Failed in Step 307: Validate Mitchell SMART's dashboard.");

        SystemLibrary.logMessage("Step 308: Validate My Approval - Profile Change via Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovals_ProfileChange_ViaDashboard_NonAdmin(101, 101, driver), true, "Faield in Step 308: Validate My Approval via Dashboard.");

        SystemLibrary.logMessage("Step 309: Validate Emergency Contact via Dashboard Profile Change.");
        GeneralBasic.displayDashboard(driver);
        PageObj_Dashboard.panel_PendingProfileApprovals(driver).click();
        Thread.sleep(3000);
        GeneralBasic.waitSpinnerDisappear(120, driver);;
        logMessage("Panel - Profile Change is clicked.");
        logScreenshot(driver);

        WebElement element = PageObj_Approvals.getApprovalLink_Main(41, 41, driver);
        if (element != null) {
            element.click();
            Thread.sleep(6000);
            GeneralBasic.waitSpinnerDisappear(120, driver);
            logMessage("Profile Linke is clicked.");
            myAssert.assertEquals(SystemLibraryHigh.validateTextInElement_Main(21, 21, PageObj_ContactDetail.table_ContactDetailsAll(driver)), true, "Faield in Step 301: Validate Emergency Contact via Dashboard Profile Change.");
        } else {
            myAssert.fail("Faield in Step 309: Validate Emergency Contact via Dashboard Profile Change.");
        }

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("End of Test 10721.");
        myAssert.assertAll();
    }

    @Test(priority = 10731)
    public static void test10731_ApprovaItems() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10731_49.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        SystemLibrary.logMessage("Log on as Mitchell SMART.");
        GeneralBasicHigh.logonESSMain(421, 421, testSerialNo, driver);

        logMessage("Step 310_1: Validate Mitchell SMART's Approvals page.");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(10021, 10021, driver), true, "Failed in Step 310_1: Validate Mitchell SMART's Approvals List Item.");

        logMessage("Step 310_2: Validate Mitchell SMART's Approvals Button status after click Pending Approval button.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(10001, 10001, driver), true, "Faield in Step 310_2: Validate Mitchell SMART's Approvals Button status after click Pending Approval button.");

        SystemLibrary.logMessage("Step 311_1: Approve Pending Item");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(51, 51, driver), true, "Faield in Step 311_: Approve Pending Item");

        SystemLibrary.logMessage("Step 312: Valiate Email.");
        logMessage("Waiting for receiving email...");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(121, 121, testSerialNo), true, "Failed in 312: Valiate Email.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 10731.");
        myAssert.assertAll();
    }

    @Test(priority = 10741)
    public static void test10741_ApprovaAllItemsViaGregoryS() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10741_50.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 313_1: Log on as Gregory S.");
        GeneralBasicHigh.logonESSMain(431, 431, testSerialNo, driver);

        SystemLibrary.logMessage("Step 313_2: Validate Gregory SMITH's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(161, 161, testSerialNo, driver), true, "Failed in Step 313_2: Validate Gregory SMITH's Dashboard.");

        SystemLibrary.logMessage("Step 314_1: Validate My Approval - Profile Change via Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovals_ProfileChange_ViaDashboard_NonAdmin(111, 111, driver), true, "Faield in Step 314_1: Validate My Approval via Dashboard.");

        SystemLibrary.logMessage("Step 314_2: Validate Gregory S's Approvals page via Navigatin bar.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovalsPage(10031, 10031, driver), true, "Failed in Step 314_2: Validate Gregory S's Approvals page via Navigatin bar.");

        SystemLibrary.logMessage("Step 315_1: Approve both approvals");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(61, 61, driver), true, "Failed in Step 315_1: Approve both approvals");

        SystemLibrary.logMessage("Step 315_2: Validate message after approve All.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovalsPage(10041, 10041, driver), true, "Failed in Step 315_2: Validate message after approve All.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 10741.");
        myAssert.assertAll();
    }

    @Test(priority = 10751)
    public static void test10751_ApprovaAllItems_ViaJackF() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10751 - 51.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        SystemLibrary.logMessage("Step 316_1: Log on as Jack FINGLE.");
        GeneralBasicHigh.logonESSMain(441, 441, testSerialNo, driver);

        logMessage("Step 316_2: Valdiate Jack FINGLE's dashbard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(171, 171, testSerialNo, driver), true, "Failed in Step 316_2: Valdiate Jack FINGLE's dashbard.");

        SystemLibrary.logMessage("Step 317: Validate My Approval - Profile Change via Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovals_ProfileChange_ViaDashboard_NonAdmin(121, 121, driver), true, "Faield in Step 317: Validate My Approval via Dashboard.");

        SystemLibrary.logMessage("Step 318_1: Approve CUMMINGS's approvals");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(71, 71, driver), true, "Failed in Step 318_1: Approve CUMMINGS's approvals");

        SystemLibrary.logMessage("Step 318_2: Validate message after approve All.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovalsPage(10051, 10051, driver), true, "Failed in Step 318_2: Validate message after approve All.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("Step 319: Validate Sue APPLEBY-SMITH's Email content.");
        logMessage("Wait for receiving email...");
        Thread.sleep(15000);
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(131, 131, testSerialNo), true, "Failed in Step 319: Validate Email content.");

        SystemLibrary.logMessage("*** End of Test 10751.");
        myAssert.assertAll();
    }

    @Test(priority = 10761)
    public static void test10761_DeclineApproval() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10761-52.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all old mails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 320: Log on As Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(181, 181, testSerialNo, driver), true, "Failed in Step 320: Log on As Admin");

        logMessage("Step 321: Validate Workflow.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(151, 151, driver), true, "Failed in Step 321: Validate Workflow.");

        logMessage("Step 322: Validate My Approvals");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(131, 131, driver), true, "Failed in Step 322: Validate My Approvals");

        logMessage("Step 323_1: Decline a Approval.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(81, 81, driver), true, "Failed in Step 323_1: Decline a Approval.");

        logMessage("Step 323_2: Validate my Approval after decline.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(141, 141, driver), true, "Failed in Step 323_2: Validate my Approval after decline.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("Step 324: Validate Ernie MANNING's Email.");
        Thread.sleep(30000);
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(141, 141, testSerialNo), true, "Failed in Step 324: Validate Ernie MANNING's Email.");

        SystemLibrary.logMessage("*** End of Test 10761.");
        myAssert.assertAll();
    }

    @Test(priority = 10771)
    public static void test10771_BackupDatabase() throws InterruptedException {
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step Test 10771-53 Step 325: Backup TNG and Payroll database.");
        myAssert.assertEquals(DBManage.backupMultiDB(201, 201), true, "Failed in Step 325_1: Backup Payroll DB.");
        myAssert.assertEquals(DBManage.backupMultiDB(202, 202), true, "Failed in Step 325_2: Backup Common DB.");

        //Temp disabled
        //myAssert.assertEquals(DBManage.backupMultiDB(203, 203), true, "Failed in Step 325_3: Backup TNG DB1.");
        //myAssert.assertEquals(DBManage.backupMultiDB(204, 204), true, "Failed in Step 325_4: Backup TNG DB2.");

        logMessage("End of test 10771.");
        myAssert.assertAll();
    }

    @Test(priority = 10781)
    public static void test10781_DownloadAndValidateAuditReport() throws Exception {
        //Must run without headless
        SystemLibrary.logMessage("*** Start Test 10781-54.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Log on As Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 326: Download and validate audit report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(51, 52, driver), true, "Failed in Step 326: Download and validate audit report.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 10781.");
        myAssert.assertAll();
    }

    ///////////////////////////////////
    @Test(priority = 10791)
    public static void test10791_ValidateGridInImplementEHRviaMicropay() throws Exception {
        SoftAssert myAssert=new SoftAssert();
        logMessage("Start Test 10791-55.");

        logMessage("Step 327: Validate Grid List in Implement eHR via Sage Micropay.");

        AutoITLibHigh.logonMeridian_Main(101, 101);
        myAssert.assertEquals(saveGridInImplementEHRScreen_Main(10061, 10061), true, "Failed in Step 327: Validate Grid List in Implement eHR via Sage Micropay.");
        exitMeridian();
        logMessage("End of Test 10791.");
        myAssert.assertAll();
    }

    @Test(priority = 10801)
    public static void test10801_ValidateEHRPreImplemntationReportviaMicropay() throws Exception {
        SoftAssert myAssert=new SoftAssert();
        logMessage("Start Test 10801.");

        logMessage("Step 328: Validate eHR Pre-Imple-mentation Report in Implement eHR screen via Sage Micropay.");

        AutoITLibHigh.logonMeridian_Main(101, 101);
        myAssert.assertEquals(generateEHRPReImpReport_Main(10071, 10071), true, "Failed in Step 328: Validate eHR Pre-Imple-mentation Report in Implement eHR screen via Sage Micropay.");
        exitMeridian();
        logMessage("End of Test 10791.");
        myAssert.assertAll();

        logMessage("End of Test 10801.");
        myAssert.assertAll();
    }

    @Test(priority = 10811)
    public static void test10811_InImplementEHRviaMicropay() throws Exception {
        SoftAssert myAssert=new SoftAssert();
        logMessage("Start Test 10811.");

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 329_1: Implement eHR via Sage Micropay the 1st time.");
        myAssert.assertEquals(AutoITLib.implementEHR(), true, "Failed in Step 329_1: Implement eHR via Sage Micropay the ist time.");
        close_ImplementHRScreen();
        AutoITLib.exitMeridian();

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 329_2 Implement eHR via Sage Micropay the 2nd time.");
        myAssert.assertEquals(AutoITLib.implementEHR(), true, "Failed in Step 329_2: Implement eHR via Sage Micropay the ist time.");
        close_ImplementHRScreen();
        AutoITLib.exitMeridian();

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 330: Validate Grid List in Implement eHR via Sage Micropay after implemanting eHR.");
        myAssert.assertEquals(saveGridInImplementEHRScreen_Main(10081, 10081), false, "Failed in Step 330: Validate Grid List in Implement eHR via Sage Micropay.");
        exitMeridian();

        logMessage("End of Test 10811.");
        myAssert.assertAll();
    }

    @Test(priority = 10821)
    public static void test10821_ValidateEmployeeDetailReportViaMicropay() throws Exception {
        SoftAssert myAssert=new SoftAssert();
        logMessage("Start Test 10821.");

        logMessage("Step 331: Validate Employee Detail Report via Sage Micropay.");
        AutoITLibHigh.logonMeridian_Main(101, 101);
        myAssert.assertEquals(AutoITLibHigh.print_EmployeeDetailsReport_Main(10091, 10091), true, "Failed in Step 331: Validate Employee Detail Report via Sage Micropay.");

        exitMeridian();
        logMessage("End of Test 10821.");
        myAssert.assertAll();
    }
    /////////////

    @Test(priority = 10831)
    public static void test10831_EditApproveMedicalConditionAndValidateAllEmails() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10831_56.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 332_1: Log on As Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 332_2: Validate Admin Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10051, 10051, testSerialNo, driver), true, "Failed in Step 332_2: Validate Admin Dashboard.");

        logMessage("Step 333. Validate Other approval");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(10061, 10061, driver), true, "Failed in Step 333. Validate Other approval");

        logMessage("Step 334: Add Medical Condition for Sharon ANDREWS");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(221, 221, driver), true, "Failed in Step 334: Add Medical Condition for Sharon ANDREWS");

        logMessage("Step 335: Approve Medical Condition changes.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiPersonalInformationChanges(222, 222, driver), true, "Failed in Step 335: Approve Medical Condition changes.");

        logMessage("Validating All emails.");

        logMessage("Step 336_1: Validate Sharon's Porfile Change Submission email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10141, 10141, testSerialNo), true, "Failed in Step 336_1: Validate Sharon's Porfile Change Submission email.");

        logMessage("Step 336_2: Validate Sharon's Profile Change Request email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10142, 10142, testSerialNo), true, "Failed in Step 336_2: Validate Sharon's Profile Change Request email.");

        logMessage("Step 337_1: Validate Sue's Porfile Change Submission email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10151, 10151, testSerialNo), true, "Failed in Step 337_1: Validate Sue's Porfile Change Submission email.");

        logMessage("Step 337_2: Validate Sue's Profile Change Request email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10152, 10152, testSerialNo), true, "Failed in Step 337_2: Validate Sue's Profile Change Request email.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10831.");
        myAssert.assertAll();
    }

    @Test(priority = 10841)
    public static void test10841_ChangeUserNotificationEmail() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10841.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 338_1: Change Sue A's notification email form work to personal.");
        myAssert.assertEquals(GeneralBasicHigh.editAccountSettings_NotificationEmail_Main(10231, 10231, driver), true, "Failed in Step 338_1: Cahnge Sue A's notification email form work to personal.");

        logMessage("Step 338_2: Validate Sue A's Account Settings page after changing notification email.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(10232, 10232, driver), true, "Failed in Step 338_2: Validate Sue A's Account Settings page after changing notification email.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10841.");
        myAssert.assertAll();
    }


    @Test(priority = 10851)
    public static void test10851_EditMedicalCondition() throws Exception {
        SystemLibrary.logMessage("*** Start Test 10851_57.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 339_1: Log on As Sharon A");
        GeneralBasicHigh.logonESSMain(451, 451, testSerialNo, driver);

        logMessage("Step 339_2: Add Medical Condition for Sharon ANDREWS");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(231, 231, driver), true, "Failed in Step Step 339_2: Add Medical Condition for Sharon ANDREWS");

        logMessage("Step 339_3: Validate Personal Detail pager after chagning medical condition.");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(10061, 10061, driver), true, "Failed in Step 339_3: Validate Personal Detail pager after chagning medical condition.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("End of Test 10851.");
    }

    @Test(priority = 10861)
    public static void test10861_TestRedirectApprovals() throws Exception {
        logMessage("Start test 10861_58 - Test Redirect Approvals.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 340_1: Log on As Jack FINGLE.");
        GeneralBasicHigh.logonESSMain(461, 461, testSerialNo, driver);

        logMessage("Step 340_2: Validate Jack F's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10061, 10061, testSerialNo, driver), true, "Failed in Step 340_2: Validate Jack F's Dashboard.");

        logMessage("Step 341: Validate Approvals.");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(10071, 10071, driver), true, "Failed in Step 341: Validate Approvals.");

        logMessage("Step 342: Validate Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10001, 10001, driver), true, "Failed in Step 342: Validate Teams and Roles page.");

        logMessage("Step 343: Validate Ellipsis menu in Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_EllipsisMenInTeamsRolesDetailsPage_Main_OLD(10011, 10011, driver), true, "Failed in Step 343: Validate Ellipsis menu in Teams and Roles page.");

        logMessage("Step 344: Valdiate Message in Add Redirect Approval form.");
        //myAssert.assertEquals(GeneralBasicHigh.valdiateMultiRedirectApprovalsForm(10021, 10021, driver), true, "Failed in Step 344: Valdiate Message in Add Redirect Approval form.");

        logMessage("Step 345: Validate Message in Add Redirect Approvals Form using FINGLE.");
        myAssert.assertEquals(GeneralBasicHigh.valdiateMultiRedirectApprovalsForm(10022, 10022, driver), true, "Failed in Step 345: Validate Message in Add Redirect Approvals Form using FINGLE.");

        logMessage("Step 346: Validate Message in Add Redirect Approvals Form using DOWNS.");
        myAssert.assertEquals(GeneralBasicHigh.valdiateMultiRedirectApprovalsForm(10023, 10023, driver), true, "Failed in Step 346: Validate Message in Add Redirect Approvals Form using DOWNS.");

        logMessage("Step 347 - Step 348: Add Redirect Approvals");
        myAssert.assertEquals(GeneralBasicHigh.addRedirectApprovals_Main(102, 102, driver), true, "Failed in Step 347 - Step 348: Add Redirect Approvals");

        logMessage("Step 349: Validate Redirect Approval menu in Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validateRedirectApprovalsMenu_Main(10031, 10031, driver), true, "Failed in Step 349: Validate Redirect Approval menu in Teams and Roles page.");

        logMessage("Step 350: Remove Redirect Approvals");
        myAssert.assertEquals(GeneralBasicHigh.removeRedirectApprovals_Main(103, 103, driver), true, "Failed in Step 350: Remove Redirect Approvals");

        logMessage("Step 351: Validate Teams and Roles page after remove Redirect Approvals.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10041, 10041, driver), true, "Failed in Step 351: Validate Teams and Roles page after remove Redirect Approvals.");


        logMessage("Step 352: Validate Approval Process in Teams & Toles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(111, 111, driver), true, "Failed in Step 352: Validate Approval Process in Teams & Toles page.");

        logMessage("Step 353: Add Redirect Approvals again.");
        myAssert.assertEquals(GeneralBasicHigh.addRedirectApprovals_Main(121, 121, driver), true, "Failed in Step 353: Add Redirect Approvals again.");

        logMessage("Step 354: Validate Ellipsis menu in Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_EllipsisMenInTeamsRolesDetailsPage_Main(10051, 10051, driver), true, "Failed in Step 354: Validate Ellipsis menu in Teams and Roles page.");

        logMessage("Step 355: Validate Approval Process in Teams & Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(122, 122, driver), true, "Failed in Step 355: Validate Approval Process in Teams & Roles page.");

        logMessage("Step 356: Validate Approvals All");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(161, 161, driver), true, "Failed in 356: Validate Approvals All");

        ///////////////////////////////
        logMessage("Step 357: Validate Sue APPLEBY-SMITH's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10161, 10161, testSerialNo), true, "Failed in Step 357: Validate Sue APPLEBY-SMITH's email.");

        logMessage("Step 358: Validate Jack's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10171, 10171, testSerialNo), true, "Failed in Step 358: Validate email for Jack FINGLE");

        logMessage("Step 359: Validate Tanya DOWNS' email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10172, 10172, testSerialNo), true, "Failed in Step 359: Validate email for Tanya DOWNS");
        //////////////////////////

        GeneralBasic.signoutESS(driver);
        driver.close();

        SystemLibrary.logMessage("*** End of Test 10861.");
        myAssert.assertAll();
    }

    @Test(priority = 10871)
    public static void test10871_ApproveMedicalConditionChange() throws Exception {
        logMessage("Start Test 10871_59.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 360_1: log on as Tanya DOWNS.");
        GeneralBasicHigh.logonESSMain(471, 471, testSerialNo, driver);

        logMessage("Step 360_2: Valdiate Tanya DOWNS's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(201, 201, testSerialNo, driver), true, "Failed in Step 360_2: Valdiate Tanya DOWNS's Dashboard.");

        logMessage("Step 361: Validate Approvals via Dashboard");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiApprovals_ProfileChange_ViaDashboard_NonAdmin(171, 171, driver), true, "Failed in Step 361: Validate Approvals via Dashboard");

        /////////////////////////
        logMessage("Step 362: Validate Business card via Dashboard - > Approvals items");

        WebElement element = PageObj_Approvals.getApprovalLink_Main(91, 91, driver);
        if (element != null) {
            element.click();
            Thread.sleep(3000);
            GeneralBasic.waitSpinnerDisappear(120, driver);

            WebElement businessCard = SystemLibrary.waitChild("//div[@class='light-overlay']", 4, 1, driver);
            if (businessCard != null) {
                myAssert.assertEquals(SystemLibraryHigh.validateTextInElement_Main(51, 51, businessCard), true, "Faield in Step 362: Validate Business card via Dashboard - > Approvals items");
            }

        } else {
            myAssert.fail("Faield in Faield in Step 362: Validate Business card via Dashboard - > Approvals items");
        }

        //////
        logMessage("Step 363: Back to last page.");
        driver.navigate().back();

        logMessage("Step 364_1: Approve the Medical Conditin change.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(101, 101, driver), true, "Failed in Step 364_1: Approve the Medical Conditin change.");

        logMessage("Step 364: Validate Approval Item after approve.");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(181, 181, driver), true, "Failed in Step 364: Validate Approval Item after approve.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10871.");
        myAssert.assertAll();
    }

    @Test(priority = 10881)
    public static void test10881_ValidateMedicalConditionAndEmail() throws Exception {
        logMessage("Start Test 10881_60.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 365_1: log on as Sharon ANDREWS.");
        GeneralBasicHigh.logonESSMain(481, 481, testSerialNo, driver);

        logMessage("Step 365_2: Validate Medical Condition.");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(241, 241, driver), true, "Faied in Step 365_2: Validate Medical Condition.");

        logMessage("Step 366: Delete Medical Condition.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(251, 251, driver), true, "Failed in Step 366: Delete Medical Condition.");

        logMessage("Step 366: Validate Medical Condition after deleting.");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(261, 261, driver), true, "Faied in Step 366: Validate Medical Condition after deleting.");

        logMessage("Step 367: Validate email for Tanya DOWNS");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(171, 171, testSerialNo), true, "Failed in Step 367: Validate email for Tanya DOWNS.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10881.");
        myAssert.assertAll();
    }

    @Test(priority = 10891)
    public static void test10891_DeclineMedicalChanges() throws Exception {
        logMessage("*** Start Test 10891_61.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 369: log on as Tanya DOWNS ANDREWS.");
        GeneralBasicHigh.logonESSMain(491, 491, testSerialNo, driver);
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(211, 211, testSerialNo, driver), true, "Failed in Step 369: Validate Dashboard.");

        logMessage("Step 370: Validate Approvals.");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(191, 191, driver), true, "Failed in Step 370: Validate Approvals.");

        logMessage("Step 371: Decline Medical Changes without comment.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(111, 111, driver), true, "Failed in Step 371: Decline Medical Changes without comment.");

        logMessage("Step 372: Validate Sue A's Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10181, 10181, testSerialNo), true, "Failed in Step 372: Validate Sue A's Email.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10891.");
        myAssert.assertAll();

    }

    @Test(priority = 10901)
    public static void test10901_RedirectApproval_2() throws Exception {
        logMessage("*** Start Test 10901_62.");

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Delete all emails.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 373: log on as Admin.");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 373: Validate Teams and Roles for Gregory SMITH");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(131, 131, driver), true, "Failed in Step 373: Validate Teams and Roles for Gregory SMITH");

        logMessage("Step 374: Validate Ellipsis in Teams & Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_EllipsisMenInTeamsRolesDetailsPage_Main(10061, 10061, driver), true, "Failed in Step 374: Validate Ellipsis in Teams & Roles page.");

        logMessage("Step 375_1: Add Redirect Approver.");
        myAssert.assertEquals(GeneralBasicHigh.addRedirectApprovals_Main(151, 151, driver), true, "Failed in Step 375_1: Add Redirect Approver.");

        logMessage("Step 375_2: Validate Gregory S's Teams adn Roles page after add redirect Approver.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10071, 10071, driver), true, "Failed in Step 375_2: Validate Gregory S's Teams adn Roles page after add redirect Approver.");

        logMessage("Step 376: Valdiate Ernie M's Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10081, 10081, driver), true, "Failed in Step 376: Valdiate Ernie M's Teams and Roles page.");

        logMessage("Step 377: Validate Gregory S's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(191, 191, testSerialNo), true, "Failed in Step 377: Validate Gregory S's email.");

        logMessage("Step 378: Validate Ernie MANNING's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(192, 192, testSerialNo), true, "Failed in Step 378: Validate Ernie MANNING's email.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10901.");
        myAssert.assertAll();
    }

    @Test(priority = 10911)
    public static void test10911_ValidateLinkInTeamPageAndSidebarAccessRight() throws Exception {
        logMessage("*** Start Test 10911_63.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 379: log on as Mitchell SMART .");
        GeneralBasicHigh.logonESSMain(501, 501, testSerialNo, driver);

        logMessage("Step 379: Validate Team page.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamTable_Main(331, 331, testSerialNo, driver), true, "Failed in Step 379: Validate Team Page.");

        logMessage("Step 380: Check Unassigned without link.");
        WebElement unassignedItem = SystemLibrary.waitChild("//span[text()='Unassigned']", 2, 1, driver);
        boolean isShown = false;
        if (unassignedItem != null) {
            isShown = true;
        }
        myAssert.assertEquals(isShown, true, "Failed in Step 380: Check Unassigned without link.");

        logMessage("Step 381: Select FINGLE from Team B");
        GeneralBasic.displayTeamsPage(driver);
        WebElement useItem = GeneralBasic.selectUserFromTeamPage("Team B", "Jack", null, "FINGLE", null, driver);
        useItem.click();
        logMessage("User is clicked.");
        String userFullName = GeneralBasic.getUserFullname("Jack", null, "FINGLE", null);
        Thread.sleep(3000);
        GeneralBasic.waitSpinnerDisappear(120, driver);
        logMessage("Screenshot after click user.");
        logScreenshot(driver);
        WebElement nameLable = SystemLibrary.waitChild("//h3[@class='bc-name' and text()='" + userFullName + "']", 5, 1, driver);
        isShown = false;
        if (nameLable != null) {
            isShown = true;
        }
        myAssert.assertEquals(isShown, true, "Failed in step 381: Select FINGLE from Team B in Team Page.");

        logMessage("Step 382: Validate Jack F's Sidebar Menu.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(10071, 10071, driver), true, "Failed in Step 382: Validate Jack F's Sidebar Menu.");

        logMessage("Step 383: Valdiate Jack F's Contact Details page without Edit Function.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(161, 161, testSerialNo, driver), false, "Failed in Step 383: Valdiate Jack F's Contact Details page without Edit Function.");
        logMessage("Cannot edit as expected.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        SystemLibrary.logMessage("*** End of Test 10911.");

        myAssert.assertAll();
    }

    @Test(priority = 10921)
    public static void test10921_EditManagerRolesAndPermission() throws Exception {
        logMessage("*** Start Test 10921_65.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 384: Validate Admin's Role and Permission page.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(61, 61, driver), true, "Failed in Step 384: Validate Admin' Role and Permission page.");

        logMessage("Step 385_1: Change Manager's Roles and Permissions");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(71, 71, driver), true, "Failed in Step 385_1: Change Manager's Roles and Permissions");

        logMessage("Step 385_2: Change Manager's Roles and Permissions");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatus_Main(72, 72, driver), true, "Failed in Step 385_2: Change Manager's Roles and Permissions");

        logMessage("Step 385_3: Validate Manager's Roles and Permissions");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(73, 73, driver), true, "Failed in Step 385_3: Validate Manager's Roles and Permissions");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 10921.");
        myAssert.assertAll();
    }

    @Test(priority = 10931)
    public static void test10931_EditAndValidateContactEmploymentDetail() throws Exception {
        logMessage("*** Start Test 10931_66.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 386: Logon as Mitchell SMART.");
        GeneralBasicHigh.logonESSMain(501, 501, testSerialNo, driver);

        logMessage("Step 386: Validate FINGLE's Empoloyemment page.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(10011, 10011, driver), true, "Faield in Step 386_1: Validate Empoloyemment page.");

        /*
        WebElement checkIcon = SystemLibrary.waitChild("//i[@class='icon-checkmark']", 2, 1, driver);
        boolean isShown = false;
        if (checkIcon != null) isShown = true;
        myAssert.assertEquals(isShown, false, "Faield in Step 386_2: Validate Empoloyemment page.");
        logMessage("Tax detail is not visible, different from testcase.");
        */

        logMessage("Step 387: Edit Jack F's Contact Detail page.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(171, 171, testSerialNo, driver), true, "Failed in Step 387: Edit Jack F's Contact Detail.");

        logMessage("Step 388: Valdiate Jack F's Contact Detals page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(10101, 10101, driver), true, "Failed in Step 388: Valdiate Jack F's Contact Detals page.");

        logMessage("Wait for email");

        logMessage("Step 389: Validate Jack FINGLE's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(201, 201, testSerialNo), true, "Step 389: Validate Jack FINGLE's email.");

        logMessage("Step 390: Validate Mitchell S's Team and Roles Page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10091, 10091, driver), true, "Failed in Step 390: Validate Mitchell S's Team and Roles Page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 10931.");
        myAssert.assertAll();
    }

    @Test(priority = 10941)
    public static void test10941_AddRedirectApprovals() throws Exception {
        logMessage("*** Start Test 10941_67.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Logon as Mitchell SMART.");
        GeneralBasicHigh.logonESSMain(501, 501, testSerialNo, driver);

        logMessage("Step 391: Redirect Approval.");
        myAssert.assertEquals(GeneralBasicHigh.addRedirectApprovals_Main(171, 171, driver), true, "Faield in Step 391: Redirect Approval.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 10941.");
        myAssert.assertAll();
    }

    @Test(priority = 10951)
    public static void test10951_EditBankDetails() throws Exception {
        logMessage("*** Start Test 10951_68.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 392: Logon as Jack FINGLE.");
        GeneralBasicHigh.logonESSMain(461, 461, testSerialNo, driver);

        logMessage("Step 392_1: Validate Jack F's bank account");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(81, 81, driver), true, "Failed in Step 392_1: Validate Jack F's bank account");

        logMessage("Step 392_2: Valdiate Ellipsis Menu in Jack F's Bank Accounts page.");
        myAssert.assertEquals(GeneralBasicHigh.validateEllipsisMenuInBankAccountsPage_Main(82, 82, driver), true, "Failed in Step 392_2: Valdiate Ellipsis Menu in Jack F's Bank Accounts page.");

        logMessage("Step 393 - Step 394: Edit Bank Account and validate pending approval message..");
        myAssert.assertEquals(GeneralBasicHigh.editMultiBankAccount(91, 91, driver), true, "Failed in Step 393: Edit Bank Account.");
        myAssert.assertEquals(GeneralBasicHigh.validateBankAccounts_Main(92, 92, driver), true, "Failed in Step 394: Validate Pending Approval message in Bank Account screen.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 10951.");
        myAssert.assertAll();
    }

    @Test(priority = 10961)
    public static void test10961_DeleteEmergencyContact() throws Exception {
        logMessage("*** Start Test 10961_69.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Logon as Jack FINGLE.");
        GeneralBasicHigh.logonESSMain(461, 461, testSerialNo, driver);

        logMessage("Step 395_1: Delete Emergency Contact.");
        myAssert.assertEquals(GeneralBasicHigh.deleteMultiContactDetails(181, 181, testSerialNo, driver), true, "Failed in Step 395_1: Delete Emergency Contact.");

        logMessage("Step 395_2: Validte Contact Details");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(182, 182, driver), true, "Failed in Step 395_2: Validte Contact Details");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 10961.");
        myAssert.assertAll();
    }

    @Test(priority = 10971)
    public static void test10971_DeclineAllChanges() throws Exception {
        logMessage("*** Start Test 10971_70.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 396_1: Logon as Admin.");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 396_2: Validate Admin's Other Approvals.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(201, 201, driver), true, "Failed in Step 396_2: Validate Admin's Other Approval.");

        logMessage("Step 397_1: Decline all changes.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(121, 121, driver), true, "Failed in Step 387: Decline all changes.");

        logMessage("Step 397_2: Valdiate Admin's Other Approvals after Decline all.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(10081, 10081, driver), true, "Failed in Step 397_2: Valdiate Admin's Other Approvals after Decline all.");

        /////////////////
        logMessage("Step 398_1: Validate Jack F's Email for Emergency Contact.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10191, 10191, testSerialNo), true, "Failed in Step 398_1: Validate Jack F's Email for Emergency Contact.");

        logMessage("Step 398_2: Valdiate Jack F's Email for Bank Account.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10192, 10192, testSerialNo), true, "Failed in Step 398_2: Valdiate Jack F's Email for Bank Account.");
        /////

        logMessage("Step 399: Validate Redirected Approvers.");
        myAssert.assertEquals(GeneralBasicHigh.validate_RedirectedApprovers_Main_ViaAdmin(10001, 10001, driver), true, "Failed in Step 389: Validate Redirected Approvers.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 10971.");
        myAssert.assertAll();
    }

    @Test(priority = 10981)
    public static void test10981_CheckTerminatedEmployee_1() throws Exception {
        logMessage("*** Start Test 10981_71.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step: Logon as Admin. validate Search result of Ryan MAIN");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 400: Validate Search result of Ryan MAIN");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(11, 11, driver), true, "Faield in Step 400: Validate Search result of Ryan MAIN");

        logMessage("Step 401: Validate Ryan MAIN's banner");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(291, 291, driver), true, "Failed in Step 401: Validate Ryan MAIN's banner");

        logMessage("Step 402: Validate Rayn MAIN's Employment page");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(41, 41, driver), true, "Failed in Step 402: Validate Rayn MAIN's Employment page");

        logMessage("Step 403: Valiate Team B.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(341, 341, driver), true, "Failed in Step 403: Valiate Team B.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 10981.");
        myAssert.assertAll();
    }

    @Test(priority = 10991)
    public static void test10991_CheckTerminatedEmployee_2() throws Exception {
        logMessage("*** Start Test 10991_72.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 404: Logon as Jack FINGLE..");
        GeneralBasicHigh.logonESSMain(461, 461, testSerialNo, driver);

        logMessage("Step 404: Search for Ryan MAIN");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(21, 21, driver), true, "Failed in Step 404: Search for Ryan MAIN");

        logMessage("Step 405_1: Validate Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(181, 181, driver), true, "Failed in Step 405_1: Validate Teams and Roles page.");

        logMessage("Step 405_2: Validate Team B.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(351, 351, driver), true, "Failed in Step 405_2: Valiate Team B.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 10991.");
        myAssert.assertAll();
    }

    @Test(priority = 11001)
    public static void test11001_CheckTerminatedEmployee_3() throws Exception {
        logMessage("*** Start Test 11001_73.");
        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 406_1: Logon as Sharon ANDREWS.");
        GeneralBasicHigh.logonESSMain(481, 481, testSerialNo, driver);

        logMessage("Step 406_2: Search for Ryan MAIN");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(31, 31, driver), true, "Failed in Step 406_2: Search for Ryan MAIN");

        logMessage("Step 407: Validate Directory All");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(61, 61, driver), true, "Failed in Step 407: Validate Directory All");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("End of Test 11001.");
        myAssert.assertAll();
    }

    @Test(priority = 11011)
    public static void test11011_RemoveTerminationAndSync() throws Exception {
        logMessage("*** Start Test 11011_74.");

        logMessage("Step 408_1: Remove Ryan MAIN's Termination statu in Meridian.");
        DBManage.sqlExecutor_Main(121, 121);

        SoftAssert myAssert = new SoftAssert();
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 408_2: Logon as Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 408_3: Sydne all data.");
        myAssert.assertEquals(GeneralBasicHigh.syncAllData_Main(121, 121, driver), true, "Failed in Step 408_3: Sydne all data.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        logMessage("Step 409_1: Logon as Admin");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 409_2: Validate Ryan's termination status in search result.");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(41, 41, driver), true, "Failed in Step 409_2: Validate Ryan's termination status in search result.");

        logMessage("Step 409_3: Validate Ryan's termination status in Banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(301, 301, driver), true, "Failed in Step 409_3: Validate Ryan's termination status in Banner.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        /////////////////
        logMessage("Step 410: Search User Ryan MAIN.");
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(511, 511, testSerialNo, driver);

        logMessage("Step 410_2: Search User Ryan MAIN.");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(51, 51, driver), true, "Failed in Step 400: Validate Ryan's termination status in search result.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11011.");
        myAssert.assertAll();
    }

    @Test(priority = 11021)
    public static void test11021_EditRedirectApprovalAndValidateWorkflow() throws Exception {
        logMessage("*** Start Test 11021_75...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 411: Change EOP Date in Meridian with last day of Next Month.");
        GeneralBasic.updateEOPDateAsLastDayOfNextMonthInMicropayDB();

        logMessage("Step 412: Log on As Admin");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 412: Validate FINGLE's Teams and Roles page");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(191, 191, driver), true, "Failed in Step 412: Validate FINGLE's Teams and Roles page");

        logMessage("Step 413_1: Edit Redirect approver.");
        myAssert.assertEquals(GeneralBasicHigh.editRedirectApprovals_Main(201, 201, driver), true, "Failed in step 413_1: Edit Redirect approver.");


        logMessage("Step 413_2: Valdiate Jack F's Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10101, 10101, driver), true, "Failed in 413_2: Valdiate Jack F's Teams and Roles page.");

        logMessage("Step 414: Validate SMART's Teams and Roles page");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(211, 211, driver), true, "Failed in Step 414: Validate SMART's Teams and Roles page");

        logMessage("Step 415_1: Remove Redirect Approval");
        myAssert.assertEquals(GeneralBasicHigh.removeRedirectApprovals_Main(221, 221, driver), true, "Failed in Step 415_1: Remove Redirect Approval");
        logMessage("Step 415_2: Validate SMART's Teams and Roles page again after remove Redirect Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10111, 10111, driver), true, "Failed in Step 415_2: Validate SMART's Teams and Roles page again after remove Redirect Approval.");

        logMessage("Step 416: Validate Redirect Approval");
        myAssert.assertEquals(GeneralBasicHigh.validate_RedirectedApprovers_Main_ViaAdmin(21, 21, driver), true, "Failed in Step 416: Validate Redirect Approval");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11021.");
        myAssert.assertAll();
    }

    @Test(priority = 11031)
    public static void test11031_ApplyLeave() throws Exception {
        logMessage("*** Start Test 11031_76...");
        SoftAssert myAssert = new SoftAssert();
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 417_1: Log on As Ryan MAIN");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(521, 521, testSerialNo, driver);

        logMessage("Step 417_2: Validate Ryan M's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(221, 221, testSerialNo, driver), true, "Failed in Step 471_2: Validate Ryan M's Dashboard.");

        logMessage("Step 418 - Step 423: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(81, 81, driver), true, "Failed in Step 418 - Step 423: Apply Leave.");

        logMessage("Step 424: Click Next Leave in Dashbarod screen.");
        GeneralBasic.displayDashboard(driver);
        WebElement button_NextLeave=SystemLibrary.waitChild("//div[@class='normal-header'][contains(text(),'Next Leave')]", 10, 1, driver);

        if (button_NextLeave!=null){
            button_NextLeave.click();
            Thread.sleep(2000);
            GeneralBasic.waitSpinnerDisappear(60, driver);
            logMessage("Leave Page should shown.");
            logScreenshot(driver);

            WebElement lable_Leave=SystemLibrary.waitChild("//div[@id='pl-header']//h4[contains(text(),'Leave')]", 10, 1, driver);
            if (lable_Leave!=null){
                logMessage("Leave Page is shown after click Next Leave button on Dashboard page.");
            }else{
                logError("Leave Page is NOT shown after click Next Leave button on Dashboard page.");
                myAssert.fail("Failed in Step 424_1: Click Next Leave in Dashboard screen.");
            }
        }else{
            myAssert.fail("Failed in Step 424_1: Next Leave is NOT shown in Dashboard screen.");
        }

        logMessage("Step 424_2: Validate Ryan MAIN's Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(91, 91, driver), true, "Failed in Step 424_2: Validate Ryan MAIN's Leave Page.");

        logMessage("Step 425: Validate Log in Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Log_Main(10061, 10061, driver), true, "Step 425: Validate Log in Leave Page.");

        logMessage("Step 426: Validate Leave Page - Apply Filter 1 - Untick Other Leave");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10071, 10071, driver), true, "Failed in Step 426: Validate Leave Page - Apply Filter - Untick Other Leave");

        logMessage("Step 427: Validate Leave Page - Apply Filter 2 ");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10072, 10072, driver), true, "Failed in Step 427: Validate Leave Page - Apply Filter 2 ");

        logMessage("Step 428: Reset Filter.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10073, 10073, driver), true, "Failed in Step 428: Reset fileter.");

        logMessage("Step 429: Validate Leave Upcoming Tab.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(101, 101, driver), true, "Failed in Step 429: Validate Leave Page - Upcoming.");

        logMessage("Step 430: Validate Leave Page - Pending.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(102, 102, driver), true, "Failed in Step 430: Validate Leave Page - Pending.");

        logMessage("Step 431: Validate Ryan M's Emails.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(221, 221, testSerialNo), true, "Failed in Step 431: Validate Ryan MAIN's Email.");

        logMessage("Step 432: Validate Sue A's Emails.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10201, 10201, testSerialNo), true, "Failed in Step 432: Validate Sue APPLEBY's Email.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11031.");
        myAssert.assertAll();
    }

    @Test(priority = 11041)
    public static void test11041_ValidateLeaveDetailBeforeApplyLeave() throws Exception {
        logMessage("*** Start Test 11041_77...");
        SoftAssert myAssert = new SoftAssert();
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 433_1: Log on As Jeniffer HOWE");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(531, 531, testSerialNo, driver);

        logMessage("Step 433_2: Validate Jennifer H's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(231, 231, testSerialNo, driver), true, "Failed in Step 433_2: Validate Jennifer H's Dashboard.");

        logMessage("Step 433 and Step 437: Validate Leave Balance as date on 31/05/2017.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(111, 111, driver), true, "Failed in Step 433 and Step 437: Validate Leave Page.");

        logMessage("Step 434: Validate All Team Members.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(371, 371, driver), true, "Failed in Step 434: Validate All Team Members.");

        logMessage("Step 435: Validate All Team Members - Leave Tab.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(372, 372, driver), true, "Failed in Step 435: Validate All Team Members - Leave Tab.");

        logMessage("Step 436: Validate Team - Leave Tab - Calendar June 2017.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(381, 381, driver), true, "Failed in Step 436: Validate Team - Leave Tav - Calendar June 2017.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of test 11041.");

        myAssert.assertAll();
    }

    @Test(priority = 11051)
    public static void test11051_ValidateLeaveForcaseAndApplyLeave() throws Exception {
        logMessage("*** Start Test 11051_78...");
        SoftAssert myAssert = new SoftAssert();
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 437: Log on As Jennifer HOWE");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(531, 531, testSerialNo, driver);

        logMessage("Step 437_1: Validate Jennifer H's Leave balance today via Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10031, 10031, driver), true, "Failed in Step 437_1: Validate Jennifer H's Leave balance today via Dashboard.");

        logMessage("Step 437_2: Validate Jennifer H's Leave balance today via Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10031, 10031, driver), true, "Failed in Step 437_2: Validate Jennifer H's Leave balance today via Leave Page.");

        logMessage("Step 438 - Step 441_1: Validate Jennifer H's Leave balance today via Apply Leave Page .");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaApplyLeaveDialogue_Main(10032, 10032, driver), true, "Failed in Step 438 - Step 441_1: Validate Jennifer H's Leave balance today via Apply Leave Page .");

        logMessage("Step 438 - Step 441_2: Validate Jennifer H's Leave balance in one month via Apply Leave Page .");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaApplyLeaveDialogue_Main(10033, 10033, driver), true, "Failed in Step 438 - Step 441_2: Validate Jennifer H's Leave balance in one month via Apply Leave Page .");

        logMessage("Step 438 - Step 442: Apply Leave");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(121, 121, driver), true, "Failed in Step 429 - Step 434: Apply Leave");

        //////////////////////////////////////
        logMessage("Step 444_1: Validate Jennifer H today's Annual Leave balance via Leave Page after apply leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10041, 10041, driver), true, "Failed in Step 444_1: Validate Jennifer H's Annual Leave balance today via Leave Page.");

        logMessage("Step 444_2: Validate Jennifer H today's Personal balance via Leave Page after apply leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10042, 10042, driver), true, "Failed in Step 444_2: Validate Jennifer H's Personal Leave balance today via Leave Page.");

        logMessage("Step 444_3: Validate Jennifer H today's Long Service Leave balance via Leave Page after apply leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10043, 10043, driver), true, "Failed in Step 444_3: Validate Jennifer H's Long Service Leave balance today via Leave Page.");
        //////

        ////////////////////////////
        logMessage("Step 445_1: forecast Jennifer H today's Annual Leave balance via Leave Page after apply leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10051, 10051, driver), true, "Failed in Step 445_1: forecast Jennifer H today's Annual Leave balance via Leave Page after apply leave.");

        logMessage("Step 445_2: forecast Jennifer H today's Personal balance via Leave Page after apply leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10052, 10052, driver), true, "Failed in Step 445_2: forecast Jennifer H today's Personal balance via Leave Page after apply leave.");

        logMessage("Step 445_3: forecast Jennifer H today's Long Service Leave balance via Leave Page after apply leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10053, 10053, driver), true, "Failed in Step Step 445_3: forecast Jennifer H today's Long Service Leave balance via Leave Page after apply leave.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of test 11051.");

        myAssert.assertAll();
    }

    @Test(priority = 11061)
    public static void test11061_AdjustLeaveForGregorySViaSageMicrOpay() throws Exception {
        logMessage("*** Start Test 11061");
        SoftAssert myAssert = new SoftAssert();
        int errorCounter=0;

       AutoITLibHigh.logonMeridian_Main(101, 101);

        //////////////////////
        logMessage("Step 446: Add Sick Leave for Gregory SMITH via Sage MicrOpay.");
        if (AutoITLib.displayEmployeeDetailsScreen("EMP19", "Gregory", "SMITH")){
            AutoITLib.editEmployeePersonalDetail("EMP19", "Gregory", "SMITH", "2475");
            myAssert.assertEquals(AutoITLib.addLeaveInEmployeeLeaveDetailScreen("Sick Leave", "SICK", "1", "01/05/2017"), true, "Failedd in Step 446: Add Sick Leave for Gregory SMITH via Sage MicrOpay.");
            AutoITLib.closeEmployeeDetailScreen();
        }
        else{
            errorCounter++;
            myAssert.fail("Fail in step 446: Display Employee Gregory SMITH's detail screen in Sage MicrOpay.");
        }

        AutoITLib.exitMeridian();
        logMessage("*** End of test 11061.");
        myAssert.assertAll();
    }

    @Test(priority=11071)
    public static void test11071_AdjustLeaveForMartinGViaSageMicrOpay() throws Exception{
        logMessage("*** Start Test 11071.");
        SoftAssert myAssert=new SoftAssert();

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 447: Add Long Service Leave for Martin GREGG via Sage MicrOpay");
        if (AutoITLib.displayEmployeeDetailsScreen("EMP24", "Martin", "GREGG")){
            myAssert.assertEquals(AutoITLib.addLeaveInEmployeeLeaveDetailScreen("Long Service Leave", "LSLNSW", null, "01/05/2017"), true, "Failedd in Step 447: Add Long Service Leave for Martin GREGG via Sage MicrOpay");

            logMessage("Step 448: Change Other Rate value via Sage MicrOpay.");
            myAssert.assertEquals(AutoITLib.editEmployeeRateDetail("30.00"), true, "Failed in Step 448: Change Other Rate value via Sage MicrOpay.");

            AutoITLib.closeEmployeeDetailScreen();
        }
        else{
            myAssert.fail("Failed in Step 447: Add Long Service Leave for Martin GREGG via Sage MicrOpay and Failed in Step 448: Change Other Rate value via Sage MicrOpay.");
        }

        AutoITLib.exitMeridian();

        logMessage("*** End of test 11071.");
        myAssert.assertAll();
    }

    ///////////////////

    @Test(priority=11081)
    public static void test11081_AdjustLeaveForCarminCViaSageMicrOpay() throws Exception{
        logMessage("*** Start Test 11081.");
        SoftAssert myAssert=new SoftAssert();

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 449: Add Long Service Leave for Carmin CUMMINGS via Sage MicrOpay");
        AutoITLib.displayEmployeeDetailsScreen("EMP12", "Carmin", "CUMMINGS");
        AutoITLib.editEmployeePersonalDetail("EMP12", "Carmin", "CUMMINGS", "2666");
        myAssert.assertEquals(AutoITLib.addLeaveInEmployeeLeaveDetailScreen("Long Service Leave", "LSLNSW", null, "01/05/2017"), true, "Failedd in Step 449: Add Long Service Leave for Carmin CUMMINGS via Sage MicrOpay");

        AutoITLib.closeEmployeeDetailScreen();
        AutoITLib.exitMeridian();

        logMessage("*** End of test 11081.");
        myAssert.assertAll();
    }

    @Test(priority=11091)
    public static void test11091_AddPublicHolidayViaSageMicrOpay() throws Exception{
        logMessage("*** Start Test 11091.");
        SoftAssert myAssert=new SoftAssert();

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 450: Add a Public Holiday via Sage MicrOpay");
        AutoITLib.addPublicHoliday("TNG FD", "TNG Free Day", null, "TNG Free Day", "2;MONTHS;1;MONDAY");

        AutoITLib.exitMeridian();

        logMessage("*** End of test 11091.");
        myAssert.assertAll();
    }

    @Test(priority=11101)
    public static void test11101_AddAnotherLeaveReasonViaSageMicrOpay() throws Exception{
        logMessage("*** Start Test 11101.");
        SoftAssert myAssert=new SoftAssert();

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 451: Add another Leave Reason via Sage MicrOpay");
        myAssert.assertEquals(AutoITLib.addLeaveReason("LSLM", "LSL Mandatory", "Long Service Leave", null, "Other", null, null, null, null, null), true, "Failed in Step 451: Add another Leave Reason via Sage MicrOpay");

        AutoITLib.exitMeridian();

        logMessage("*** End of test 11101.");
        myAssert.assertAll();
    }

    @Test(priority = 11111)
    public static void test11111_SynAllDateAfterAdjustingMicropayDB() throws Exception {
        logMessage("*** Start Test 11111_80...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 452_1: Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 452_2: Sync All Date.");
        myAssert.assertEquals(GeneralBasicHigh.syncAllData_Main(121, 121, driver), true, "Failed in Step 452_2: Sync All Date.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11111.");
        myAssert.assertAll();
    }

    @Test(priority = 11121)
    public static void test11121_ApplyLeaveAndValidateLeaveOnCalendar() throws Exception {
        logMessage("*** Start Test 11121_81...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 453: Log on As Gregory SMITH.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(431, 431, testSerialNo, driver);

        logMessage("Step 453: Validate Gregory S's Personal Leave balance via dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10061, 10061, driver), true, "Failed in Step 453: Validate Gregory S's Personal Leave balance.");

        ///////////////////////////////////
        logMessage("Step 454: Validate Apply Leave Dialogue after input date");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(10081, 10081, driver), true, "Failed in Step 454: Validate Apply Leave Dialogue after input date");

        logMessage("Step 455: Validate Leave Reason List in Apply Leave Form.");
        GeneralBasic.displayLeavePage(driver);
        PageObj_Leave.button_AddLeave(driver).click();
        Thread.sleep(3000);
        GeneralBasic.waitSpinnerDisappear(120, driver);
        logMessage("Apply for Leave button is clicked.");
        logScreenshot(driver);
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveReasonListInApplyForLeaveForm_Main(10101, 10101, driver), true, "Failed in Step 455: Validate Leave Reason List in Apply Leave form.");
        PageObj_ApplyForLeave.button_Close(driver).click();
        logMessage("Close Apply for Leave button is clicked.");

        ///////////////////////////////////
        logMessage("Step 456: Validate Apply Leave Dialogue after input leave");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(10091, 10091, driver), true, "Failed in Step 456: Validate Apply Leave Dialogue after input leave");

        logMessage("Step 457- 458: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(151, 151, driver), true, "Failed in Step 457- 458: Apply Leave.");

        logMessage("Step 459: Validate Leave in Team Leave Tab.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(391, 391, driver), true, "Failed in Step 459: Validate Team - Leave Tav - Calendar June 2017.");

        logMessage("Step 460: Validate Gregory SMITH Leave in Directory - Leave Tabb");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(71, 71, driver), true, "Failed in Step 460: Validate Gregory SMITH  Leave in Directory - Leave Tabb");

        logMessage("Step 461: Validate Jennifer Leave in Directory - Leave Tabb");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(81, 81, driver), false, "Failed in Step 461: Validate Jennifer's Leave in Directory - Leave Tabb");
        logMessage("Failed find Jennifer as expected.");

        logMessage("Step 462: Validate Sharon's Leave in Directory - June 2017.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(91, 91, driver), true, "Failed in Step 462: Validate Sharon's Leave in Directory - June 2017.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11121.");
        myAssert.assertAll();
    }

    @Test(priority = 11131)
    public static void test11131_ValidateLeaveOnCalendarViaAdmin() throws Exception {
        logMessage("*** Start Test 11131 - 82...");
        SoftAssert myAssert =  new SoftAssert();

        logMessage("Step 463: Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 463: Validate Gregory SMITH's Leave on Calendar via Teams page.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(10091, 10091, driver), true, "Failed in Step 463: Validate Gregory SMITH's Leave on Calendar via Teams page.");

        logMessage("Step 464: Validate Ryan MAIN's Leave on Calendar via Teams page.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(10101, 10101, driver), true, "Failed in Step 464: Validate Ryan MAIN's Leave on Calendar via Teams page.");

        logMessage("Step 465: Validate Sharon Andrew's leave on Calendar.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(111, 111, driver), true, "Failed in Step 465: Validate Sharon Andrew's leave on Calendar.");

        logMessage("Step 466_1: Validate Gregory SMITH's leave on Calendar.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(101, 101, driver), true, "Failed in Step 466_1: Validate Gregory SMITH's leave on Calendar.");

        logMessage("Step 466_2: Validate Jennifer HOWE's leave on Calendar.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(10001, 10001, driver), true, "Failed in Step 466_2: Validate Jennifer HOWE's leave on Calendar.");

        logMessage("Step 468: Validate Ryan MAIN's leave on Calendar.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(121, 121, driver), true, "Failed in Step 468: Validate Ryan MAIN's leave on Calendar.");


        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11131.");
        myAssert.assertAll();
    }


    @Test(priority = 11141)
    public static void test11141_ApplyLeaveForErnie() throws Exception {
        logMessage("*** Start Test 11141_83...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 469: Log on As Ernie MANNING.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(541, 541, testSerialNo, driver);

        logMessage("Step 470 - Step 473: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(161, 161, driver), true, "Failed in Step 470 - Step 473: Apply Leave.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11141.");
        myAssert.assertAll();
    }

    @Test(priority = 11151)
    public static void test11151_ValidateAndApplyLeaveForMartin() throws Exception {
        logMessage("*** Start Test 11151_84...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 474: Log on As Martin GREGG.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(551, 551, testSerialNo, driver);

        logMessage("Step 475: Validate Martin's dashboard - Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(251, 251, testSerialNo, driver), true, "Failed in Step 475: Validate Martin's dashboard - Leave.");

        logMessage("Step 476: Edit Leave and Validate Apply Leave form for Martin.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(171, 171, driver), true, "Failed in Step 476: Validate Apply Leave Form for Martin.");

        logMessage("Step 477: Edit Leave and Validate Apply Leave form for Martin.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(181, 181, driver), true, "Failed in Step 477: Validate Apply Leave Form for Martin.");

        logMessage("Step 478: Validate Leave for Martin.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(191, 191, driver), true, "Failed in Step 480: Validate Leave for Martin.");

        logMessage("Step 479: Validate Leave Reason List in Apply Leave Form.");
        GeneralBasic.displayLeavePage(driver);
        PageObj_Leave.button_AddLeave(driver).click();
        Thread.sleep(3000);
        GeneralBasic.waitSpinnerDisappear(120, driver);
        logMessage("Apply for Leave button is clicked.");
        logScreenshot(driver);
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveReasonListInApplyForLeaveForm_Main(10111, 10111, driver), true, "Failed in Step 455: Validate Leave Reason List in Apply Leave form.");
        PageObj_ApplyForLeave.button_Close(driver).click();

        logMessage("Step 481 - Step 482: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(201, 201, driver), true, "Failed in Step 481 - Step 482: Apply Leave.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11151.");
        myAssert.assertAll();
    }

    @Test(priority = 11161)
    public static void test11161_ApplyLeaveAndValidateBalanceForCarminC() throws Exception {
        logMessage("*** Start Test 11161_85...");
        SoftAssert myAssert = new SoftAssert();

        //logMessage("Step 483: Adjust Carmin CUMMINGS LSL Balance.");
        //DBManage.sqlExecutor_Main(221, 221);

        logMessage("Step 483_1: Log on As Carmin CUMMINGS.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(381, 381, testSerialNo, driver), true, "Failed in Step 483_1: Log on As Carming CUMMINGS");

        logMessage("Step 483_2: Validate Carmin's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10071, 10071, testSerialNo, driver), true, "Failed in Step 483_2: Validate Carmin's Dashboard.");

        logMessage("Step 483_3: Validate Carmin's Long Service Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10071, 10071, driver), true, "Failed in Step 483_3: Validate Carmin's Long Service Leave balance.");

        logMessage("Step 484: Validate Carmin's Team and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(231, 231, driver), true, "Failed in Step 484: Validate Carmin's Team and Roles page.");

        logMessage("Step 485: Validate Carmin's Approval Process.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(241, 241, driver), true, "Failed in Step 485: Validate Carmin's Approval Process.");

        logMessage("Step 486: Valdiate Apply Leave Form 1.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(10111, 10111, driver), true, "Failed in Step 486: Valdiate Apply Leave Form 1.");

        logMessage("Step 487: Valdiate Leave List in Apply Leave Form.");
        GeneralBasic.displayLeavePage(driver);
        PageObj_Leave.button_AddLeave(driver).click();
        Thread.sleep(3000);
        GeneralBasic.waitSpinnerDisappear(120, driver);
        logMessage("Apply for Leave button is clicked.");
        logScreenshot(driver);
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveReasonListInApplyForLeaveForm_Main(10121, 10121, driver), true, "Faield in Step 487: Valdiate Leave List in Apply Leave Form.");
        PageObj_ApplyForLeave.button_Close(driver).click();

        logMessage("Step 488: Validate Leave forecast in Apply Leave form.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaApplyLeaveDialogue_Main(10081, 10081, driver), true, "Failed in Step 488: Validate Leave forecast in Apply Leave form.");

        logMessage("Step 489: Validate Leave forecast in Apply Leave form after manul adjustment.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaApplyLeaveDialogue_Main(10091, 10091, driver), true, "Failed in Step 489: Validate Leave forecast in Apply Leave form after manul adjustment.");

        logMessage("Step 490: Apply Leave");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(10101, 10101, driver), true, "Failed in Step 490: Apply Leave");

        logMessage("Step 491: Validate Carmin C's Leave Balance after applying leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10111, 10111, driver), true, "Failed in Step 491: Validate Carmin C's Leave Balance after applying leave.");

        logMessage("Step 492: Valdiate Leave Page with hrs unit.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10121, 10121, driver), true, "Failed in Step 492: Valdiate Leave Page with Hrs unit.");

        logMessage("Step 493: Valdiate Leave Page with days unit.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10122, 10122, driver), true, "Failed in Step 493: Valdiate Leave Page with Hrs unit.");

        GeneralBasic.displayDashboard(driver);
        logMessage("Step 494: Forecast Carmin C's Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10111, 10111, driver), true, "Failed in Step 494: Forecast Carmin C's Leave balance.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11161.");
        myAssert.assertAll();
    }

    @Test(priority = 11171)
    public static void test11171_ValidateEmailLeaveApplication() throws Exception {
        logMessage("*** Start Test 11171_86.");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 495: Validate Carmin CUMMINGS Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(231, 231, testSerialNo), true, "Failed in Step 495: Validate Carmin CUMMINGS Email.");

        logMessage("Step 496: Validate Robin SPACEY Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(232, 232, testSerialNo), false, "Failed in Step 496: Validate Robin SPACEY Email.");

        logMessage("Step 497: Validate Christne RAMPLING Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(233, 233, testSerialNo), true, "Failed in Step 497: Validate Christne RAMPLING Email.");


        logMessage("*** End of Test 11171.");
        myAssert.assertAll();
    }

    @Test(priority = 11181)
    public static void test11181_EditAndValidatePendingLeave() throws Exception {
        logMessage("*** Start Test 11181_87...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 498: Log on As Ryan MAIN.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(521, 521, testSerialNo, driver), true, "Failed in Step 498: Log on As Ryan MAIN.");

        logMessage("Step 498: Valdiate Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(251, 251, driver), true, "Failed in Step 498: Valdiate Leave Page.");

        logMessage("Step 499 - Step 501: Edit Pending Leave.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPendingLeave(261, 261, driver), true, "Failed in Step 499 - Step 501: Edit Leave.");

        logMessage("Step 501: Valdiate leave page after edit Pending Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(271, 271, driver), true, "Failed in Step 501: Valdiate leave page after edit Pending Leave.");

        /////////// Edit Pending Leave again.
        logMessage("Step 502_1: Edit Pending Leave again .");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPendingLeave(281, 281, driver), true, "Failed in Step 502_1: Edit Pending Leave again .");

        logMessage("Step 502_2: Valdiate leave page after edit Pending Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(291, 291, driver), true, "Failed in Step 502_2: Valdiate leave page after edit Pending Leave.");

        logMessage("Step 503: Validate Leave Log.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Log_Main(10131, 10131, driver), true, "Failed in Step 503: Validate Leave Log.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11181.");
        myAssert.assertAll();
    }

    @Test(priority = 11191)
    public static void test11191_ValidateAllApprovalItems() throws Exception {
        logMessage("*** Start Test 11191_88...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 504_1: Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, driver), true, "Failed in Step 504_1: Log on As Admin.");

        logMessage("Step 504_2: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10081, 10081,testSerialNo,  driver), true, "Failed in Step 504_2: Validate Dashboard.");

        logMessage("Step 505: Validate My Approval");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(1061, 1061, driver), true, "Failed in Step 505: Validate My Approval.");

        logMessage("Step 506 - 507: Validate Other Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1071, 1071, driver), true, "Failed in Step 506 - Step 507: Validate Other Leave 1.");

        logMessage("Step 508: Validate Other Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1072, 1072, driver), true, "Failed in Step 508: Validate Other Leave 2.");
        logMessage("Step 509: Validate Other Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1073, 1073, driver), true, "Failed in Step 509: Validate Other Leave 3.");
        logMessage("Step 510: Validate Other Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1074, 1074, driver), true, "Failed in Step 510: Validate Other Leave 4.");
        logMessage("Step 511: Validate Other Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1075, 1075, driver), true, "Failed in Step 511: Validate Other Leave 5.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11191.");
        myAssert.assertAll();

    }

    @Test(priority = 11201)
    public static void test11201_ValdiateLeaveBalanceAndForecastLeave() throws Exception {
        logMessage("*** Start Test 11201_89...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 512: Validate Jennifer HOWE's Leave page via Admin Approvals page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_ViaAdminApprovals_Main(301, 301, driver), true, "Failed in Step 512: Validate Jennifer HOWE's Leave page via Admin Approvals page.");

        //////////////////////////////
        logMessage("Step 513_1: Validate Jennifer H's Annual Leave balance as today.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10121, 10121, driver), true, "Failed in Step 513_1: Validate Jennifer H's Annual Leave balance as today.");

        logMessage("Step 513_2: Validate Jennifer H's Sick Leave balance as today.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10122, 10122, driver), true, "Failed in Step 513_2: Validate Jennifer H's Sick Leave balance as today.");

        logMessage("Step 513_3: Validate Jennifer H's Long Service Leave balance as today.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10123, 10123, driver), true, "Failed in Step 513_1: Validate Jennifer H's Long Service Leave balance as today.");
        //////////////

        logMessage("Step 514_1: Validate Jennifer H's Annual Leave balance as the end day of next leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10131, 10131, driver), true, "Failed in Step 514_1: Validate Jennifer H's Annual Leave balance as the end day of next leave.");

        logMessage("Step 514_2: Validate Jennifer H's Sick Leave balance as the end day of next leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10132, 10132, driver), true, "Failed in Step 514_2: Validate Jennifer H's Sick Leave balance as the end day of next leave.");

        logMessage("Step 514_3: Validate Jennifer H's Long Service Leave balance as as the end day of next leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10133, 10133, driver), true, "Failed in Step 514_3: Validate Jennifer H's Long Service Leave balance as as the end day of next leave.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11201.");
        myAssert.assertAll();
    }

    @Test(priority = 11211)
    public static void test11211_ChangeDefaultApprovalTeam() throws Exception {
        logMessage("*** Start Test 11211_90...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 515 - Step 516: Change Default Approval Team.");
        myAssert.assertEquals(GeneralBasicHigh.changeDefaultApprovalTeam_Main(251, 251, driver), true, "Failed in Step 515 - Step 516: Change Default Approval Team.");

        logMessage("Step 516: Validate Team and Role pages.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(261, 261, driver), true, "Failed in Step 516: Validate Team and Role pages.");

        logMessage("Step 517: Validate Approval Process.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(271, 271, driver), true, "Failed in Step 517: Validate Approval Process.");

        logMessage("Step 518: Validate Other Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1081, 1081, driver), true, "Failed in Step 518: Validate Other Approval.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11211.");
        myAssert.assertAll();
    }

    @Test(priority = 11221)
    public static void test11221_ValidateLeaveBalanceAndApplyLeave() throws Exception {
        logMessage("*** Start Test 11221_91...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Delete All Email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 519: Validate Carmin C's Long service Leave balance in Leave Page as today.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10141, 10141, driver), true, "Failed in Step 519: Validate Carmin C's Long service Leave balance in Leave Page as today.");

        logMessage("Step 520: Validate Carmin C's apply leave form after apply new leave in the same days.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(10141, 10141, driver), true, "Failed in Step 520: Validate Carmin C's apply leave form after apply new leave in the same days.");

        logMessage("Step 521: Validate Carmin C's apply Leave form after change end date.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(10142, 10142, driver), true, "Failed in Step 521: Validate Carmin C's apply Leave form after change end date.");

        logMessage("Step 522 - Step 524: Validate Leave Balance in Apply leave form.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaApplyLeaveDialogue_Main(10151, 10151, driver), true, "Failed in Step 522 - Step 524: Validate Leave Balance in Apply leave form.");

        logMessage("Step 525: Apply Leave.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(10151, 10151, driver), true, "Failed in Step 525: Apply Leave.");

        logMessage("Step 526: validate Leave page after applying leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10161, 10161, driver), true, "Failed in Step 526: validate Leave page after applying leave.");

        logMessage("Step 527: Valdate Leave Balance as today.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10161, 10161, driver), true, "Failed in Step 527: Valdate Leave Balance as today.");

        logDebug("Pending adjust email libray.");
        logMessage("Step 528: Validate Carmin CUMMINGS Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(241, 241, testSerialNo), true, "Failed in Step 528: Validate Carmin CUMMINGS Email.");

        logMessage("Step 529: Validate Tanya DOWNS Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(242, 242, testSerialNo), false, "Failed in Step 529: Validate Tanya DOWNS Email.");
        logMessage("No email for Tanya_DOWNS_EMP15 is as expected.");

        logMessage("Step 530: Validate Sue APPLEBY Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(243, 243, testSerialNo), true, "Failed in Step 530: Validate Sue APPLEBY Email.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11221.");
        myAssert.assertAll();
    }

    @Test(priority = 11231)
    public static void test11231_UpdateMonthlyLeaveEntitlement() throws Exception {
        logMessage("*** Start Test 11231...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 531: Update Monthly Leave Entitlement.");
        AutoITLibHigh.logonMeridian_Main(101, 101);

        myAssert.assertEquals(updateLeaveEntitlement("M01 - Monthly:2", "31/05/2017"), true, "Failed in Step 531: Update Monthly Leave Entitlement.");

        exitMeridian();
        myAssert.assertAll();
        logMessage("*** End of Test 11231.");
    }

    @Test(priority = 11241)
    public static void test11241_ValidteAndApplyLeaveForSharonA() throws Exception {
        logMessage("*** Start Test 11241_92...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Delete All email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Step 532_1: Log on As Sharon ANDREWS.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(511, 511, testSerialNo, driver);

        logMessage("Step 532_2: Click View More in Leave panel.");
        WebElement link_ViewMoreInLeavePanel=SystemLibrary.waitChild("//div[@id='leave-balances-widget']//a[contains(text(),'View more')]", 10, 1, driver);
        if (link_ViewMoreInLeavePanel!=null){
            link_ViewMoreInLeavePanel.click();
            Thread.sleep(3000);
            GeneralBasic.waitSpinnerDisappear(120, driver);

            WebElement lable_Leave=SystemLibrary.waitChild("//div[@id='pl-header']//h4[contains(text(),'Leave')]", 10, 1, driver);
            if (lable_Leave.equals(null)) myAssert.fail("Failed in Step 532_2: Leave page is not shown after click View More button in Leave Panel in Dashboard page.");
        }else{
            myAssert.fail("Failed in Step 532_2: View More button is NOT shown in the Leave Panel.");
        }

        logMessage("Step 533: Validate Sharon A's Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(361, 361, driver), true, "Failed in Step 533: Validate Sharon A's Leave Page.");

        logMessage("Step 534 - Step 537: Validate Edit Leave Dialogue.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(371, 371, driver), true, "Failed in Step 523 - Step 524: Validate Edit Leave Dialogue.");

        logMessage("Step 538: Apply leave for Sharon A.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(381, 381, driver), true, "Failed in Step 538: Apply Leave for Sharon A.");

        logMessage("Step 539: Validate Sharon A's Leave Page");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(391, 391, driver), true, "Failed in Step 539: Validate Sharon A's Leave Page");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11241.");
        myAssert.assertAll();
    }

    @Test(priority = 11251)
    public static void test11251_DeleteAndValidateWorkflow() throws Exception {
        logMessage("*** Start Test 11251_93...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 540_1: Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 540 - Step 541: Delete Leave Workflow - a User Defined Leave.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(161, 161, driver), true, "Failed in Step 540 - Step 541: Delete Leave Workflow - a User Defined Leave.");

        logMessage("Step 542: Validate Leave Workflow after deleting .");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(171, 171, driver), true, "Failed in Step 542: Validate Leave Workflow after deleting .");

        logMessage("Step 543: Validate Search Result.");
        myAssert.assertEquals(GeneralBasicHigh.validateSearchResult_Main(61, 61, driver), true, "Failed in Step 543: Validate Search Result.");

        logMessage("Step 544: Validate Sharan H's Approval Process.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(281, 281, driver), true, "Failed in Step 544: Validate Sharan H's Approval Process.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11251.");
        myAssert.assertAll();
    }

    @Test(priority = 11261)
    public static void test11261_ApplyLeaveAndValidateMmailAfterEditWorkflow() throws Exception {
        logMessage("*** Start Test 11261_94...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);


        logMessage("Step 545: Validate Sharon A's Apply for Leave dialogue.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(401, 401, driver), true, "Failed in Step 545: Validate Sharon A's Apply for Leave dialogue.");

        logMessage("Step 546 - Step 547: Apply Leave for Sharon A.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(411, 411, driver), true, "Failed in Step 546 - Step 547: Apply Leave for Sharon A.");

        logMessage("Step 547: Validate Sharon A's Leave page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(421, 421, driver), true, "Failed in Step 547: Validate Sharon A's Leave page.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("Step 548_1: Validate Sharon ANDREWS Email made by Admin.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(251, 251, testSerialNo), true, "Failed in Step 548_1: Validate Sharon ANDREWS Email made by Admin.");

        //pending update library.
        logMessage("Step 548_2: Validate Sharon ANDREWS Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10211, 10211, testSerialNo), true, "Failed in Step 548_2: Validate Sharon ANDREWS Email.");

        logMessage("Step 549: Validate Tanya DOWNS Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(252, 252, testSerialNo), true, "Failed in Step 549: Validate Tanya DOWNS Email.");
        logMessage("Step 550: Validate Sue APPLEBY Email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(253, 253, testSerialNo), true, "Failed in Step 550: Validate Sue APPLEBY Email.");

        logMessage("*** End of Test 11261.");
        myAssert.assertAll();
    }

    @Test(priority = 11271)
    public static void test11271_AddAndRemoveTeamMember() throws Exception {
        logMessage("*** Start Test 11271_95...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 551_1: Add Sharan A into Team F while remove from Team B.");
        myAssert.assertEquals(GeneralBasicHigh.addTeamMember_Main(401, 401, driver), true, "Failed in Step 551_2: Add Sharan A into Team F.");

        logMessage("Step 551_2: Validate Sharon A's Team and Role page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(291, 291, driver), true, "Failed in Step 551_1: Validate Sharon A's Team and Role page.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11271.");
        myAssert.assertAll();
    }

    @Test(priority = 11281)
    public static void test11281_ApplyAndValidateLeaveForSharonH() throws Exception {
        logMessage("*** Start Test 11281_96...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Delete All email.");
        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 552: Validate ANDREWS's leave dialogue.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(431, 431, driver), true, "Step 552: Validate ANDREWS's leave dialogue.");

        logMessage("Step 552 - Step 554: Valdiate Apply Care Leave diglogue for Sharon ANDREWS");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveForecastInApplyLeaveDialogue_Main(10171, 10171, driver), true, "Failed in Step 552 - Step 554: Valdiate Apply Care Leave diglogue for Sharon ANDREWS");

        logMessage("Step 552 - Step 556: Apply Care Leave for Sharon ANDREWS");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(441, 441, driver), true, "Failed in Step 541 - Step 545: Apply Care Leave for Sharon ANDREWS");

        logMessage("Step 557: Validate Sharon A's leave page with upcoming item.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(451, 451, driver), true, "Failed in Step 557: Validate Sharon A's leave page with upcoming item.");

        logMessage("Step 558: Validate Sharon A's leave page with pending item.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(452, 452, driver), true, "Failed in Step 558: Validate Sharon A's leave page with pending item.");

        logMessage("Step 559: Validate Sharon A's leave page with All item.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(453, 453, driver), true, "Failed in Step 559: Validate Sharon A's leave page with ALL item.");

        logMessage("Step 560: Validate Sharon A's Leave Attachment.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Attachment_Man(10181, 10181, driver), true, "Step 560: Validate Sharon A's Leave Attachment.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11281.");
        myAssert.assertAll();
    }

    @Test(priority = 11291)
    public static void test11291_EditLeaveAttachmentAndValidateApprovalItems() throws Exception {
        logMessage("*** Start Test 11291_97...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 561: Change the Leave Settings - untick 'Allow insufficient balance'.");
        myAssert.assertEquals(GeneralBasicHigh.editSettingsLeave_Main(41, 41, driver), true, "Failed in Step 550: Change the Leave Settings - untick 'Allow insufficient balance'.");

        logMessage( "Step 561_2: Validate Setting - Leave page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveSettingInLeaveSettingPage_Main(10011, 10011, driver), true, "Failed in Step 561_2: Validate Setting - Leave page.");

        logMessage("Step 562: Validate Sharon Andrew's Leave forecase in Leave page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10191, 10191, driver), true, "Failed in Step 562: Validate Sharon Andrew's Leave forecase in Leave page.");

        logMessage("Step 563: Validate Admin Dashboard with 1 Pending Leave Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(271, 271, testSerialNo, driver), true, "Failed in Step 563: Validate Admin Dashboard with 1 Pending Leave Approval.");

        logMessage("Step 564: Validate Admin My Approvals.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(1091, 1091, driver), true, "Failed in Step 564: Validate Admin My Approvals.");

        logMessage("Step 565 - Step 566: Validate Other Approval - Sharon A - Carer Leave");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1101, 1101, driver), true, "Failed in Step 565 - Step 566: Validate Other Approval - Sharon A - Carer Leave.");

        logMessage("Step 567: Validate Other Approval - Sharon A - Time in Lieu #2.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1102, 1102, driver), true, "Failed in Step 567: Validate Other Approval - Sharon A - Time in Lieu #2.");

        logMessage("Step 568: Validate Other Approval - Carmin C.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1103, 1103, driver), true, "Failed in Step 568: Validate Other Approval - Carmin C ");

        logMessage("Step 569: Validate Other Approval - Ryan MAIN.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1104, 1104, driver), true, "Failed in Step 569: Validate Other Approval - Ryan MAIN.");

        logMessage("Step 570: Validate Other Approval - Carmin CUMMINGS.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1105, 1105, driver), true, "Failed in Step 570: Validate Other Approval - Carmin CUMMINGS.");

        logMessage("Step 571: Validate Other Approval - Martin GREGG.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1106, 1106, driver), true, "Failed in Step 571: Validate Other Approval - Martin GREGG.");

        logMessage("Step 572: Validate Other Approval - Gregory SMITH.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1107, 1107, driver), true, "Failed in Step 572: Validate Other Approval - Gregory SMITH.");

        logMessage("Step 573: Validate Other Approval - Jennifer HOWE.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(1108, 1108, driver), true, "Failed in Step 573: Validate Other Approval - Jennifer HOWE.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11291.");
        myAssert.assertAll();
    }

    @Test(priority = 11301)
    public static void test11301_ApprolvePendingLeaveApplications() throws Exception {
        logMessage("*** Start Test 11301_98...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 574 - Step 575: Validate Multi Approval controls in Other Approval Page.");
        displayOtherApprovalsPage_ViaNavigationBar(driver);
        myAssert.assertEquals(PageObj_Approvals.validateMultiWebControlInOtherApporvalsPage(driver), true, "Failed in Step 574 - Step 575: Validate Multi Approval controls in Approval Page - Pending Developing.");

        logMessage("Step 576_1: Approve Items for Gregory S.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(131, 131, driver), true, "Failed in Step 565_1: Approve Items for Gregory SMITH.");

        logMessage("Step 576_2: Approve Items for Carmin.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(141, 141, driver), true, "Failed in Step 565_2: Approve Items for Carmin CUMMINGS 1.");

        logMessage("Step 576_3: Approve Items.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(151, 151, driver), true, "Failed in Step 565_3: Approve Items for Carmin CUMMINGS 2.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11301.");
        myAssert.assertAll();
    }

    @Test(priority = 11311)
    public static void test11311_ApplyLeaves_1() throws Exception {
        logMessage("*** Start Test 11311_99...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 577_1: Click Jennifer Link and go to Leave Page.");
        myAssert.assertEquals(PageObj_Approvals.openLeavePageViaApprovalPage("Jennifer HOWE", driver), true, "Failed in Step 577_1: Click Jennifer Link and go to Leave Page.");

        logMessage("Step 577_2: Valdiate Edit Leave Form for Jennifer H.");
        myAssert.assertEquals(GeneralBasicHigh.validateApplyForLeaveForm_Main(10201, 10201, driver), true, "Failed in Step 577_2: Valdiate Edit Leave Form for Jennifer H.");

        logMessage("Step 578: Validate Leave balance in Apply Leave Form for Jennifer H.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaApplyLeaveDialogue_Main(10191, 10191, driver), true, "Failed in Step 578: Validate Apply Leave Form for Jennifer H.");

        logMessage("Step 579: Apply Leave Form for Jennifer H.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(482, 482, driver), true, "Failed in Step 579: Apply Leave Form for Jennifer H.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11311.");
        myAssert.assertAll();
    }

    @Test (priority = 11321)
    public static void Test11321_ApplyLeave_2() throws Exception {
        logMessage("*** Start Test 11321_100...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 580 - Step 581: Apply the 1st Leave for Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(491, 491, driver), true, "Failed in Step 580 - Step 581: Apply the 1st Leave for Phantom FRY.");

        logMessage("Step 582 - Step 583: Apply the 2nd Leave for Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.applyMultiLeave(501, 501, driver), true, "Failed in Step 582 - Step 583: Apply the 2nd Leave for Phantom FRY.");

        logMessage("Step 584_1: Approve the 2nd leave for Phantom FRY");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(10011, 10011, driver), true, "Failed in Step 584_1: Approve the 2nd leave for Phantom FRY");

        logMessage("Step 584_2: Validate Phantom FRY's Leave page after approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10211, 10211, driver), true, "Failed in Step 584_2: Validate Phantom FRY's Leave page after approval.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11321.");
        myAssert.assertAll();
    }

    @Test (priority = 11331)
    public static void Test11331_ValidateAllLeaveInDirectory() throws Exception {
        logMessage("*** Start Test 11331_101...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 585: Validate Team - Directory.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(131, 131, driver), true, "Failed in Step 585: Validate Team - Directory.");

        logMessage("Step 586: Validate Team - Directory - Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(141, 141, driver), true, "Failed in Step 586: Validate Team - Directory - Leave.");

        logMessage("Step 587: Validate Team - Directory - Leave - Sharon ANDREWS.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(151, 151, driver), true, "Failed in Step 587: Validate Team - Directory - Leave.");

        logMessage("Step 588: Validate Team - Directory - Leave - Gregory SMITH.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(161, 161, driver), true, "Failed in Step 577: Validate Team - Directory - Leave - Gregory SMITH.");

        logMessage("Step 589: Validate Team - Directory - Leave - Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(171, 171, driver), true, "Failed in Step 589: Validate Team - Directory - Leave - Phantom FRY.");

        logMessage("Step 590: Validate Team - Directory - Leave - Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(181, 181, driver), true, "Failed in Step 590: Validate Team - Directory - Leave - Phantom FRY.");

        logMessage("Step 591: Validate Team - Directory - Leave - Sharon A.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(191, 191, driver), true, "Failed in Step 591: Validate Team - Directory - Leave - Sharon A.");

        logMessage("Step 592: Validate Team - Directory - Leave - Carmin C.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(201, 201, driver), true, "Failed in Step 592: Validate Team - Directory - Leave - Carmin A.");

        logMessage("Step 593: Validate Team - Directory - Leave - Jennifer H.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(211, 211, driver), true, "Failed in Step 593: Validate Team - Directory - Leave - Jennifer H.");

        logMessage("Step 594: Validate Team - Directory - Leave - Jennifer H.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(221, 221, driver), true, "Failed in Step 594: Validate Team - Directory - Leave - Jennifer H.");

        logMessage("Step 595: Validate Team - Directory - Leave - Martin G.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(231, 231, driver), true, "Failed in Step 595: Validate Team - Directory - Leave - Martin G.");

        logMessage("Step 596: Validate Team - Directory - Leave - Ernie MANNING.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(241, 241, driver), true, "Failed in Step 596: Validate Team - Directory - Leave - Ernie MANNING.");

        logMessage("Step 597: Validate Team - Directory - Leave - Carmin CUMMINGS.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(251, 251, driver), true, "Failed in Step 597: Validate Team - Directory - Leave - Carmin CUMMINGS.");

        logMessage("Step 598: Validate Team - Directory - Leave - Ryan MAIN.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(261, 261, driver), true, "Failed in Step 598: Validate Team - Directory - Leave - Ryan MAIN.");

        logMessage("Step 599: Validate Team - Directory - Leave - Sharon ANDREWS.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(271, 271, driver), true, "Failed in Step 599: Validate Team - Directory - Leave - Sharon ANDREWS.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11331.");
        myAssert.assertAll();
    }

    @Test (priority = 11341)
    public static void test11341_ValidateLeaveInTeamPage() throws Exception {
        logMessage("*** Start Test 11341_102...");
        SoftAssert myAssert = new SoftAssert();

        logDebug("This test case is pending confirmation.");

        logMessage("Step 600_1: Log on As Jack FINGLE.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(461, 461, testSerialNo, driver);

        logMessage("Step 600_2: Validate Jack F's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10091, 10091, testSerialNo, driver), true, "Failed in Step 600_2: Validate Jack F's Dashboard.");

        logMessage("Step 601: Validate All Team Member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(411, 411, driver), true, "Failed in Step 601: Validate All Team Member.");

        logMessage("Step 602_1: Validate Team - Leave - Carmin CUMMINGS");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(421, 421, driver), true, "Failed in Step 602_1: Validate Team - Leave - Carmin CUMMINGS");

        logMessage("Step 602_2: Validate Team - Leave - Carmin CUMMINGS");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(422, 422, driver), true, "Failed in Step 602_2: Validate Team - Leave - Carmin CUMMINGS");

        logMessage("Step 602_3: Validate Team - Leave - Phantom FRY");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(423, 423, driver), false, "Failed in Step 602_3: Validate Team - Leave - Phantom FRY");

        logMessage("Step 602_4: Validate Team - Leave - Phantom FRY");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(424, 424, driver), true, "Failed in Step 602_4: Validate Team - Leave - Phantom FRY");

        logMessage("Step 603: Validate Team - Leave - Ryan MAIN");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(431, 431, driver), false, "Failed in Step 603: Validate Team - Leave - Ryan MAIN");

        logMessage("Step 604_1: Validate Team B - Leave - Carmin CUMMINGS");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(441, 441, driver), true, "Failed in Step 604_1: Validate Team B - Leave - Carmin CUMMINGS");

        logMessage("Step 604_2: Validate Team B - Leave - Carmin CUMMINGS");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(442, 442, driver), true, "Failed in Step 604_2: Validate Team B - Leave - Carmin CUMMINGS");

        logMessage("Step 604_3: Validate Team B - Leave - Phantom FRY");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(443, 443, driver), true, "Failed in Step 604_3: Validate Team B - Leave - Phantom FRY");

        logMessage("Step 604_4: Validate Team B - Leave - Phantom FRY");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(444, 444, driver), true, "Failed in Step 604_4: Validate Team B - Leave - Phantom FRY");

        logMessage("Step 605: Validate Team - Leave - Ryan MAIN");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(451, 451, driver), true, "Failed in Step 605: Validate Team - Leave - Ryan MAIN");
        logMessage("Validation Failed in Step 592 as expected.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11341.");
        myAssert.assertAll();
    }

///////////////////////////////

    @Test (priority = 11351)
    public static void test11351_ValidateLeaveInTeamPage2() throws Exception {
        logMessage("*** Start Test 11351_103...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 606_1: Log on As Ryan MAIN.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(521, 521, testSerialNo, driver);

        logMessage("Step 606_2: Validate All Team Member.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(461, 461, driver), true, "Failed in Step 606_2: Validate All Team Member.");

        logMessage("Step 607: Validate Team - Leave Calendar - Ryan MAIN.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(471, 471, driver), true, "Failed in Step 607: Validate Team - Leave Calendar - Ryan MAIN.");

        /////////////
        logMessage("Step 608_1: Validate Team - Leave - Carmin CUMMINGS.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(481, 481, driver), true, "Failed in Step 608_1: Validate Team - Leave - Carmin CUMMINGS.");

        logMessage("Step 608_2: Validate Team - Leave - Phantom FRY.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(483, 483, driver), false, "Failed in Step 608_2: Validate Team - Leave - Phantom FRY.");

        logMessage("Step 608_3: Validate Team - Leave - Carmin CUMMINGS.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(482, 482, driver), true, "Failed in Step 608_3: Validate Team - Leave - Carmin CUMMINGS.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11351.");
        myAssert.assertAll();
    }

    /////////////////////////////////

    //Must run without headless
    @Test (priority = 11361)
    public static void test11361_ValidateLeaveApplicationReport() throws Exception {
        logMessage("*** Start Test 11361_104...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 609: Log on As Admin.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 609: Download and validate Leave Application Report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(61, 61, driver), true, "Failed in Step 609: Download and validate Leave Application Report.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11361.");
        myAssert.assertAll();
    }

    @Test (priority = 11371)
    public static void test11371_UploadLogoViaTPUTool() throws Exception {
        logMessage("*** Start test 11371: Upload Logo Via TPU tool.");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 610: Upload Logo via TPU Tool.");
        myAssert.assertEquals(uploadCompanyLogoViaTPU(testSerialNo), true, "Failed in Step 610: Upload Logo via TPU Tool.");

        logMessage("*** End of Test 11371");
        myAssert.assertAll();
    }

    @Test (priority = 11381)
    public static void test11381_CreateAdminExternalUserViaTPUTool() throws Exception {
        logMessage("*** Start test 11381: Create Admin External User Via TPU tool.");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 611: Create Admin External User via TPU Tool.");
        myAssert.assertEquals(WiniumLib.createAdminExternalUserViaTPU(), true, "Failed in Step 611: Create Admin External User via TPU Tool.");

        logMessage("*** End of test 11381.");
        myAssert.assertAll();
    }

    ////// Must run without headless
    @Test (priority = 11391)
    public static void test11391_LogonESSAndValidateAsExtraAdminUser_1() throws Exception {
        logMessage("*** Start test 11391.");
        SoftAssert myAssert= new SoftAssert();

        logMessage("Step 612_1: Logon ESS as Extra Admin user.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(111, 111, testSerialNo, driver), true, "Failed in Step 612: Logon ESS as Extra Admin user.");

        logMessage("Step 612_2: Validate new logo.");
        WebElement element=waitChild("//div[@id='primary-nav']//a[@class='logo-area company-logo active']//img", 10, 1, driver);
        if (element!=null){
            myAssert.assertEquals(SystemLibraryHigh.validateScreenshotInElement_Main(10131, 10131, element, driver), true, "Failed in Step 612_2: Validate new logo.");
        }
        else{
            myAssert.fail("Failed in Step 612_2: Validate new Log - Logo is NOT found.");
        }

        logMessage("Step 613: Validate Extra Admin user's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10101, 10101, testSerialNo, driver), true, "Falied in Step 613: Validate Extra Admin user's Dashboard.");

        logMessage("Step 614: Validate Team and roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10121, 10121, driver), true, "Failed in Step 614: Validate Team and roles page.");

        signoutESS(driver);
        driver.close();
        logMessage("*** End of test 11391.");
        myAssert.assertAll();
    }

    ////// Must run without headless
    @Test (priority = 11401)
    public static void test11401_LogonESSAndValidateAsExtraAdminUser_2() throws Exception {
        logMessage("*** Start test 11401.");
        SoftAssert myAssert= new SoftAssert();

        logMessage("Logon ESS as Extra Admin user.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(111, 111, testSerialNo, driver), true, "Failed in Step 612: Logon ESS as Extra Admin user.");

        logMessage("Step 615_1: Upload photo for ExtraAdminUser.");
        myAssert.assertEquals(GeneralBasicHigh.uploadUserPhoto_Main(10081, 10081, driver), true, "Failed in Step 615_1: Upload Photo for Steve BARRY.");

        logMessage("Step 615_2: Validate new photo.");
        displayDashboard(driver);
        WebElement element=waitChild("//span[@class='avatar avatar avatar-img']//img", 10, 1, driver);
        if (element!=null){
            myAssert.assertEquals(SystemLibraryHigh.validateScreenshotInElement_Main(10141, 10141, element, driver), true, "Failed in Step 615_2: Validate new photo.");
        }else{
            myAssert.fail("Failed in Step 615_2: Validate new photo.");
        }

        signoutESS(driver);
        driver.close();
        logMessage("*** End of test 11401.");
        myAssert.assertAll();
    }

    //Must run without headless
    @Test (priority = 11411)
    public static void test11411_ChangeExtraAdminUserSettings() throws Exception {
        logMessage("*** Start test 11411_106.");
        SoftAssert myAssert= new SoftAssert();

        logMessage("Logon ESS as Extra Admin user.");
        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(111, 111, testSerialNo, driver), true, "Failed in Step 612: Logon ESS as Extra Admin user.");

        logMessage("Step 616: Change Extra Admin user's DOB.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(10091, 10091, driver), true, "Failed in Step 616: Change Extra Admin user's DOB.");

        logMessage("Step 617_1: Validate Extra Admin User roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(10061, 10061, driver), true, "Failed in Step 617_1: Validate Extra Admin User roles page.");

        logMessage("Step 617_2: Validate All Roles report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiRolesReport(10071, 10071, testSerialNo, driver), true, "Failed in Step 617_2: Validate All Roles report.");

        logMessage("Step 618: Validate Administrator Roles report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiRolesReport(10072, 10072, testSerialNo, driver), true, "Failed in Step 618: Validate Administrator Roles report.");

        logMessage("Step 619: Validate Manager Roles report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiRolesReport(10073, 10073, testSerialNo, driver), true, "Failed in Step 619: Validate Manager Roles report.");

        logMessage("Step 620: Validate Memeber Roles report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiRolesReport(10074, 10075, testSerialNo, driver), true, "Failed in Step 620: Validate Memeber Roles report.");

        driver.close();
        logMessage("*** End of test 11411.");
        myAssert.assertAll();
    }


    @Test (priority = 11421)
    public static void test11421_DuplicateAdminRoleAndValidate() throws Exception {
        logMessage("*** Start Test 11421_107...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on As Extra Admin User.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(111, 111, testSerialNo, emailDomainName, driver);

        logMessage("Step 621_1: Duplicate the Admin role.");
        myAssert.assertEquals(GeneralBasicHigh.duplicateMultiRole(101, 101, driver), true, "Failed in Step 621_1: Duplicate the Admin role.");

        logMessage("Restarting ESS and log on as Extra Admin User.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(111, 111, testSerialNo, emailDomainName, driver);

        logMessage("Step 621_2: Valdiate Role page after duplicating the Admin role.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(102, 102, driver), true, "Failed in Step 621_2: Valdiate Role page after duplicating the Admin role.");

        logMessage("Step 621_3: Valdiate Administrator role Permission panels after duplicating the Admin role.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(201, 201, driver), true, "Failed in Step 621_3: Valdiate Administrator role Permission panels after duplicating the Admin role.");

        logMessage("Step 621_4: Valdiate Second Admin role Permission panels after duplicating the Admin role.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(202, 202, driver), true, "Failed in Step 621_4: Valdiate Administrator role Permission panels after duplicating the Admin role.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11421.");
        myAssert.assertAll();
    }

    @Test (priority = 11431)
    public static void test11431_EditAndValidateRolePermisson() throws Exception {
        logMessage("*** Start Test 11431_108...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(111, 111, testSerialNo, emailDomainName, driver);

        logMessage("Step 622_1: Edit and change role permission.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(10081, 10088, driver), true, "Failded in Step 622_1: Edit and change role permission.");

        logMessage("Step 622_2: Validate Roles Permission after changes.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(221, 221, driver), true, "Failed in Step 622_2: Validate Roles Permission after changes.");

        logMessage("Step 623: Valdiate Role page.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(231, 231, driver), true, "Failed in Step 623: Valdiate Role page.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11431.");
        myAssert.assertAll();
    }


    @Test (priority = 11441)
    public static void test11441_DuplicateMemberRoleAndValidatePermissions_1() throws Exception {
        logMessage("*** Start Test 11441_109...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on ESS as Extra Admin User.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(111, 111, testSerialNo, emailDomainName, driver);

        logMessage("Step 624_1: Duplicate the Member role.");
        myAssert.assertEquals(GeneralBasicHigh.duplicateMultiRole(241, 241, driver), true, "Failed in Step 624_1: Duplicate the Member role.");

        logMessage("Restarting ESS and log on as Extra Admin User.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(111, 111, testSerialNo, emailDomainName, driver);

        logMessage("Step 624_2: Valdiate Role page after duplicating the Member role.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(251, 251, driver), true, "Failed in Step 624_2: Valdiate Role page after duplicating the Admin role.");

        logMessage("Step 624_3: Validate Roles Permission.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(252, 252, driver), true, "Failed in Step 624_3: Validate Roles Permission.");

        logMessage("Step 625: Change Roles - Member Terminated - Permissons.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(261, 261, driver), true, "Failed in Step 625: Change Roles - Member Terminated - Permissons row 261.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(262, 262, driver), true, "Failed in Step 625: Change Roles - Member Terminated - Permissons row 262.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(263, 263, driver), true, "Failed in Step 625: Change Roles - Member Terminated - Permissons row 263.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(264, 264, driver), true, "Failed in Step 625: Change Roles - Member Terminated - Permissons row 264.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(265, 265, driver), true, "Failed in Step 625: Change Roles - Member Terminated - Permissons row 265.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(266, 266, driver), true, "Failed in Step 625: Change Roles - Member Terminated - Permissons row 266.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(267, 267, driver), true, "Failed in Step 625: Change Roles - Member Terminated - Permissons row 267.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(268, 268, driver), true, "Failed in Step 625: Change Roles - Member Terminated - Permissons row 268.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(269, 269, driver), true, "Failed in Step 625: Change Roles - Member Terminated - Permissons row 269.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(270, 270, driver), true, "Failed in Step 625: Change Roles - Member Terminated - Permissons row 270.");

        logMessage("Step 626_1: Validate Role - Member Terminated - Permission after configurations.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(281, 281, driver), true, "Failed in Step 626_1: Validate Role - Member Terminated - Permission after configurations.");

        logMessage("Step 626_2: Valdiate Role page after change Member role.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(291, 291, driver), true, "Failed in Step 626_2: Valdiate Role page after changing member role.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11441.");

        myAssert.assertAll();
    }

    @Test (priority = 11451)
    public static void test11451_DuplicateMemberTerminatedRoleAndValidatePermissions_2() throws Exception {
        logMessage("*** Start Test 11451_110...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on ESS as Extra Admin User.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(111, 111, testSerialNo, emailDomainName, driver);

        logMessage("Step 627_1: Duplicate the Member Terminated role.");
        myAssert.assertEquals(GeneralBasicHigh.duplicateMultiRole(301, 301, driver), true, "Failed in Step 627_1: Duplicate the Member Terminated role.");

        logMessage("Step 627_2: Valdiate Role page after duplicating the Member Terminated role.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiRolesPage(302, 302, driver), true, "Failed in Step 627_2: Valdiate Role page after duplicating the Member Terminated role.");

        logMessage("Step 627-3 Validate Leave for Manager Roles Permission.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(303, 303, driver), true, "Failed in Step 627_3: Validate Member Terminated Roles Permission.");

        ////////////////////////////////////////////////
        logMessage("Step 628: Change Roles - Leave For Manager - Permissons.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(311, 311, driver), true, "Failed in Step 628: Change Roles - Leave For Manager - Permissons row 311.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(312, 312, driver), true, "Failed in Step 628: Change Roles - Leave For Manager - Permissons row 312.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(313, 313, driver), true, "Failed in Step 628: Change Roles - Leave For Manager - Permissons row 313.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(314, 314, driver), true, "Failed in Step 628: Change Roles - Leave For Manager - Permissons row 314.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(315, 315, driver), true, "Failed in Step 288: Change Roles - Leave For Manager - Permissons row 315.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(316, 316, driver), true, "Failed in Step 628: Change Roles - Leave For Manager - Permissons row 316.");

        logMessage("Step 628_2: Validate Role - Leave For Manager - Permission after configurations.");
        myAssert.assertEquals(GeneralBasicHigh.validatePermissionPanel_Main(321, 321, driver), true, "Failed in Step 628_2: Validate Role - Leave for Manager - Permission after configurations.");
        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11451.");

        myAssert.assertAll();
    }

    @Test (priority = 11461)
    public static void test11461_RemoveAndValidateTeam() throws Exception {
        logMessage("*** Start Test 11461_111...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 629: Validate HOWE's Team and Role page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(301, 301, driver), true, "Failed in Step 629: Validate HOWE's Team and Role page.");

        logMessage("Step 630: Validate Team C");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(491, 491, driver), true, "Failed in Step 630: Validate Team C");

        logMessage("Step 631 - Step 632: Remove Jennifer H from team.");
        myAssert.assertEquals(GeneralBasicHigh.removeMultiTeamMembers(501, 501, driver), true, "Failed in Step 631 - Step 632: Remove Jennifer H from team.");

        logMessage("Step 633: Validate Team C again after remove Jennifer from Team.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(511, 511, driver), true, "Failed in Step 633: Validate Team C again after remove Jennifer from Team.");

        logMessage("Step 634: Validate Jennifer H's Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(311, 311, driver), true, "Failed in Step 634: Validate Jennifer H's Teams and Roles page.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11461.");

        myAssert.assertAll();
    }

    @Test (priority = 11471)
    public static void test11471_AddSecondAdminRole() throws Exception {
        logMessage("*** Start Test 11471_112...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 635 - Step 636: Add Second Admin Role.");
        myAssert.assertEquals(GeneralBasicHigh.addMultiAdministratorRole(321, 321, driver), true, "Failed in Step 635 - Step 636: Add Second Admin Role.");

        logMessage("Step 637: Validate Directory list after add Second Admin Role.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(281, 281, driver), true, "Failed in Step 637: Validate Directory list after add Second Admin Role.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11471.");
        myAssert.assertAll();
    }

    @Test (priority = 11481)
    public static void test11481_ChangeMemeberRole() throws Exception {
        logMessage("*** Start Test 11481_113...");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on ESS as Extra Admin User.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(111, 111, testSerialNo, emailDomainName, driver);

        logMessage("Step 638_1: Validate Samuel DAVIS's banner.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserBanner_Main(311, 311, driver), true, "Failed in Step 638_1: Validate Samuel DAVIS's banner.");

        logMessage("Step 638_2: Validate Samuel DAVIS's Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(331, 331, driver), true, "Failed in Step 638_2: Validate Samuel DAVIS's Teams and Roles page.");

        logMessage("Step 639: Validate Member Role List In Change Member Role Dialogue.");
        myAssert.assertEquals(GeneralBasicHigh.validateMemberRoleListInChangeMemberRoleDialogue_Main(10131, 10131, driver), true, "Failed in Step 639: Validate Member Role List In Change Member Role Dialogue.");

        logMessage("Step 640_1: Change Member Role.");
        myAssert.assertEquals(GeneralBasicHigh.changeMultiMemberRole(341, 341, driver), true, "Failed in Step 640_1: Change Member Role.");

        logMessage("Step 640_2: Validate Samuel DAVIS's Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10141, 10141, driver), true, "Failed Step 640_2: Validate Samuel DAVIS's Teams and Roles page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11481.");
        myAssert.assertAll();
    }

    @Test (priority = 11491)
    public static void test11491_ReactiveEmployeeTerminated() throws Exception {
        logMessage("*** Start Test 11491_114...");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);


        if (GeneralBasic.displayPage_ViaSideNavigationBar("Samuel", "Samuel", null, "DAVIS", null, "Account Settings", driver)){
            WebElement button_Activate=SystemLibrary.waitChild("//button[contains(@class,'button button--primary') and text()='Activate']", 30, 1, driver);
            if (button_Activate!=null){
                button_Activate.click();
                Thread.sleep(3000);
                GeneralBasic.waitSpinnerDisappear(120, driver);
                logMessage("Activate Button is clicked.");
            }
        }

        logMessage("Step 641: Validate Account Setting page after click activate button.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_Main(151, 151, driver), true, "Failed in Step 630_2: Validate Account Setting page after clicking Activate button.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11491.");
        myAssert.assertAll();
    }

    @Test (priority = 11501)
    public static void test11501_AdjustAndValidateAdminRole() throws Exception{
        logMessage("*** Start Test 11501");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Step 642_1: Logon as Jennifer H.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(531, 531, testSerialNo, driver);

        logMessage("Step 642_2: Validate Navigation Bar.");
        myAssert.assertEquals(GeneralBasicHigh.validateTopNavigationMenu_Main(10151,10151, driver), true, "Failed in Step 642_2: Validate Navigation Bar.");

        logMessage("Step 642_3: Adjsut Admin role - New Starter to Edit.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(10091, 10091, driver), true, "Failed in Step 642_3: Adjsut Admin role - New Starter to Edit.");

        logMessage("Step 642_4: Adjsut Seond Admin role - New Starter to Edit.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(10092, 10092, driver), true, "Failed in Step 642_4: Adjsut Seond Admin role - New Starter to Edit.");

        logMessage("Step 642_4: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10111, 10111, testSerialNo, driver), true, "Failed in Step 642_4: Validate Dashboard.");

        logMessage("Step 642_5: Validate Annual Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10201, 10201, driver), true, "Failed in Step 642_5: Validate Annual Leave.");

        logMessage("Step 642_6: Validate Personal Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10202, 10202, driver), true, "Failed in Step 642_6: Validate Personal Leave.");

        logMessage("Step 642_7: Validate Long Service Leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10203, 10203, driver), true, "Failed in Step 642_7: Validate Long Service Leave.");

        logMessage("Step 643: Validate Team H details.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(10121, 10121, driver), true, "Failed in Step 643: Validate Team H details.");

        logMessage("Step 644: Validate Alec A's side navigation bar.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(10101, 10101, driver), true, "Failed in Step 644: Validate Alec A's side navigation bar.");

        logMessage("Step 645: Validate Robert SINGELTON's side navigation bar.");
        myAssert.assertEquals(GeneralBasicHigh.validateUserSideNavigationMenu_Main(10111, 10111, driver), true, "Failed in Step 645: Validate Robert SINGELTON's side navigation bar.");

        logMessage("Step 646: Validate Robert SINGELTON's Employment page.");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(10021, 10021, driver), true, "Failed in Step 646: Validate Robert SINGELTON's Employment page.");

        logMessage("Step 647: Validate Extra Admin Teams and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10161, 10161, driver), true, "Failed in Step 647: Validate Extra Admin's Teams and Roles page.");

        logMessage("Step 648: Remove Extra Admin's Admin Role.");
        myAssert.assertEquals(GeneralBasicHigh.removeMultiAdministratorRole(10171, 10171, testSerialNo, driver), true, "Failed in Step 648: Remove Extra Admin's Admin Role.");

        logMessage("Step 649: Validate Extra Admin Teams and Roles page after remove Admin Role.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10181, 10181, driver), true, "Failed in Step 649: Validate Extra Admin Teams and Roles page after remove Admin Role.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11501.");
        myAssert.assertAll();
    }

    @Test (priority = 11511)
    public static void test11511_RemoveAdminRole_Pending() throws Exception{
        logMessage("*** Start Test 11511");
        logMessage("Step 651- Step 652: Remove Admin role for Admin");
        logDebug("Pending test case confirmation.");

        SoftAssert myAssert = new SoftAssert();
        myAssert.fail("Peding test case confirmaiton...");

        /*WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(531, 531, testSerialNo, driver);

        myAssert.assertEquals(GeneralBasicHigh.removeMultiAdministratorRole(10191, 10191, driver), true, "Failed in Step 651- Step 652");
        logMessage("Failed remove Admin role for Admin as expected.");

        GeneralBasic.signoutESS(driver);
        driver.close();*/

        logMessage("*** End of Test 11511.");
        myAssert.assertAll();
    }

    @Test (priority = 11521)
    public static void test11521_EditAndValidateWorkflow_ApprovalToAdminUser() throws Exception{
        logMessage("*** Start Test 11521");

        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on as Jennifer H.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(531, 531, testSerialNo, driver);

        logMessage("Step 654: Validate Workflow.");
        myAssert.assertEquals(GeneralBasicHigh.validateWorkflowsPage_Main(10001, 10001, driver), true, "Failed in Step 654: Validate Workflow.");

        logMessage("Step 655: Validate the sattus of Makeing Arrovals to Admin in Edit Work flow.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(10011, 10011, driver), true, "Failed in Step 655: Validate the sattus of Makeing Arrovals to Admin in Edit Work flow.");

        logMessage("Step 656: Edit Work flow - Validate Save Warning.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkFlow_ValidateSaveWarning(10021, 10021, driver), true, "Failed in Step 656: Edit Work flow - Validate Save Warning.");

        logMessage("Step 656 - step 658: Edit Work flow.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiWorkflow(10031, 10031, driver), true, "Failed in Step 656 - Step 658: Edit Work flow.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11521.");
        myAssert.assertAll();
    }

    @Test (priority = 11531)
    public static void test11531_ValidateAndMoveTeam() throws Exception {
        logMessage("*** Start Test 11531");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on as Jennifer H.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(531, 531, testSerialNo, driver);

        logMessage("Step 659: Validate team Sub D. ");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(10131, 10131, driver), true, "Failed in Step 659: Validate team Sub D. ");
        myAssert.assertEquals(GeneralBasicHigh.moveMemberToTeam_Main(10151, 10151, driver), false, "Failed in Step 659: Move team Sub D. ");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("Log on as Admin.");
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 660: Validate team Sub D. ");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamMembers_Main(10141, 10141, driver), true, "Failed in Step 660: Validate team Sub D. ");

        logMessage("Step 661 - Step 662: Move Team member.");
        myAssert.assertEquals(GeneralBasicHigh.moveMemberToTeam_Main(10151, 10151, driver), false, "Failed in Step 661 - Step 662: Move Team Member.");

        logMessage("Step 663 - Step 666: Move Team member.");
        myAssert.assertEquals(GeneralBasicHigh.moveMemberToTeam_Main(10161, 10161, driver), true, "Failed in Step 663 - Step 666: Move Team member.");

        logMessage("Step 667: Validate Robin S's team and roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10201, 10201, driver), true, "Failed in Step 667: Validate Robin S's team and roles page.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11531.");
        myAssert.assertAll();
    }



    @Test (priority = 11541)
    public static void test11541_ChangeAndValidateApprovalProcess() throws Exception {
        logMessage("*** Start Test 11541");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on as Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 667: Validate Robin S's team and roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10201, 10201, driver), true, "Failed in Step 667: Validate Robin S's team and roles page.");

        logMessage("Step 668: Validate Robin's Approval Process.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(10211, 10211, driver), true, "Faield in Step 668: Validate Robin's Approval Process.");

        logMessage("Step 669: Validate Carmin C's team and roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_Main(10221, 10221, driver), true, "Failed in Step 669: Validate Carmin C's team and roles page.");

        logMessage("Step 670: Validate Carmin C's Approval Process.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(10231, 10231, driver), true, "Faield in Step 670: Validate Carmin C's Approval Process.");

        logMessage("Step 671_1: Change Carmin C's default approval Team.");
        myAssert.assertEquals(GeneralBasicHigh.changeDefaultApprovalTeam_Main(10241, 10241, driver), true, "Failed in Step 671_1: Change Carmin C's default approval Team.");

        logMessage("Step 671_2: Validate Carmin C's Approval Process.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ApprovalProcess_ViaTeamsAndRolesPage_Main(10251, 10251, driver), true, "Faield in Step 671_2: Validate Carmin C's Approval Process.");

        GeneralBasic.signoutESS(driver);
        driver.close();

        logMessage("*** End of Test 11541.");
        myAssert.assertAll();
    }

    @Test (priority = 11551)
    public static void test11551_ApproveMedicalAndContactChange() throws Exception {
        logMessage("*** Start Test 11551");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on as Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 672_1: Add Medical Condition for Carmin C.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiPersonalInformation(10121, 10121, driver), true, "Failed in Step 672_1: Add Medical Condition for Carmin C.");


        logMessage("Step 672_2: Validate Persona Infor page after add Medical Condition.");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_Main(10131, 10131, driver), true, "Failed in Step 672_2: Validate Persona Infor page after add Medical Condition.");

        logMessage("Step 673: Approve Medical condition change.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiPersonalInformationChanges(10141, 10141, driver), false, "Failed in Step 673: Approve Medical condition change.");
        logMessage("Failed approve as expected.");

        logMessage("Step 674_1: Add Emergency Contact for Carmin.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(10111, 10111, testSerialNo, driver), true, "Falied in Step 674_1: Add Emergency Contact.");

        logMessage("Step 674_2: Approve Emergency Contact change.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiContactDetailsChanges(10121, 10121, driver), false, "Failed in Step 673: Approve Medical condition change.");
        logMessage("Failed approve as expected.");

        logMessage("Step 675: Validate Other Approval - Profile Change.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(10091, 10091, driver), true, "Failed in Step 675: Validate Other Approval - Profile Change.");

        logMessage("Step 676: Validate Jennifer H's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10221, 10221, testSerialNo), true, "Failed in Step 676: Validate Jennifer H's email.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11551.");
        myAssert.assertAll();
    }

    @Test (priority = 11561)
    public static void test11561_ValidateJenniferHDashboardAndLeaveBalacne() throws Exception {
        logMessage("*** Start Test 11561");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on as Jennifer H.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(10101, 10101, testSerialNo, driver);

        logMessage("Step 677_1: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10121, 10121, testSerialNo, driver), true, "Failed in Step 677_1: Validate Dashboard.");

        logMessage("Step 677_2: Validate Jennifer H's Annual Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10211, 10211, driver), true, "Step 677_2: Validate Jennifer H's Annual Leave balance.");

        logMessage("Step 677_3: Validate Jennifer H's Personal Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10212, 10212, driver), true, "Step 677_3: Validate Jennifer H's Personal Leave balance.");

        logMessage("Step 677_4: Validate Jennifer H's Annual Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10213, 10213, driver), true, "Step 677_4: Validate Jennifer H's Long Service Leave balance.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11561.");
        myAssert.assertAll();
    }

    @Test (priority = 11571)
    public static void test11571_ActivateSamuelAndValidatePages() throws Exception {
        logMessage("*** Start Test 11571");
        SoftAssert myAssert = new SoftAssert();

        JavaMailLib.deleteAllMail(emailDomainName);

        logMessage("Log on as Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 678: Activate Samuel D.");
        myAssert.assertEquals(GeneralBasicHigh.activateMultiUserAccount_ViaAdmin(10241, 10241, testSerialNo, driver), true, "Failed in Step 678: Activate Samuel D.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11571.");
        myAssert.assertAll();

        logMessage("Step 679_1:Log on as Samuel D.");
        driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        myAssert.assertEquals(GeneralBasicHigh.logonESSMain(10281, 10281, testSerialNo, driver), true, "Failed in Step 679_1:Log on as Samuel D.");

        logMessage("Step 679_2: Validatge Samuel D's Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10131, 10131, testSerialNo, driver), true, "Failed in Step 679_2: Validatge Samuel D's Dashboard.");

        logMessage("Step 679_3: Validate Samuel D's Personal Information page");
        myAssert.assertEquals(GeneralBasicHigh.validatePersonalInformation_WithoutSearch_Main(10151, 10151, driver), true, "Failed in Step 679_3: Validate Samuel D's Personal Information page");

        logMessage("Step 679_4: Validate Samuel D's Account Setting page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_AccountSettingsPage_WithoutSearch_Main(10251, 10251, driver), true, "Failed in Step 679_4: Validate Samuel D's Account Setting page.");

        logMessage("Step 679_5: Validate Samuel D's Team and Roles page.");
        myAssert.assertEquals(GeneralBasicHigh.validate_TeamsRolesDetailsScreen_WithoutSearch_Main(10261, 10261, driver), true, "Failed in Step 679_5: Validate Samuel D's Team and Roles page.");

        logMessage("Step 679_6: Validate Samutl D's button option in Teams and Roles page.");
        myAssert.assertEquals(SystemLibrary.waitChild("//button[@class='button--plain add-button']", 10, 1, driver).isEnabled(), false, "Failed in Step 679_6: Validate Samutl D's button option in Teams and Roles page.");

        logMessage("Step 679_7: Validate Samuel D's Pay Advice with expansion.");
        myAssert.assertEquals(GeneralBasicHigh.validatePageAdvicePaySummaryPage_WithoutSearch_Main(10021, 10021, driver), true, "Failed in Step 679_7: Validate Samuel D's Pay Advice and Summaries page.");

        logMessage("Step 679_8: Validate Samuel D's Payment Sumamry Page.");
        myAssert.assertEquals(GeneralBasicHigh.validatePageAdvicePaySummaryPage_WithoutSearch_Main(10022, 10022, driver), true, "Failed in Step 679_8: Validate Samuel D's Payment Sumamry Page.");

        logMessage("Step 680: Validate Team page.");
        myAssert.assertEquals(GeneralBasicHigh.validateTeamTable_Main(10171, 10171, testSerialNo, driver), true, "Failed in Step 680: Validate Team page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11571.");
        myAssert.assertAll();

    }

    @Test (priority = 11581)
    public static void test11581_ApproveAndValidateProfileChange() throws Exception {
        logMessage("*** Start Test 11581");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on as Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 681: Edit Freda B's contact details.");
        myAssert.assertEquals(GeneralBasicHigh.editMultiContactDetails(10131, 10131, testSerialNo, driver), true, "Failed in Step 681: Edit Freda B's contact details.");

        logMessage("Step 681_2: Validate Freda B's contact details page after editing contact details.");
        myAssert.assertEquals(GeneralBasicHigh.validate_ContactDetails_Main(10132, 10132, driver), true,"Failed in Step 681_2: Validate Freda B's contact details page after editing contact details.");

        logMessage("Step 682: Validate Other Approval - Profile change.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(10101, 10101, driver), true, "Failed in Step 682: Validate Other Approval - Profile change.");

        logMessage("Step 683_1: Approva Freda B's contact details changes.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(10021, 10021, driver), true, "Failed in Step 683_1: Approva Freda B's contact details changes.");

        logMessage("Step 683_2: Validate Other Approval - Profile change after approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(10111, 10111, driver), true, "Failed in Step 683_2: Validate Other Approval - Profile change after approval.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11581.");
        myAssert.assertAll();
    }

    @Test (priority = 11591)
    public static void test11591_CancelAndValidateLeave() throws Exception {
        logMessage("*** Start Test 11591");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on as Jennifer H.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(10101, 10101, testSerialNo, driver);

        logMessage("Step 684_1: Validate Dashboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10121, 10121, testSerialNo, driver), true, "Failed in Step 684_1: Validate Dashboard.");

        logMessage("Step 684_2: Validate Jennifer H's Annual Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10211, 10211, driver), true, "Step 684_2: Validate Jennifer H's Annual Leave balance.");

        logMessage("Step 684_3: Validate Jennifer H's Personal Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10212, 10212, driver), true, "Step 684_3: Validate Jennifer H's Personal Leave balance.");

        logMessage("Step 684_4: Validate Jennifer H's Annual Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10213, 10213, driver), true, "Step 684_4: Validate Jennifer H's Long Service Leave balance.");

        logMessage("Step 685: Cancel the Annual Leave application.");
        myAssert.assertEquals(GeneralBasicHigh.cancelMultiPendingLeave(10221, 10221, driver), true, "Faield in Step 685: Cancel the Annual Leave application.");

        logMessage("Step 686: Validate Leave Log.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Log_Main(10222, 10222, driver), true, "Failed in Step 686: Validate Leave Log.");

        logMessage("Step 687: Validate email for Jennifer H.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10231, 10231, testSerialNo), true, "Failed in Step 687: Validate email for Jennifer H.");

        logMessage("Step 688: Validate Leave in calendar.");
        myAssert.assertEquals(GeneralBasicHigh.validateDirectoryTable_Main(10011, 10011, driver), true, "Failed in Step 688: Validate Leave in calendar.");

        logMessage("Step 689: Validate All Approvals.");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(10121, 10121, driver), true, "Failed in Step 689: Validate Approvals.");

        logMessage("Step 690: Validate Other Approvals.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(10131, 10131, driver), true, "Failed in Step 689: Validate Approvals.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11591.");
        myAssert.assertAll();
    }

    @Test (priority = 11601)
    public static void test11601_CancelAndValidateApprovedLeave() throws Exception {
        logMessage("*** Start Test 11601");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on as Carming C.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(10041, 10041, testSerialNo, driver);

        logMessage("Step 691_1: Validate Carmin C's dasboard.");
        myAssert.assertEquals(GeneralBasicHigh.validateDashBoard_Main(10141, 10141, testSerialNo, driver), true, "Failed in Step 691_1: Validate Carmin C's dasboard.");

        logMessage("Step 691_2: Validate Carmin C's LSL balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaDashboard_Main(10221, 10221, driver), true, "Failed in Step 691_2: Validate Carmin C's LSL balance.");

        logMessage("Step 692: validate Leave page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10231, 10231, driver), true, "Failed in Step 692: validate Leave page.");

        logMessage("Step 693_1: Cancal the Leave Application.");
        myAssert.assertEquals(GeneralBasicHigh.cancelMultiLeave(10241, 10241, driver), true, "Failed in Step 693_1: Cancal the Leave Application.");

        logMessage("Step 693_2: Valiate Leavbe Page after cancel leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10251, 10251, driver), true, "Failed in Step 693_2: Valiate Leavbe Page after cancel leave.");

        logMessage("Step 694: Valdiate Leave Log.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Log_Main(10261, 10261, driver), true, "Failed in Step 694: Valdiate Leave Log.");

        logMessage("Step 695: Validate email for Admin.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10241, 10241, testSerialNo), true, "Failed in Step 695: Validate email for Admin.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11601.");
        myAssert.assertAll();
    }

    @Test (priority = 11611)
    public static void test11611_DeclineAndValidateApproval() throws Exception {
        logMessage("*** Start Test 11611");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on as Sue A.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(10291, 10291, testSerialNo, driver);

        logMessage("Step 696: Validate Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(10141, 10141, driver), true, "Failed in Step 696: Validate Approval.");

        logMessage("Step 697: Valdiate Jennifer H's business card.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiUserBusinessCard(10151, 10151, driver), true, "Failed in Step 697: Valdiate Jennifer H's business card.");

        logMessage("Step 698: Decline Leave Application.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(10031, 10031, driver), true, "Failed in Step 698: Decline Leave Application.");

        logMessage("Step 698_2: Validate Approval.");
        myAssert.assertEquals(GeneralBasicHigh.validateApprovals_All_NONAdminUser_Main(10151, 10151, driver), true, "Failed in Step 698_2: Validate Approval.");

        logMessage("Step 699: Validate email for Jennifer H.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10251, 10251, testSerialNo), true, "Failed in Step 699: Validate email for Jennifer H.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11611.");
        myAssert.assertAll();
    }

    @Test (priority = 11621)
    public static void test11621_ApproveCancelledLeaveAndValidateEmail() throws Exception {
        logMessage("*** Start Test 11621");
        SoftAssert myAssert = new SoftAssert();

        logMessage("Log on as Admin.");
        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 700: Approve the LSL application.");
        myAssert.assertEquals(GeneralBasicHigh.approveMultiItem(10041, 10041, driver), true, "Failed in Step 700: Approve the LSL application.");

        logMessage("Step 701: Validate email for Carmin C.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10261, 10261, testSerialNo), true, "Failed in Step 699: Validate email for Carmin C.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11621.");
        myAssert.assertAll();
    }

    @Test (priority = 11631)
    public static void test11631_ValidateLeaveProcessingInMicrOpay() throws Exception {
        logMessage("*** Start Test 11631");
        SoftAssert myAssert = new SoftAssert();
        int errorCounter=0;

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 702: Log on MicrOpay and Validate Freda ROMFIELD's phone number in personal information screen.");
        myAssert.assertEquals(AutoITLibHigh.validateMultiEmployeePersonalDetailsScreen(10001, 10001), true, "Failed in Step 702: Log on MicrOpay and Validate Freda ROMFIELD's phone number in personal information screen.");

        logMessage("Step 703_1: Add Adds and Deds - Social Club for Carming C.");
        myAssert.assertEquals(AutoITLibHigh.addMultiEmployee_AddsDeds(10001, 10001), true, "Failed in Step 703_1: Add Adds and Deds - Social Club for Carming C.");

        logMessage("Step 703_2: Add Adds and Deds - Bounus for Carming C.");
        myAssert.assertEquals(AutoITLibHigh.addMultiEmployee_AddsDeds(10002, 10002), true, "Failed in Step 703_1: Add Adds and Deds - Bouns for Carming C.");

        logMessage("Step 704: Add Cost Account in MicrOpay.");
        myAssert.assertEquals(AutoITLibHigh.addMultiCostAccount(10001, 10002), true, "Failed in Step 704: Add Cost Account in MicrOpay.");

        logMessage("Step 705: Attach Cost Account to Gregory S.");
        myAssert.assertEquals(AutoITLibHigh.addMultiEmployee_CostAccount(10001, 10001), true, "Failed in Step 705: Attach Cost Account to Gregory S.");

        logMessage("Step 706 - Step 707: Preview and Save Leave Processing.");
        myAssert.assertEquals(AutoITLibHigh.performMultiLeaveProcessing(10001, 10001), true, "Failed in Step 706 - Step 707: Preview and Save Leave Processing.");

        AutoITLib.exitMeridian();

        logMessage("Step 708: Back up payroll and common db.");
        myAssert.assertEquals(DBManage.backupMultiDB(101, 102), true, "Failed in Step 708: Back up payroll and common db.");

        logMessage("*** End of Test 11631.");
        myAssert.assertAll();

    }

    @Test (priority = 11641)
    public static void test11641_PerformLeaveProcessing() throws Exception {
        logMessage("*** Start Test 11641");
        SoftAssert myAssert = new SoftAssert();
        int errorCounter=0;

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 709 - Step 711_1: Perform Leave Processing.");
        myAssert.assertEquals(AutoITLibHigh.performMultiLeaveProcessing(10011, 10011), true, "Failed in Step 709 - Step 711_1: Perform Leave Processing.");

        logMessage("Step 709 - Step 711_2: Perform Leave Processing.");
        myAssert.assertEquals(AutoITLibHigh.performMultiLeaveProcessing(10021, 10021), true, "Failed in Step 709 - Step 711_2: Perform Leave Processing.");

        AutoITLib.exitMeridian();

        logMessage("*** End of Test 11641.");
        myAssert.assertAll();

    }

    @Test (priority = 11651)
    public static void test11651_ValidateTransactionInMicrOpay() throws Exception {
        logMessage("*** Start Test 11651");
        SoftAssert myAssert = new SoftAssert();
        int errorCounter=0;

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 712_1: Print Transaction report - EMP17.");
        myAssert.assertEquals(AutoITLibHigh.printMultiTransactionReport(10001, 10001), true, "Failed in Step Step 712_1: Print Transaction report - EMP17.");

        logMessage("Step 712_2: Print Transaction report - EMP12.");
        myAssert.assertEquals(AutoITLibHigh.printMultiTransactionReport(10002, 10002), true, "Failed in Step Step 712_2: Print Transaction report - EMP12.");

        logMessage("Step 712_3: Print Transaction report - EMP07.");
        myAssert.assertEquals(AutoITLibHigh.printMultiTransactionReport(10003, 10003), true, "Failed in Step Step 712_3: Print Transaction report - EMP07.");

        logMessage("Step 712_4: Print Transaction report - EMP19.");
        myAssert.assertEquals(AutoITLibHigh.printMultiTransactionReport(10004, 10004), true, "Failed in Step Step 712_4: Print Transaction report - EMP19.");

        AutoITLib.exitMeridian();

        logMessage("*** End of Test 11651.");
        myAssert.assertAll();

    }

    @Test (priority = 11661)
    public static void test11661_ProcessPayAdviceInMicrOpay() throws Exception {
        logMessage("*** Start Test 11661");
        SoftAssert myAssert = new SoftAssert();
        int errorCounter=0;

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 713_1: Process Pay Advice - Upload to ESS.");
        myAssert.assertEquals(AutoITLibHigh.processMultiPayAdvice(10001, 10001), true, "Failed in Step 713_1: Process Pay Advice - Upload to ESS.");

        logMessage("Step 713_2: Process Pay Advice - Reprint to PDF.");
        myAssert.assertEquals(AutoITLibHigh.processMultiPayAdvice(10002, 10002), true, "Failed in Step 713_1: Process Pay Advice - Reprint to PDF.");


        AutoITLib.exitMeridian();

        logMessage("*** End of Test 11661.");
        myAssert.assertAll();

    }

    @Test (priority = 11671)
    public static void test11671_EditLeaveBalanceInMicrOpay() throws Exception {
        logMessage("*** Start Test 11671");
        SoftAssert myAssert = new SoftAssert();
        int errorCounter=0;

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 714: Add Contract Hours for Stanley B in Sage MicrOpay.");
        myAssert.assertEquals(AutoITLibHigh.editMultiEmployee_PayDetails(10001, 10001), true, "Failied in Step 714: Add Contract Hours for Stanley B in Sage MicrOpay.");

        logMessage("Step 715: Change Location for Jennifer H in Sage MicrOpay.");
        myAssert.assertEquals(AutoITLibHigh.editMultiEmployee_PayDetails(10011, 10011), true, "Failied in Step 715: Change Location for Jennifer H in Sage MicrOpay.");

        logMessage("Step 716_1: Add Postal postcode for Steve B in Sage MicrOpay.");
        myAssert.assertEquals(AutoITLibHigh.editMultiEmployee_PersonalInformation(10001, 10001), true, "Failed in Step 716_1: Add Postal postcode for Steve B in Sage MicrOpay.");

        logMessage("Step 716_2: Add leave for Steve B in Sage MicrOpay.");
        myAssert.assertEquals(AutoITLibHigh.editMultiEmployee_Leave(10001, 10001), true, "Failed in Step 716_2: Add leave for Steve B in Sage MicrOpay.");

        logMessage("Step 717_1: Add Postal postcode for Kris L in Sage MicrOpay.");
        myAssert.assertEquals(AutoITLibHigh.editMultiEmployee_PersonalInformation(10011, 10011), true, "Failed in Step 717_1: Add Postal postcode for Kris L in Sage MicrOpay.");

        logMessage("Step 717_2: Add Leave for Kris L in Sage MicrOpay.");
        myAssert.assertEquals(AutoITLibHigh.editMultiEmployee_Leave(10011, 10011), true, "Failed in Step 717_2: Add leave for Steve B in Sage MicrOpay.");

        AutoITLib.exitMeridian();

        logMessage("*** End of Test 11671.");
        myAssert.assertAll();

    }

    @Test (priority = 11681)
    public static void test11681_ValidatePayAdviceAfterChangeRolePermission() throws Exception {
        logMessage("*** Start Test 11681");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Step 718_1: Log on as Jennifer H.");
        GeneralBasicHigh.logonESSMain(10101, 10101, testSerialNo, driver);

        logMessage("Step 718_2: Sync All.");
        myAssert.assertEquals(GeneralBasicHigh.syncAllData_Main(121, 121, driver), true, "Failed in Step 718_2: Sync All.");

        logMessage("Step 719: Change Second Admin role permission.");
        myAssert.assertEquals(GeneralBasicHigh.configPermissionStatusNew_Main(10101, 10101, driver), true, "Failed in Step 719: Change Second Admin role permission.");

        logMessage("Step 720_1: Validate Sharon A's Pay Advice page.");
        myAssert.assertEquals(GeneralBasicHigh.validatePageAdvicePaySummaryPage_Main(10031, 10031, driver), true, "Failed in Step 720_1: Validate Sharon A's Pay Advice page.");

        logMessage("Step 720_2: Validate Carmin C's Pay Advice page.");
        myAssert.assertEquals(GeneralBasicHigh.validatePageAdvicePaySummaryPage_Main(10032, 10032, driver), true, "Failed in Step 720_2: Validate Carmin C's Pay Advice page.");

        logMessage("Step 720_3: Validate Phantom F's Pay Advice page.");
        myAssert.assertEquals(GeneralBasicHigh.validatePageAdvicePaySummaryPage_Main(10033, 10033, driver), true, "Failed in Step 720_3: Validate Phantom F's Pay Advice page.");

        logMessage("Step 720_4: Validate Gregory S's Pay Advice page.");
        myAssert.assertEquals(GeneralBasicHigh.validatePageAdvicePaySummaryPage_Main(10034, 10034, driver), true, "Failed in Step 720_4: Validate Gregory S's Pay Advice page.");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11681.");
        myAssert.assertAll();

    }

    @Test (priority = 11691)
    public static void test11691_ValidateLeaveBalance() throws Exception {
        logMessage("*** Start Test 11691");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Log on as Jennifer H.");
        GeneralBasicHigh.logonESSMain(10101, 10101, testSerialNo, driver);

        logMessage("Step 721_1: Check Stanley B's Annual Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10231, 10231, driver), true, "Failed in Step 721_1: Check Stanley B's Annual Leave balance.");

        logMessage("Step 721_2: Check Stanley B's Sick balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10232, 10232, driver), true, "Failed in Step 721_2: Check Stanley B's Sick Leave balance.");

        logMessage("Step 721_3: Check Stanley B's Long Service Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10233, 10233, driver), true, "Failed in Step 721_3: Check Stanley B's Long Service Leave balance.");

        logMessage("Step 721_4: Check Stanley B's User Defined Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10234, 10234, driver), true, "Failed in Step 721_3: Check Stanley B's Long Service Leave balance.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11691.");
        myAssert.assertAll();

    }

    //must run without headless
    @Test (priority = 11701)
    public static void test11701_ValidateEmployeePageAndAuditReport() throws Exception {
        logMessage("*** Start Test 11701");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(3);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        logMessage("Log on as Jennifer H.");
        GeneralBasicHigh.logonESSMain(10101, 10101, testSerialNo, driver);

        logMessage("Step 722: Validate Jennifer H's Employeement page..");
        myAssert.assertEquals(GeneralBasicHigh.validateEmployment_Main(10031, 10031, driver), true, "Failed in Step 722: Validate Jennifer H's Teams & Role's page..");

        logMessage("Step 723: Check Steve Johnno BARRY's User Defined Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10241, 10241, driver), true, "Failed in Step 723: Check Steve Johnno BARRY's User Defined Leave balance.");

        logMessage("Step 724: Validate Maintenance Audit Report.");
        myAssert.assertEquals(GeneralBasicHigh.downloadMultiAuditReportViaDashboard(10001, 10001, driver), true, "Failed in Step 724: Validate Maintenance Audit Report.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11701.");
        myAssert.assertAll();
    }

    @Test (priority = 11711)
    public static void test11711_PerformEOPInMicrOpay() throws Exception {
        logMessage("*** Start Test 11711");
        SoftAssert myAssert = new SoftAssert();
        int errorCounter=0;

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 725: Perform EOP in MicrOpay.");
        myAssert.assertEquals(AutoITLibHigh.processMultiEOP(10001, 10001), true, "Failed in Step 725: Perform EOP in MicrOpay.");

        AutoITLib.exitMeridian();

        logMessage("*** End of Test 11711.");
        myAssert.assertAll();

    }

    @Test (priority = 11721)
    public static void test11721_CancelApprovalAndValidateLeave1() throws Exception {
        logMessage("*** Start Test 11721");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        logMessage("Log on as Admin.");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 726_1 and Step 728: Validate Gregory S's Leave page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10271, 10271, driver), true, "Failed in Step 726_1: Validate Gregory S's Leave page..");

        logMessage("Step 726_2: Validate Gregory S's Leave balance.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeaveBalance_ViaLeavePage_Main(10251, 10251, driver), true, "Failed in Step 726_1: Validate Gregory S's Leave page..");

        logMessage("Step 727: Validate Gregory S's Leave Log.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Log_Main(10281, 10281, driver), true, "Failed in Step 727: Validate Gregory S's Leave Log.");

        logMessage("Step 729: Cancel the leave .");
        myAssert.assertEquals(GeneralBasicHigh.cancelMultiLeave(10291, 10291, driver), true, "Step 729: Cancel the leave .");

        logMessage("Step 730: Validate Leave page after cancel leave.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10301, 10301, driver), true, "Failed in Step 726_1: Validate Gregory S's Leave page..");

        logMessage("Step 731: Valdiate Other Approval Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(10161, 10161, driver), true, "Failed in Step 726_1: Validate Gregory S's Leave page..");

        logMessage("Step 732: Validate Gregory S's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10271, 10271, testSerialNo), true, "Faied in Step 732: Validate Gregory S's email.");

        logMessage("Step 733: Validate Ernie MANNING's email.");
        myAssert.assertEquals(JavaMailLib.validateMultiEmailContent(10281, 10281, testSerialNo), true, "Faied in Step 733: Validate Ernie MANNING's email.");
        //No email. Keep eye on this issue....

        logMessage("Step 734 - Step 735: Approve All other approvals.");
        myAssert.assertEquals(GeneralBasic.approveAllOtherApproval_ViaAdmin(driver), true, "Failed in Step 734 - Step 735: Approve All other approvals.");

        logMessage("Step 735: Validate Other Approval after approval All. ");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiOtherApprovals_ViaAdmin(10171, 10171, driver), true, "Failed in Step 735: Validate Other Approval after approval All. ");

        logMessage("Step 736: Validate my approval. ");
        myAssert.assertEquals(GeneralBasicHigh.validateMultiMyApprovals_ViaAdmin(10181, 10181, driver), true, "Failed in Step 736: Validate my approval. ");


        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11721.");
        myAssert.assertAll();
    }


    @Test (priority = 11731)
    public static void test11731_ValidateLeavePageAndLeaveLog() throws Exception {
        logMessage("*** Start Test 11731");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        logMessage("Log on as Admin.");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 737: Valdiate Gregory S's Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10311, 10311, driver), true, "Failed in Step 737: Valdiate Gregory S's Leave Page.");

        logMessage("Step 738: Validate Gregory S's Leave Log in Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Log_Main(10321, 10321, driver), true, "Failed in Step 738: Validate Gregory S's Leave Log in Leave Page...");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11731.");
        myAssert.assertAll();
    }

    @Test (priority = 11741)
    public static void test11741_PreviewAndValidateLeaveProcessingInMicrOpay() throws Exception {
        logMessage("*** Start Test 11741");
        SoftAssert myAssert = new SoftAssert();
        int errorCounter=0;

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 739: Preview and Validate Leave Processing.");
        myAssert.assertEquals(AutoITLibHigh.performMultiLeaveProcessing(10031, 10031), true, "Failed in Step 739: Preview and Validate Leave Processing.");


        AutoITLib.exitMeridian();
        logMessage("*** End of Test 11741.");
        myAssert.assertAll();
    }

    @Test (priority = 11751)
    public static void test11751_ValidateSharonLeavePage() throws Exception {
        logMessage("*** Start Test 11751");
        SoftAssert myAssert = new SoftAssert();

        WebDriver driver = GeneralBasic.launchESS(SystemLibrary.driverType);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        logMessage("Log on as Admin.");
        GeneralBasicHigh.logonESSMain(101, 101, testSerialNo, emailDomainName, driver);

        logMessage("Step 740: Valdiate Sharon A's Leave Page.");
        myAssert.assertEquals(GeneralBasicHigh.validateLeavePage_Main(10331, 10331, driver), true, "Failed in Step 740: Valdiate Sharon A's Leave Page.");

        GeneralBasic.signoutESS(driver);
        driver.close();
        logMessage("*** End of Test 11751.");
        myAssert.assertAll();
    }

    @Test (priority = 11761)
    public static void test11761_PerformLeaveProcessingAndValidateTransactionReportInMicrOpay() throws Exception {
        logMessage("*** Start Test 11761");
        SoftAssert myAssert = new SoftAssert();
        int errorCounter=0;

        AutoITLibHigh.logonMeridian_Main(101, 101);

        logMessage("Step 741: Perform Leave Processing and Validate the Audit Report.");
        myAssert.assertEquals(AutoITLibHigh.performMultiLeaveProcessing(10041, 10041), true, "Failed in Step 741: Perform Leave Processing and Validate the Audit Report.");

        logMessage("Step 742_1: Print Transaction report - EMP17.");
        myAssert.assertEquals(AutoITLibHigh.printMultiTransactionReport(10011, 10011), true, "Failed in Step Step 742_1: Print Transaction report - EMP17.");

        logMessage("Step 742_2: Print Transaction report - EMP12.");
        myAssert.assertEquals(AutoITLibHigh.printMultiTransactionReport(10012, 10012), true, "Failed in Step Step 742_2: Print Transaction report - EMP12.");

        logMessage("Step 742_3: Print Transaction report - EMP07.");
        myAssert.assertEquals(AutoITLibHigh.printMultiTransactionReport(10013, 10013), true, "Failed in Step Step 742_3: Print Transaction report - EMP07.");

        logMessage("Step 742_4: Print Transaction report - EMP19.");
        myAssert.assertEquals(AutoITLibHigh.printMultiTransactionReport(10014, 10014), true, "Failed in Step Step 742_4: Print Transaction report - EMP19.");

        AutoITLib.exitMeridian();
        logMessage("*** End of Test 11761.");
        myAssert.assertAll();
    }

        //////////////////// Debug /////////////////////



}
